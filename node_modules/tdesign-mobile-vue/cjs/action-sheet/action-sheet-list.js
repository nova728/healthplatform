/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var button_index = require('../button/index.js');
var badge_index = require('../badge/index.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useClass = require('../hooks/useClass.js');
require('../button/button.js');
require('../loading/index.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isString');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../config.js');
require('../loading/icon/spinner.js');
require('../loading/props.js');
require('../shared/dom.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('../loading/plugin.js');
require('../shared/component.js');
require('../button/props.js');
require('../form/hooks.js');
require('lodash/isBoolean');
require('../shared/hover.js');
require('../badge/badge.js');
require('../badge/props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}
var ActionSheetList = vue.defineComponent({
  components: {
    TButton: button_index.Button,
    TBadge: badge_index.Badge
  },
  props: {
    items: {
      type: Array,
      required: true
    },
    align: {
      type: String,
      default: "center"
    }
  },
  emits: ["selected"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var actionSheetClass = hooks_useClass.usePrefixClass("action-sheet");
    var renderTNodeJSX = hooks_tnode.useTNodeDefault();
    var _toRefs = vue.toRefs(props),
      align = _toRefs.align,
      items = _toRefs.items;
    var handleSelected = function handleSelected(index) {
      emit("selected", index);
    };
    var itemClasses = vue.computed(function () {
      return _defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(actionSheetClass.value, "__list-item"), true), "".concat(actionSheetClass.value, "__list-item--left"), align.value === "left");
    });
    return function () {
      var renderButtonNode = function renderButtonNode() {
        var renderBadgeNode = function renderBadgeNode(item) {
          if (item.badge) {
            var content = function content() {
              if (item.badge.dot || item.badge.count) {
                return vue.createVNode(vue.resolveComponent("t-badge"), {
                  "count": item.badge.count,
                  "max-count": item.badge.maxCount || 99,
                  "dot": item.badge.dot,
                  "content": item.badge.content,
                  "size": item.badge.size,
                  "offset": item.badge.offset || [-16, 20]
                }, {
                  default: function _default() {
                    return [vue.createVNode("span", {
                      "class": "".concat(actionSheetClass.value, "__list-item-text")
                    }, [" ", item.label])];
                  }
                });
              }
              return renderTNodeJSX("badge", {
                defaultNode: vue.createVNode("span", {
                  "class": "".concat(actionSheetClass.value, "__list-item-text")
                }, [item.label])
              });
            };
            return content();
          }
          return vue.createVNode("span", {
            "class": "".concat(actionSheetClass.value, "__list-item-text")
          }, [item.label]);
        };
        var buttonList = items.value.map(function (item, index) {
          var _slot;
          return vue.createVNode(vue.resolveComponent("t-button"), {
            "key": index,
            "variant": "text",
            "block": true,
            "class": [itemClasses.value, _defineProperty__default["default"]({}, "".concat(actionSheetClass.value, "__list-item--disabled"), item.disabled)],
            "disabled": item.disabled,
            "icon": item.icon,
            "style": {
              color: item.color
            },
            "onClick": function onClick() {
              return handleSelected(index);
            }
          }, _isSlot(_slot = renderBadgeNode(item)) ? _slot : {
            default: function _default() {
              return [_slot];
            }
          });
        });
        return buttonList;
      };
      return vue.createVNode("div", {
        "class": "".concat(actionSheetClass.value, "__list")
      }, [renderButtonNode()]);
    };
  }
});

exports["default"] = ActionSheetList;
//# sourceMappingURL=action-sheet-list.js.map
