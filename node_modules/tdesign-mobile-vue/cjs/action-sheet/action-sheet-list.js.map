{"version":3,"file":"action-sheet-list.js","sources":["../../src/action-sheet/action-sheet-list.tsx"],"sourcesContent":["import { computed, defineComponent, PropType, toRefs } from 'vue';\nimport TButton from '../button';\nimport TBadge from '../badge';\nimport { ActionSheetItem } from './type';\nimport { useTNodeDefault } from '../hooks/tnode';\nimport { usePrefixClass } from '../hooks/useClass';\n\nexport default defineComponent({\n  components: { TButton, TBadge },\n  props: {\n    items: {\n      type: Array as PropType<ActionSheetItem[]>,\n      required: true,\n    },\n    align: {\n      type: String as PropType<'left' | 'center'>,\n      default: 'center',\n    },\n  },\n  emits: ['selected'],\n  setup(props, { emit }) {\n    const actionSheetClass = usePrefixClass('action-sheet');\n\n    const renderTNodeJSX = useTNodeDefault();\n\n    const { align, items } = toRefs(props);\n    const handleSelected = (index: number) => {\n      emit('selected', index);\n    };\n    const itemClasses = computed(() => ({\n      [`${actionSheetClass.value}__list-item`]: true,\n      [`${actionSheetClass.value}__list-item--left`]: align.value === 'left',\n    }));\n\n    return () => {\n      const renderButtonNode = () => {\n        const renderBadgeNode = (item: ActionSheetItem) => {\n          if (item.badge) {\n            const content = () => {\n              if (item.badge.dot || item.badge.count) {\n                return (\n                  <t-badge\n                    count={item.badge.count}\n                    max-count={item.badge.maxCount || 99}\n                    dot={item.badge.dot}\n                    content={item.badge.content}\n                    size={item.badge.size}\n                    offset={item.badge.offset || [-16, 20]}\n                  >\n                    <span class={`${actionSheetClass.value}__list-item-text`}> {item.label}</span>\n                  </t-badge>\n                );\n              }\n              return renderTNodeJSX('badge', {\n                defaultNode: <span class={`${actionSheetClass.value}__list-item-text`}>{item.label}</span>,\n              });\n            };\n            return content();\n          }\n          return <span class={`${actionSheetClass.value}__list-item-text`}>{item.label}</span>;\n        };\n        const buttonList = items.value.map((item, index) => (\n          <t-button\n            key={index}\n            variant={'text'}\n            block\n            class={[itemClasses.value, { [`${actionSheetClass.value}__list-item--disabled`]: item.disabled }]}\n            disabled={item.disabled}\n            icon={item.icon}\n            style={{ color: item.color }}\n            onClick={() => handleSelected(index)}\n          >\n            {renderBadgeNode(item)}\n          </t-button>\n        ));\n        return buttonList;\n      };\n\n      return <div class={`${actionSheetClass.value}__list`}>{renderButtonNode()}</div>;\n    };\n  },\n});\n"],"names":["_isSlot","s","Object","prototype","toString","call","_isVNode","defineComponent","components","TButton","TBadge","props","items","type","Array","required","align","String","default","emits","setup","_ref","emit","actionSheetClass","usePrefixClass","renderTNodeJSX","useTNodeDefault","_toRefs","toRefs","handleSelected","index","itemClasses","computed","_defineProperty","concat","value","renderButtonNode","renderBadgeNode","item","badge","content","dot","count","_createVNode","_resolveComponent","maxCount","size","offset","_default","label","defaultNode","buttonList","map","_slot","disabled","icon","color","onClick"],"mappings":"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"}