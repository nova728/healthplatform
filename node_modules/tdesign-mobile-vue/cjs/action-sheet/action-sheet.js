/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var actionSheet_actionSheetList = require('./action-sheet-list.js');
var actionSheet_actionSheetGrid = require('./action-sheet-grid.js');
var popup_index = require('../popup/index.js');
var button_index = require('../button/index.js');
var config = require('../config.js');
var actionSheet_props = require('./props.js');
var hooks_useClass = require('../hooks/useClass.js');
var configProvider_useConfig = require('../config-provider/useConfig.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('../badge/index.js');
require('../badge/badge.js');
require('lodash/isNumber');
require('lodash/isString');
require('../badge/props.js');
require('../hooks/tnode.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('../shared/component.js');
require('../grid/index.js');
require('../grid/grid.js');
require('../grid/props.js');
require('../grid/grid-item.js');
require('../grid/grid-item-props.js');
require('../image/index.js');
require('../image/image.js');
require('@vueuse/core');
require('tdesign-icons-vue-next');
require('../loading/index.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/isNull');
require('lodash/isUndefined');
require('../loading/icon/spinner.js');
require('../loading/props.js');
require('../shared/dom.js');
require('../loading/plugin.js');
require('../image/props.js');
require('../swiper/index.js');
require('../swiper/swiper.js');
require('../swipe-cell/useSwipe.js');
require('../shared/util.js');
require('../swiper/props.js');
require('../shared/useVModel/index.js');
require('../swiper/swiper-item.js');
require('../popup/popup.js');
require('../popup/props.js');
require('../overlay/index.js');
require('../overlay/overlay.js');
require('../overlay/props.js');
require('../hooks/useLockScroll.js');
require('../_util/useTouch.js');
require('../_util/getScrollParent.js');
require('../_util/supportsPassive.js');
require('../shared/render-tnode.js');
require('../shared/render.js');
require('../button/button.js');
require('../button/props.js');
require('../form/hooks.js');
require('lodash/isBoolean');
require('../shared/hover.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !vue.isVNode(s);
}
var prefix = config["default"].prefix;
var ActionSheetVue = vue.defineComponent({
  name: "".concat(prefix, "-action-sheet"),
  components: {
    TPopup: popup_index.Popup,
    TButton: button_index.Button,
    ActionSheetList: actionSheet_actionSheetList["default"],
    ActionSheetGrid: actionSheet_actionSheetGrid["default"]
  },
  props: actionSheet_props["default"],
  emits: ["selected", "update:modelValue", "cancel", "close", "update:visible"],
  setup: function setup(props2, context) {
    var actionSheetClass = hooks_useClass.usePrefixClass("action-sheet");
    var _useConfig = configProvider_useConfig.useConfig("actionSheet"),
      globalConfig = _useConfig.globalConfig;
    var actionItems = vue.computed(function () {
      return props2.items.map(function (item) {
        if (typeof item === "string") {
          return {
            label: item
          };
        }
        return item;
      });
    });
    var _useDefault = shared_useDefault_index.useDefault(props2, context.emit, "visible", "visible-change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      currentVisible = _useDefault2[0];
    var rootClasses = vue.computed(function () {
      return _defineProperty__default["default"]({}, "".concat(actionSheetClass.value, "__content"), true);
    });
    var descriptionClasses = vue.computed(function () {
      return _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(actionSheetClass.value, "__description"), true), "".concat(actionSheetClass.value, "__description--left"), props2.align === "left"), "".concat(actionSheetClass.value, "__description--grid"), props2.theme === "grid");
    });
    vue.watch(function () {
      return currentVisible.value;
    }, function (val) {
      currentVisible.value = val;
    }, {
      immediate: true,
      deep: true
    });
    var hide = function hide(trigger) {
      var _props2$onClose;
      context.emit("update:modelValue", false);
      (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, {
        trigger: trigger
      });
    };
    var handleCancel = function handleCancel() {
      var _props2$onCancel;
      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 || _props2$onCancel.call(props2);
      context.emit("update:modelValue", false);
    };
    var handleSelected = function handleSelected(index) {
      var _props2$onSelected;
      (_props2$onSelected = props2.onSelected) === null || _props2$onSelected === void 0 || _props2$onSelected.call(props2, props2 === null || props2 === void 0 ? void 0 : props2.items[index], index);
      hide("selected");
    };
    var handleClose = function handleClose() {
      hide("overlay");
    };
    return function () {
      var _slot;
      var root = function root() {
        var description = function description() {
          if (props2.description) {
            return vue.createVNode("p", {
              "class": descriptionClasses.value
            }, [props2.description]);
          }
          return null;
        };
        var list = function list() {
          if (props2.theme === "list") {
            return vue.createVNode(vue.resolveComponent("action-sheet-list"), {
              "align": props2.align,
              "items": actionItems.value,
              "onSelected": handleSelected
            }, null);
          }
        };
        var grid = function grid() {
          if (props2.theme === "grid") {
            return vue.createVNode(vue.resolveComponent("action-sheet-grid"), {
              "items": actionItems.value,
              "count": props2.count,
              "onSelected": handleSelected
            }, null);
          }
        };
        var cancel = function cancel() {
          if (props2.showCancel) {
            return vue.createVNode("div", {
              "class": "".concat(actionSheetClass.value, "__footer")
            }, [vue.createVNode("div", {
              "class": "".concat(actionSheetClass.value, "__gap-").concat(props2.theme)
            }, null), vue.createVNode(vue.resolveComponent("t-button"), {
              "class": "".concat(actionSheetClass.value, "__cancel"),
              "variant": "text",
              "block": true,
              "onClick": handleCancel
            }, {
              default: function _default() {
                return [props2.cancelText || globalConfig.value.cancel];
              }
            })]);
          }
        };
        return vue.createVNode("div", {
          "class": rootClasses.value
        }, [description(), list(), grid(), cancel()]);
      };
      return vue.createVNode(vue.resolveComponent("t-popup"), {
        "visible": currentVisible.value,
        "placement": "bottom",
        "destroy-on-close": true,
        "class": actionSheetClass.value,
        "onClose": handleClose
      }, _isSlot(_slot = root()) ? _slot : {
        default: function _default() {
          return [_slot];
        }
      });
    };
  }
});

exports["default"] = ActionSheetVue;
//# sourceMappingURL=action-sheet.js.map
