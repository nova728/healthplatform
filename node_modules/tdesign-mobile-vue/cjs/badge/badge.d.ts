declare const _default: import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    count: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: number;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    shape: {
        type: import("vue").PropType<"circle" | "square" | "bubble" | "ribbon">;
        default: "circle" | "square" | "bubble" | "ribbon";
        validator(val: "circle" | "square" | "bubble" | "ribbon"): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    color: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    count: {
        type: import("vue").PropType<string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: number;
    };
    dot: BooleanConstructor;
    maxCount: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<(string | number)[]>;
    };
    shape: {
        type: import("vue").PropType<"circle" | "square" | "bubble" | "ribbon">;
        default: "circle" | "square" | "bubble" | "ribbon";
        validator(val: "circle" | "square" | "bubble" | "ribbon"): boolean;
    };
    showZero: BooleanConstructor;
    size: {
        type: import("vue").PropType<"medium" | "large">;
        default: "medium" | "large";
        validator(val: "medium" | "large"): boolean;
    };
}>>, {
    color: string;
    size: "medium" | "large";
    dot: boolean;
    shape: "circle" | "square" | "bubble" | "ribbon";
    count: string | number | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    maxCount: number;
    showZero: boolean;
}, {}>;
export default _default;
