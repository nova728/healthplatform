/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _typeof = require('@babel/runtime/helpers/typeof');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var config = require('../config.js');
var checkbox_checkboxGroupProps = require('./checkbox-group-props.js');
var checkbox_checkbox = require('./checkbox.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useClass = require('../hooks/useClass.js');
var checkbox_hooks_getOptions = require('./hooks/getOptions.js');
var checkbox_hooks_setCheckAllStatus = require('./hooks/setCheckAllStatus.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('tdesign-icons-vue-next');
require('./props.js');
require('../form/hooks.js');
require('lodash/isBoolean');
require('../shared/render-tnode.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('../shared/useChildSlots/index.js');
require('lodash/intersection');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config["default"].prefix;
var _CheckboxGroup = vue.defineComponent({
  name: "".concat(prefix, "-checkbox-group"),
  components: {
    Checkbox: checkbox_checkbox["default"]
  },
  props: checkbox_checkboxGroupProps["default"],
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props2, context) {
    var checkboxGroupClass = hooks_useClass.usePrefixClass("checkbox-group");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var isArray = Array.isArray;
    var _useDefault = shared_useDefault_index.useDefault(props2, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      innerValue = _useDefault2[0],
      setInnerValue = _useDefault2[1];
    var optionList = checkbox_hooks_getOptions.getOptions(props2, context.slots);
    var checkedSet = vue.computed(function () {
      if (isArray(innerValue.value)) {
        return new Set(innerValue.value);
      }
      return /* @__PURE__ */new Set();
    });
    var checkAllStatus = checkbox_hooks_setCheckAllStatus.setCheckAllStatus(optionList, innerValue, checkedSet);
    var maxExceeded = vue.computed(function () {
      return props2.max !== void 0 && innerValue.value.length === props2.max;
    });
    var onCheckedChange = function onCheckedChange(p) {
      var checked = p.checked,
        checkAll = p.checkAll,
        e = p.e;
      if (checkAll) {
        onCheckAllChange(checked, {
          e: e
        });
      } else {
        handleCheckboxChange(p);
      }
    };
    var handleCheckboxChange = function handleCheckboxChange(data) {
      var currentValue = data.option.value;
      if (isArray(innerValue.value)) {
        if (currentValue === void 0) {
          return;
        }
        var val = _toConsumableArray__default["default"](innerValue.value);
        if (data.checked) {
          val.push(currentValue);
        } else {
          var i = val.indexOf(currentValue);
          val.splice(i, 1);
        }
        setInnerValue(val, {
          e: data.e,
          current: data.option.value,
          type: data.checked ? "check" : "uncheck"
        });
      } else {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof__default["default"](innerValue.value)));
      }
    };
    var getAllCheckboxValue = function getAllCheckboxValue() {
      var val = /* @__PURE__ */new Set();
      for (var i = 0, len = optionList.value.length; i < len; i++) {
        var item = optionList.value[i];
        if (item.checkAll) continue;
        if (item.value === void 0) continue;
        val.add(item.value);
        if (maxExceeded.value) break;
      }
      return _toConsumableArray__default["default"](val);
    };
    var onCheckAllChange = function onCheckAllChange(checked, context2) {
      var value = checked ? getAllCheckboxValue() : [];
      setInnerValue(value, {
        e: context2.e,
        type: checked ? "check" : "uncheck",
        current: void 0
      });
    };
    vue.provide("checkboxGroup", _objectSpread(_objectSpread({}, vue.toRefs(props2)), {}, {
      innerValue: innerValue,
      checkAllStatus: checkAllStatus,
      checkedSet: checkedSet,
      onCheckedChange: onCheckedChange
    }));
    return function () {
      var checkboxNode = function checkboxNode() {
        return vue.createVNode("span", null, [optionList.value.map(function (item, idx) {
          return vue.createVNode(vue.resolveComponent("checkbox"), {
            "key": idx,
            "name": item.name || "",
            "label": item.label || item.text || "",
            "value": item.value,
            "check-all": item.checkAll,
            "block": item.block || true,
            "checked": item.checked || false,
            "content": item.content || "",
            "content-disabled": item.contentDisabled || false,
            "icon": item.icon || "circle",
            "indeterminate": item.indeterminate || false,
            "disabled": item.disabled,
            "max-content-row": item.maxContentRow || 5,
            "max-label-row": item.maxLabelRow || 3,
            "readonly": item.readonly || false,
            "placement": item.placement || "left"
          }, null);
        })]);
      };
      return vue.createVNode("div", {
        "class": "".concat(checkboxGroupClass.value)
      }, [!(props2.options && props2.options.length) ? renderTNodeJSX("default") : checkboxNode()]);
    };
  }
});

exports["default"] = _CheckboxGroup;
//# sourceMappingURL=checkbox-group.js.map
