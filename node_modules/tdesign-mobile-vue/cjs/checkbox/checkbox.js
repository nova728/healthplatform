/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var config = require('../config.js');
var checkbox_props = require('./props.js');
var hooks_tnode = require('../hooks/tnode.js');
var form_hooks = require('../form/hooks.js');
var hooks_useClass = require('../hooks/useClass.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('lodash/isBoolean');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config["default"].prefix;
var _Checkbox = vue.defineComponent({
  name: "".concat(prefix, "-checkbox"),
  components: {
    TNode: shared_renderTnode["default"]
  },
  props: _objectSpread(_objectSpread({}, checkbox_props["default"]), {}, {
    borderless: {
      type: Boolean,
      value: false
    }
  }),
  emits: ["update:checked", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var checkboxClass = hooks_useClass.usePrefixClass("checkbox");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "checked", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      innerChecked = _useDefault2[0],
      setInnerChecked = _useDefault2[1];
    var checkboxGroup = vue.inject("checkboxGroup", void 0);
    var disabled = form_hooks.useFormDisabled(checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.disabled);
    var indeterminate = vue.computed(function () {
      if (props.checkAll && checkboxGroup != null) return checkboxGroup.checkAllStatus.value === "indeterminate";
      return props.indeterminate;
    });
    var isIconArray = Array.isArray(props.icon);
    var defaultCheckIcons = [vue.h(tdesignIconsVueNext.CheckCircleFilledIcon), vue.h(tdesignIconsVueNext.CircleIcon)];
    var checkIcons = vue.computed(function () {
      if (isIconArray && props.icon.length > 1) {
        return props.icon.map(function (icon) {
          return typeof icon === "string" ? vue.h("img", {
            class: "".concat(checkboxClass.value, "__icon-image"),
            src: icon
          }) : icon;
        });
      }
      return defaultCheckIcons;
    });
    var checkedIcon = vue.computed(function () {
      if (props.icon === "circle" || props.icon === true) return indeterminate.value ? vue.h(tdesignIconsVueNext.MinusCircleFilledIcon) : vue.h(tdesignIconsVueNext.CheckCircleFilledIcon);
      if (props.icon === "rectangle") return indeterminate.value ? vue.h(tdesignIconsVueNext.MinusRectangleFilledIcon) : vue.h(tdesignIconsVueNext.CheckRectangleFilledIcon);
      if (props.icon === "line") return indeterminate.value ? vue.h(tdesignIconsVueNext.MinusIcon) : vue.h(tdesignIconsVueNext.CheckIcon);
      return null;
    });
    var isChecked = vue.computed(function () {
      if (props.checkAll) {
        var checkAllStatus = checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.checkAllStatus.value;
        return checkAllStatus === "checked" || checkAllStatus === "indeterminate";
      }
      if (checkboxGroup != null && props.value != null) {
        var _checkboxGroup$checke;
        return !!((_checkboxGroup$checke = checkboxGroup.checkedSet.value) !== null && _checkboxGroup$checke !== void 0 && _checkboxGroup$checke.has(props.value));
      }
      return innerChecked.value;
    });
    var isDisabled = vue.computed(function () {
      if (checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.max.value) return checkboxGroup.max.value <= checkboxGroup.innerValue.value.length && !isChecked.value;
      return disabled.value;
    });
    var handleChange = function handleChange(e, source) {
      if (isDisabled.value || props.readonly) return;
      if (source === "text" && props.contentDisabled) return;
      var value = !isChecked.value;
      setInnerChecked(value, {
        e: e
      });
      e.stopPropagation();
      if (checkboxGroup && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.onCheckedChange) {
        checkboxGroup.onCheckedChange({
          checked: value,
          checkAll: props.checkAll,
          e: e,
          option: props
        });
      }
    };
    return function () {
      var placement = props.placement,
        block = props.block,
        icon = props.icon,
        maxLabelRow = props.maxLabelRow,
        maxContentRow = props.maxContentRow,
        borderless = props.borderless;
      var renderIconArray = function renderIconArray() {
        if (isIconArray) {
          return vue.createVNode(vue.resolveComponent("t-node"), {
            "content": checkIcons.value[isChecked.value ? 0 : 1],
            "class": "".concat(checkboxClass.value, "__icon-wrapper")
          }, null);
        }
        if (isChecked.value) {
          return vue.createVNode(vue.resolveComponent("t-node"), {
            "content": checkedIcon.value,
            "class": "".concat(checkboxClass.value, "__icon-wrapper")
          }, null);
        }
        return vue.createVNode(vue.Fragment, null, [(icon === "circle" || icon === true || icon === "rectangle") && vue.createVNode("div", {
          "class": _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(checkboxClass.value, "__icon-circle"), icon === true), "".concat(checkboxClass.value, "__icon-").concat(icon), typeof icon === "string"), "".concat(checkboxClass.value, "__icon-").concat(icon, "--disabled"), isDisabled.value)
        }, null), icon === "line" && vue.createVNode("div", {
          "class": "placeholder"
        }, null)]);
      };
      var renderIconNode = function renderIconNode() {
        if (!icon) {
          return null;
        }
        return vue.createVNode("div", {
          "class": _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(checkboxClass.value, "__icon"), true), "".concat(checkboxClass.value, "__icon--").concat(placement), true), "".concat(checkboxClass.value, "__icon--checked"), isChecked.value), "".concat(checkboxClass.value, "__icon--disabled"), isDisabled.value)
        }, [renderIconArray()]);
      };
      var renderCheckBoxContent = function renderCheckBoxContent() {
        var labelContent = renderContent("default", "label");
        var checkboxContent = renderTNodeJSX("content");
        return vue.createVNode("div", {
          "class": "".concat(checkboxClass.value, "__content"),
          "onClick": function onClick(event) {
            event.stopPropagation();
            handleChange(event, "text");
          }
        }, [vue.createVNode("div", {
          "class": _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(checkboxClass.value, "__title"), true), "".concat(checkboxClass.value, "__title--checked"), isChecked.value), "".concat(checkboxClass.value, "__title--disabled"), isDisabled.value),
          "style": {
            "-webkit-line-clamp": maxLabelRow
          }
        }, [labelContent]), vue.createVNode("div", {
          "class": _defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(checkboxClass.value, "__description"), true), "".concat(checkboxClass.value, "__description--disabled"), isDisabled.value),
          "style": {
            "-webkit-line-clamp": maxContentRow
          }
        }, [checkboxContent])]);
      };
      return vue.createVNode("div", {
        "class": _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(checkboxClass.value), true), "".concat(checkboxClass.value, "--").concat(placement), true), "".concat(checkboxClass.value, "--checked"), isChecked.value), "".concat(checkboxClass.value, "--block"), block),
        "onClick": handleChange
      }, [renderIconNode(), renderCheckBoxContent(), !borderless && vue.createVNode("div", {
        "class": "".concat(checkboxClass.value, "__border ").concat(checkboxClass.value, "__border--").concat(placement)
      }, null)]);
    };
  }
});

exports["default"] = _Checkbox;
//# sourceMappingURL=checkbox.js.map
