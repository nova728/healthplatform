/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var cell_index = require('../cell/index.js');
var collapse_collapsePanelProps = require('./collapse-panel-props.js');
var config = require('../config.js');
var collapse_util = require('./util.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useClass = require('../hooks/useClass.js');
require('../cell/cell.js');
require('../cell/props.js');
require('../form/hooks.js');
require('lodash/isBoolean');
require('../shared/hover.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('lodash/isString');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../cell/cell-group.js');
require('../cell/cell-group-props.js');
require('../shared/component.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

var prefix = config["default"].prefix;
var _CollapsePanel = vue.defineComponent({
  name: "".concat(prefix, "-collapse-panel"),
  components: {
    TCell: cell_index.Cell
  },
  props: collapse_collapsePanelProps["default"],
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var collapsePanelClass = hooks_useClass.usePrefixClass("collapse-panel");
    var parent = vue.inject("collapse");
    var renderParentTNode = vue.inject("renderParentTNode");
    var disabled = vue.computed(function () {
      return (parent === null || parent === void 0 ? void 0 : parent.disabled.value) || props2.disabled;
    });
    var rootClass = vue.computed(function () {
      return _defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(collapsePanelClass.value), true), "".concat(collapsePanelClass.value, "--").concat(props2.placement), true), "".concat(collapsePanelClass.value, "--active"), isActive.value), "".concat(collapsePanelClass.value, "--disabled"), disabled.value);
    });
    var isActive = vue.computed(function () {
      return collapse_util.findIndex(props2.value, parent === null || parent === void 0 ? void 0 : parent.activeValue.value) > -1;
    });
    var updatePanelValue = function updatePanelValue(args) {
      if (props2.value != null) {
        parent === null || parent === void 0 || parent.onPanelChange(props2.value, args);
      }
    };
    var handleClick = function handleClick(e) {
      e === null || e === void 0 || e.stopPropagation();
      if (disabled.value) {
        return;
      }
      updatePanelValue({
        e: e
      });
    };
    var bodyRef = vue.ref();
    var wrapRef = vue.ref();
    var headRef = vue.ref();
    var wrapperHeight = vue.ref("");
    var isToggle = true;
    var updatePanelState = function updatePanelState() {
      vue.nextTick(function () {
        if (!wrapRef.value) {
          return;
        }
        var _headRef$value$getBou = headRef.value.getBoundingClientRect(),
          headHeight = _headRef$value$getBou.height;
        if (!isActive.value) {
          isToggle = false;
          wrapperHeight.value = "".concat(headHeight, "px");
          return;
        }
        if (isToggle) {
          isToggle = false;
          wrapperHeight.value = "auto";
          return;
        }
        setContentWrapperHeight();
      });
    };
    vue.watch(isActive, function () {
      if (wrapperHeight.value === "auto") {
        setContentWrapperHeight();
      }
      vue.nextTick(function () {
        return updatePanelState();
      });
    }, {
      immediate: true
    });
    vue.onMounted(function () {
      if (parent !== null && parent !== void 0 && parent.defaultExpandAll) {
        updatePanelValue();
      }
    });
    var renderDefaultIcon = function renderDefaultIcon() {
      if (props2.placement === "bottom") {
        return isActive.value ? vue.createVNode(tdesignIconsVueNext.ChevronUpIcon, null, null) : vue.createVNode(tdesignIconsVueNext.ChevronDownIcon, null, null);
      }
      return isActive.value ? vue.createVNode(tdesignIconsVueNext.ChevronDownIcon, null, null) : vue.createVNode(tdesignIconsVueNext.ChevronUpIcon, null, null);
    };
    var panelExpandIcon = vue.computed(function () {
      return slots.expandIcon || props2.expandIcon;
    });
    var renderRightIcon = function renderRightIcon() {
      var tNodeRender = panelExpandIcon.value === void 0 ? renderParentTNode : renderTNodeJSX;
      return vue.createVNode("div", {
        "class": "".concat(collapsePanelClass.value, "__header-icon")
      }, [tNodeRender("expandIcon", renderDefaultIcon())]);
    };
    var renderPanelContent = function renderPanelContent() {
      var panelContent = renderContent("default", "content");
      if (props2.destroyOnCollapse && !isActive.value) {
        return null;
      }
      return vue.createVNode("div", {
        "ref": bodyRef,
        "class": "".concat(collapsePanelClass.value, "__content")
      }, [panelContent]);
    };
    var setContentWrapperHeight = function setContentWrapperHeight() {
      var _headRef$value$getBou2 = headRef.value.getBoundingClientRect(),
        headHeight = _headRef$value$getBou2.height;
      var _bodyRef$value$getBou = bodyRef.value.getBoundingClientRect(),
        bodyHeight = _bodyRef$value$getBou.height;
      var height = headHeight + bodyHeight;
      wrapperHeight.value = "".concat(height, "px");
    };
    var onTransitionEnd = function onTransitionEnd() {
      if (isActive.value) {
        wrapperHeight.value = "auto";
      }
    };
    return function () {
      var headerContent = renderTNodeJSX("header");
      var noteContent = renderTNodeJSX("headerRightContent");
      var _leftIcon = renderTNodeJSX("headerLeftIcon");
      return vue.createVNode("div", {
        "ref": wrapRef,
        "class": rootClass.value,
        "style": {
          height: wrapperHeight.value
        },
        "onTransitionend": onTransitionEnd
      }, [vue.createVNode("div", {
        "ref": headRef,
        "class": "".concat(collapsePanelClass.value, "__title"),
        "onClick": handleClick
      }, [vue.createVNode(cell_index.Cell, {
        "class": ["".concat(collapsePanelClass.value, "__header"), "".concat(collapsePanelClass.value, "__header--").concat(props2.placement), _defineProperty__default["default"]({}, "".concat(collapsePanelClass.value, "__header--expanded"), isActive.value)]
      }, {
        leftIcon: function leftIcon() {
          return _leftIcon;
        },
        title: function title() {
          return headerContent;
        },
        note: function note() {
          return noteContent;
        },
        rightIcon: function rightIcon() {
          return renderRightIcon();
        }
      })]), renderPanelContent()]);
    };
  }
});

exports["default"] = _CollapsePanel;
//# sourceMappingURL=collapse-panel.js.map
