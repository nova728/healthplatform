/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var get = require('lodash/get');
var isString = require('lodash/isString');
var button_index = require('../button/index.js');
var popup_index = require('../popup/index.js');
var config = require('../config.js');
var dialog_props = require('./props.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useClass = require('../hooks/useClass.js');
require('../button/button.js');
require('../loading/index.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../loading/icon/spinner.js');
require('../loading/props.js');
require('../shared/dom.js');
require('lodash/isFunction');
require('../loading/plugin.js');
require('lodash/merge');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('../shared/component.js');
require('../button/props.js');
require('../form/hooks.js');
require('lodash/isBoolean');
require('../shared/hover.js');
require('../popup/popup.js');
require('../popup/props.js');
require('../overlay/index.js');
require('../overlay/overlay.js');
require('../overlay/props.js');
require('../hooks/useLockScroll.js');
require('../_util/useTouch.js');
require('../_util/getScrollParent.js');
require('../_util/supportsPassive.js');
require('../shared/util.js');
require('../shared/render-tnode.js');
require('../shared/useDefault/index.js');
require('../shared/render.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var get__default = /*#__PURE__*/_interopDefaultLegacy(get);
var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config["default"].prefix;
var Dialog = vue.defineComponent({
  name: "".concat(prefix, "-dialog"),
  components: {
    TPopup: popup_index.Popup,
    TButton: button_index.Button,
    CloseIcon: tdesignIconsVueNext.CloseIcon
  },
  props: dialog_props["default"],
  emits: ["update:visible", "confirm", "overlay-click", "cancel", "close", "closed"],
  setup: function setup(props2, context) {
    var dialogClass = hooks_useClass.usePrefixClass("dialog");
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var renderContent = hooks_tnode.useContent();
    var isTextStyleBtn = vue.computed(function () {
      return [props2 === null || props2 === void 0 ? void 0 : props2.confirmBtn, props2 === null || props2 === void 0 ? void 0 : props2.cancelBtn].concat(_toConsumableArray__default["default"]((props2 === null || props2 === void 0 ? void 0 : props2.actions) || [])).some(function (item) {
        return get__default["default"](item, "variant") === "text";
      });
    });
    var footerClass = vue.computed(function () {
      return ["".concat(dialogClass.value, "__footer"), _defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(dialogClass.value, "__footer--column"), props2.buttonLayout === "vertical"), "".concat(dialogClass.value, "__footer--full"), isTextStyleBtn.value && get__default["default"](props2.actions, "length", 0) === 0)];
    });
    var buttonClass = vue.computed(function () {
      return ["".concat(dialogClass.value, "__button"), _defineProperty__default["default"](_defineProperty__default["default"]({}, "".concat(dialogClass.value, "__button--").concat(props2.buttonLayout), !isTextStyleBtn.value), "".concat(dialogClass.value, "__button--text"), isTextStyleBtn.value)];
    });
    var rootStyles = vue.computed(function () {
      return {
        width: isString__default["default"](props2.width) ? props2.width : "".concat(props2.width, "px")
      };
    });
    var handleClose = function handleClose(args) {
      var e = args.e;
      context.emit("update:visible", false);
      context.emit("close", {
        e: e,
        trigger: "close-btn"
      });
    };
    var handleClosed = function handleClosed() {
      context.emit("closed");
    };
    var handleConfirm = function handleConfirm(e) {
      var _context$emit;
      context.emit("update:visible", false);
      (_context$emit = context.emit) === null || _context$emit === void 0 || _context$emit.call(context, "confirm", {
        e: e
      });
    };
    var handleCancel = function handleCancel(e) {
      context.emit("update:visible", false);
      context.emit("close", {
        e: e,
        trigger: "cancel"
      });
      context.emit("cancel", {
        e: e
      });
    };
    var handleOverlayClick = function handleOverlayClick(args) {
      var e = args.e;
      if (!props2.closeOnOverlayClick) {
        return;
      }
      context.emit("update:visible", false);
      context.emit("close", {
        e: e,
        trigger: "overlay"
      });
      context.emit("overlay-click", {
        e: e
      });
    };
    var calcBtn = function calcBtn(btn) {
      return isString__default["default"](btn) ? {
        content: btn
      } : btn;
    };
    var confirmBtnProps = vue.computed(function () {
      return _objectSpread({
        theme: "primary"
      }, calcBtn(props2.confirmBtn));
    });
    var cancelBtnProps = vue.computed(function () {
      return _objectSpread({
        theme: isTextStyleBtn.value ? "default" : "light"
      }, calcBtn(props2.cancelBtn));
    });
    var actionsBtnProps = vue.computed(function () {
      var _props2$actions;
      return (_props2$actions = props2.actions) === null || _props2$actions === void 0 ? void 0 : _props2$actions.map(function (item) {
        return calcBtn(item);
      });
    });
    return function () {
      var visible = props2.visible,
        showOverlay = props2.showOverlay,
        overlayProps = props2.overlayProps,
        preventScrollThrough = props2.preventScrollThrough,
        destroyOnClose = props2.destroyOnClose,
        zIndex = props2.zIndex,
        closeBtn = props2.closeBtn,
        actions = props2.actions;
      var renderTitleNode = function renderTitleNode() {
        var titleNode = renderTNodeJSX("title");
        if (!titleNode) {
          return null;
        }
        return vue.createVNode("div", {
          "class": "".concat(dialogClass.value, "__header")
        }, [titleNode]);
      };
      var renderContentNode = function renderContentNode() {
        var contentNode = renderContent("default", "content");
        if (!contentNode) {
          return null;
        }
        return vue.createVNode("div", {
          "class": "".concat(dialogClass.value, "__body")
        }, [vue.createVNode("div", {
          "class": "".concat(dialogClass.value, "__body-text")
        }, [contentNode])]);
      };
      var renderActionsNode = function renderActionsNode() {
        var actionsNode = renderTNodeJSX("actions");
        if (actionsNode && actionsBtnProps.value) {
          return actionsBtnProps.value.map(function (item, index) {
            return vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps({
              "key": index
            }, item, {
              "class": buttonClass.value,
              "onClick": handleCancel
            }), null);
          });
        }
        return null;
      };
      var renderCancelBtnNode = function renderCancelBtnNode() {
        var cancelBtnNode = renderTNodeJSX("cancelBtn");
        if (!actions && cancelBtnNode) {
          return vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps(cancelBtnProps.value, {
            "class": buttonClass.value,
            "onClick": handleCancel
          }), null);
        }
        return null;
      };
      var renderConfirmBntNode = function renderConfirmBntNode() {
        var confirmBtnNode = renderTNodeJSX("confirmBtn");
        if (!actions && confirmBtnNode) {
          return vue.createVNode(vue.resolveComponent("t-button"), vue.mergeProps(confirmBtnProps.value, {
            "class": buttonClass.value,
            "onClick": handleConfirm
          }), null);
        }
        return null;
      };
      return vue.createVNode(vue.resolveComponent("t-popup"), {
        "visible": visible,
        "placement": "center",
        "show-overlay": showOverlay,
        "overlay-props": overlayProps,
        "prevent-scroll-through": preventScrollThrough,
        "destroy-on-close": destroyOnClose,
        "z-index": zIndex,
        "onClose": handleOverlayClick,
        "onClosed": handleClosed
      }, {
        default: function _default() {
          return [vue.createVNode("div", {
            "class": "".concat(dialogClass.value, " ").concat(context.attrs.class || ""),
            "style": rootStyles.value
          }, [renderTNodeJSX("top"), closeBtn && vue.createVNode("div", {
            "class": "".concat(dialogClass.value, "__close-btn")
          }, [vue.createVNode(vue.resolveComponent("close-icon"), {
            "onClick": handleClose
          }, null)]), vue.createVNode("div", {
            "class": "".concat(dialogClass.value, "__content")
          }, [renderTitleNode(), renderContentNode()]), renderTNodeJSX("middle"), vue.createVNode("div", {
            "class": footerClass.value
          }, [renderActionsNode(), renderCancelBtnNode(), renderConfirmBntNode()])])];
        }
      });
    };
  }
});

exports["default"] = Dialog;
//# sourceMappingURL=dialog.js.map
