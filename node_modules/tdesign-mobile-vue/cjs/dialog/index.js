/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var dialog_dialog = require('./dialog.js');
var shared_util = require('../shared/util.js');
require('@babel/runtime/helpers/toConsumableArray');
require('tdesign-icons-vue-next');
require('lodash/get');
require('lodash/isString');
require('../button/index.js');
require('../button/button.js');
require('../loading/index.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../config.js');
require('../hooks/useClass.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('../loading/icon/spinner.js');
require('../loading/props.js');
require('../hooks/tnode.js');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../shared/dom.js');
require('../loading/plugin.js');
require('../shared/component.js');
require('../button/props.js');
require('../form/hooks.js');
require('lodash/isBoolean');
require('../shared/hover.js');
require('../popup/index.js');
require('../popup/popup.js');
require('../popup/props.js');
require('../overlay/index.js');
require('../overlay/overlay.js');
require('../overlay/props.js');
require('../hooks/useLockScroll.js');
require('../_util/useTouch.js');
require('../_util/getScrollParent.js');
require('../_util/supportsPassive.js');
require('../shared/render-tnode.js');
require('../shared/useDefault/index.js');
require('../shared/render.js');
require('./props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var DialogPropsDefault = {
  title: "",
  content: "",
  confirmBtn: "",
  cancelBtn: "",
  visible: false,
  zIndex: 2500,
  showOverlay: true,
  width: "320px",
  closeOnOverlayClick: false
};
var propsFn = ["onConfirm", "onCancel", "onOverlayClick", "onClose", "onClosed"];
function create(options) {
  if (!shared_util.isBrowser) return;
  var root = document.createElement("div");
  document.body.appendChild(root);
  var props = vue.ref({});
  var propsObject = _objectSpread(_objectSpread({}, DialogPropsDefault), typeof options === "string" ? {
    content: options
  } : options);
  function callFn(fnType, context) {
    var fn = props.value[fnType] || propsObject[fnType];
    typeof fn === "function" && fn(context);
  }
  var params = vue.reactive(_objectSpread(_objectSpread({}, propsObject), {}, {
    onConfirm: function onConfirm(context) {
      callFn("onConfirm", context);
      params.visible = false;
    },
    onCancel: function onCancel(context) {
      callFn("onCancel", context);
      params.visible = false;
    },
    onOverlayClick: function onOverlayClick(context) {
      callFn("onOverlayClick", context);
      params.visible = false;
    },
    onClose: function onClose(context) {
      callFn("onClose", context);
      params.visible = false;
    },
    onClosed: function onClosed() {
      callFn("onClosed");
      params.destroyOnClose && app.unmount();
    }
  }));
  var app = vue.createApp(function () {
    return vue.h(dialog_dialog["default"], params);
  });
  app.mount(root);
  var handler = {
    destroy: function destroy() {
      params.destroyOnClose = true;
      vue.nextTick(function () {
        params.visible = false;
        root.remove();
      });
    },
    hide: function hide() {
      params.visible = false;
    },
    show: function show() {
      params.visible = true;
    },
    update: function update(options2) {
      if (typeof options2 === "string") {
        params.content = options2;
      } else {
        for (var key in options2) {
          if (propsFn.includes(key)) {
            props.value[key] = options2[key];
          } else {
            params[key] = options2[key];
          }
        }
      }
    }
  };
  vue.nextTick(function () {
    return params.visible = true;
  });
  return handler;
}
["show", "alert", "confirm"].forEach(function (type) {
  dialog_dialog["default"][type] = function (options) {
    var props = {
      content: ""
    };
    if (typeof options === "string") {
      props.content = options;
    } else {
      props = _objectSpread(_objectSpread({}, props), options);
    }
    if (type === "alert") {
      props.cancelBtn = null;
    }
    return create(props);
  };
});
dialog_dialog["default"].install = function (app) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  app.component(name || dialog_dialog["default"].name, dialog_dialog["default"]);
  app.config.globalProperties.$dialog = dialog_dialog["default"];
  app.provide("$dialog", dialog_dialog["default"]);
};
var DialogPlugin = dialog_dialog["default"];

exports.DialogPlugin = DialogPlugin;
exports["default"] = DialogPlugin;
//# sourceMappingURL=index.js.map
