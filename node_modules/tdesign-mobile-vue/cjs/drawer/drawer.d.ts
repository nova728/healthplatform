import { h } from 'vue';
import { DrawerItem } from './type';
declare const _default: import("vue").DefineComponent<{
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    destroyOnClose: BooleanConstructor;
    footer: {
        type: import("vue").PropType<(h: typeof h) => import("..").SlotReturnValue>;
    };
    items: {
        type: import("vue").PropType<DrawerItem[]>;
    };
    placement: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
    };
    visible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onClose: import("vue").PropType<(trigger: "overlay") => void>;
    onItemClick: import("vue").PropType<(index: number, item: DrawerItem, context: {
        e: MouseEvent;
    }) => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "itemClick" | "overlayClick")[], "update:visible" | "itemClick" | "overlayClick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    attach: {
        type: import("vue").PropType<import("..").AttachNode>;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    destroyOnClose: BooleanConstructor;
    footer: {
        type: import("vue").PropType<(h: typeof h) => import("..").SlotReturnValue>;
    };
    items: {
        type: import("vue").PropType<DrawerItem[]>;
    };
    placement: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
    };
    visible: BooleanConstructor;
    zIndex: {
        type: NumberConstructor;
    };
    onClose: import("vue").PropType<(trigger: "overlay") => void>;
    onItemClick: import("vue").PropType<(index: number, item: DrawerItem, context: {
        e: MouseEvent;
    }) => void>;
    onOverlayClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
}>> & {
    "onUpdate:visible"?: (...args: any[]) => any;
    onItemClick?: (...args: any[]) => any;
    onOverlayClick?: (...args: any[]) => any;
}, {
    visible: boolean;
    placement: "left" | "right";
    closeOnOverlayClick: boolean;
    destroyOnClose: boolean;
    showOverlay: boolean;
}, {}>;
export default _default;
