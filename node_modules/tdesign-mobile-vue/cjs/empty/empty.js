/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var image_index = require('../image/index.js');
var empty_props = require('./props.js');
var config = require('../config.js');
var hooks_useClass = require('../hooks/useClass.js');
var hooks_tnode = require('../hooks/tnode.js');
require('../image/image.js');
require('@babel/runtime/helpers/slicedToArray');
require('@babel/runtime/helpers/defineProperty');
require('@vueuse/core');
require('tdesign-icons-vue-next');
require('../loading/index.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/toConsumableArray');
require('@babel/runtime/helpers/objectWithoutProperties');
require('lodash/isString');
require('lodash/isNull');
require('lodash/isUndefined');
require('lodash/isNumber');
require('lodash/isArray');
require('../loading/icon/spinner.js');
require('../loading/props.js');
require('../shared/dom.js');
require('lodash/isFunction');
require('../loading/plugin.js');
require('lodash/merge');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('../shared/component.js');
require('../image/props.js');

var prefix = config["default"].prefix;
var _Empty = vue.defineComponent({
  name: "".concat(prefix, "-empty"),
  props: empty_props["default"],
  setup: function setup(props) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var emptyClass = hooks_useClass.usePrefixClass("empty");
    return function () {
      var action = renderTNodeJSX("action");
      var description = renderTNodeJSX("description");
      var readerThumb = function readerThumb() {
        var image = renderTNodeJSX("image");
        if (image) {
          if (typeof props.image === "string") {
            return vue.withDirectives(vue.createVNode(image_index.Image, {
              "src": props.image
            }, null), [[vue.resolveDirective("if"), "typeof image === 'string'"]]);
          }
          return image;
        }
        var icon = renderTNodeJSX("icon");
        if (icon) {
          return vue.createVNode("div", {
            "class": "".concat(emptyClass.value, "__icon")
          }, [icon]);
        }
        return null;
      };
      return vue.createVNode("div", {
        "class": emptyClass.value
      }, [vue.createVNode("div", {
        "class": "".concat(emptyClass.value, "__thumb")
      }, [readerThumb()]), description && vue.createVNode("div", {
        "class": "".concat(emptyClass.value, "__description")
      }, [description]), action && vue.createVNode("div", {
        "class": "".concat(emptyClass.value, "__actions")
      }, [action])]);
    };
  }
});

exports["default"] = _Empty;
//# sourceMappingURL=empty.js.map
