import { h } from 'vue';
declare const _default: import("vue").DefineComponent<{
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    deleteBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    images: {
        type: import("vue").PropType<(string | {
            url: string;
            align: "center" | "end" | "start";
        })[]>;
        default: () => (string | {
            url: string;
            align: "center" | "end" | "start";
        })[];
    };
    index: {
        type: NumberConstructor;
        default: any;
    };
    defaultIndex: {
        type: NumberConstructor;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    showIndex: BooleanConstructor;
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onClose: import("vue").PropType<(context: {
        trigger: "overlay" | "close-btn";
        visible: Boolean;
        index: Number;
    }) => void>;
    onDelete: import("vue").PropType<(index: Number) => void>;
    onIndexChange: import("vue").PropType<(index: number, context: {
        trigger: "next" | "prev";
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "close" | "update:visible" | "index-change" | "update:index" | "delete")[], "update:modelValue" | "close" | "update:visible" | "delete" | "index-change" | "update:index", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    deleteBtn: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    images: {
        type: import("vue").PropType<(string | {
            url: string;
            align: "center" | "end" | "start";
        })[]>;
        default: () => (string | {
            url: string;
            align: "center" | "end" | "start";
        })[];
    };
    index: {
        type: NumberConstructor;
        default: any;
    };
    defaultIndex: {
        type: NumberConstructor;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    showIndex: BooleanConstructor;
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onClose: import("vue").PropType<(context: {
        trigger: "overlay" | "close-btn";
        visible: Boolean;
        index: Number;
    }) => void>;
    onDelete: import("vue").PropType<(index: Number) => void>;
    onIndexChange: import("vue").PropType<(index: number, context: {
        trigger: "next" | "prev";
    }) => void>;
}>> & {
    "onUpdate:modelValue"?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    "onUpdate:visible"?: (...args: any[]) => any;
    onDelete?: (...args: any[]) => any;
    "onIndex-change"?: (...args: any[]) => any;
    "onUpdate:index"?: (...args: any[]) => any;
}, {
    modelValue: boolean;
    visible: boolean;
    index: number;
    closeBtn: boolean | ((h: typeof h) => import("..").SlotReturnValue);
    defaultVisible: boolean;
    deleteBtn: boolean | ((h: typeof h) => import("..").SlotReturnValue);
    images: (string | {
        url: string;
        align: "center" | "end" | "start";
    })[];
    maxZoom: number;
    showIndex: boolean;
}, {}>;
export default _default;
