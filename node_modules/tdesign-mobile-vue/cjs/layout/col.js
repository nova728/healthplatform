/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');
var layout_colProps = require('./col-props.js');
var config = require('../config.js');
var layout_constants = require('./constants.js');
var hooks_tnode = require('../hooks/tnode.js');
var hooks_useClass = require('../hooks/useClass.js');
var shared_util = require('../shared/util.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isNumber');

var prefix = config["default"].prefix;
var _Col = vue.defineComponent({
  name: "".concat(prefix, "-col"),
  props: layout_colProps["default"],
  setup: function setup(props2) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var colClass = hooks_useClass.usePrefixClass("col");
    var _inject = vue.inject(layout_constants.rowInjectionKey),
      gutter = _inject.gutter;
    var style = vue.computed(function () {
      var styles = {};
      if (!gutter) {
        return styles;
      }
      var gutterVal = shared_util.convertUnit(Number(gutter) / 2);
      styles.paddingRight = gutterVal;
      styles.paddingLeft = gutterVal;
      return styles;
    });
    var rootClass = vue.computed(function () {
      var rootClass2 = colClass.value;
      if (props2.offset) {
        rootClass2 += " ".concat(colClass.value, "--offset-").concat(props2.offset);
      }
      if (props2.span) {
        rootClass2 += " ".concat(colClass.value, "--").concat(props2.span);
      }
      return rootClass2;
    });
    return function () {
      return vue.createVNode("div", {
        "class": rootClass.value,
        "style": style.value
      }, [renderTNodeJSX("default")]);
    };
  }
});

exports["default"] = _Col;
//# sourceMappingURL=col.js.map
