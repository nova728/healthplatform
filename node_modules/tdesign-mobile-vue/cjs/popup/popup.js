/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var popup_props = require('./props.js');
var overlay_index = require('../overlay/index.js');
var config = require('../config.js');
var shared_dom = require('../shared/dom.js');
var hooks_useClass = require('../hooks/useClass.js');
var hooks_useLockScroll = require('../hooks/useLockScroll.js');
var shared_renderTnode = require('../shared/render-tnode.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var shared_render = require('../shared/render.js');
var shared_util = require('../shared/util.js');
require('../overlay/overlay.js');
require('../overlay/props.js');
require('../hooks/tnode.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('lodash/isObject');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('../shared/component.js');
require('../_util/useTouch.js');
require('../_util/getScrollParent.js');
require('../_util/supportsPassive.js');
require('lodash/isNumber');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config["default"].prefix;
var script = vue.defineComponent({
  name: "".concat(prefix, "-popup"),
  components: {
    TNode: shared_renderTnode["default"],
    TOverlay: overlay_index.Overlay
  },
  inheritAttrs: false,
  props: popup_props["default"],
  emits: ["open", "close", "opened", "closed", "visible-change", "update:visible", "update:modelValue"],
  setup: function setup(props, context) {
    var popupClass = hooks_useClass.usePrefixClass("popup");
    var popupRef = vue.ref();
    var currentInstance = vue.getCurrentInstance();
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "visible", "visible-change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 2),
      currentVisible = _useDefault2[0],
      setVisible = _useDefault2[1];
    var wrapperVisible = vue.ref(currentVisible.value);
    var innerVisible = vue.ref(currentVisible.value);
    vue.watch(currentVisible, function (v) {
      if (v) {
        wrapperVisible.value = v;
        if (props.destroyOnClose) {
          vue.nextTick(function () {
            innerVisible.value = v;
          });
        } else {
          innerVisible.value = v;
        }
      } else {
        innerVisible.value = v;
      }
    });
    var rootStyles = vue.computed(function () {
      var styles = {};
      if (props.zIndex) {
        styles.zIndex = "".concat(props.zIndex);
      }
      return _objectSpread(_objectSpread({}, context.attrs.style), styles);
    });
    var contentClasses = vue.computed(function () {
      return _defineProperty__default["default"]({}, "".concat(popupClass.value, "--").concat(props.placement), true);
    });
    var contentTransitionName = vue.computed(function () {
      var transitionName = props.transitionName,
        placement = props.placement;
      if (transitionName) return transitionName;
      if (placement === "center") return "fade-zoom";
      return "slide-".concat(placement);
    });
    var closeBtnNode = vue.computed(function () {
      return shared_render.renderTNode(currentInstance, "closeBtn", {
        defaultNode: vue.h(tdesignIconsVueNext.CloseIcon, {
          size: "24px"
        })
      });
    });
    var handleCloseClick = function handleCloseClick(e) {
      var _props$onClose;
      (_props$onClose = props.onClose) === null || _props$onClose === void 0 || _props$onClose.call(props, {
        e: e
      });
      setVisible(false, {
        trigger: "close-btn"
      });
    };
    var handleOverlayClick = function handleOverlayClick(args) {
      var _props$onClose2;
      var e = args.e;
      if (!props.closeOnOverlayClick) {
        return;
      }
      (_props$onClose2 = props.onClose) === null || _props$onClose2 === void 0 || _props$onClose2.call(props, {
        e: e
      });
      setVisible(false, {
        trigger: "overlay"
      });
    };
    var afterLeave = function afterLeave() {
      var _props$onClosed;
      wrapperVisible.value = false;
      (_props$onClosed = props.onClosed) === null || _props$onClosed === void 0 || _props$onClosed.call(props);
    };
    var afterEnter = function afterEnter() {
      var _props$onOpened;
      return (_props$onOpened = props.onOpened) === null || _props$onOpened === void 0 ? void 0 : _props$onOpened.call(props);
    };
    var to = vue.computed(function () {
      var _props$attach;
      if (!shared_util.isBrowser || !props.attach) return void 0;
      return shared_dom.getAttach((_props$attach = props.attach) !== null && _props$attach !== void 0 ? _props$attach : "body");
    });
    vue.watch(function () {
      return currentVisible.value;
    }, function (val) {
      if (val) {
        var _props$onOpen;
        (_props$onOpen = props.onOpen) === null || _props$onOpen === void 0 || _props$onOpen.call(props);
        setVisible(true);
      }
    });
    hooks_useLockScroll.useLockScroll(popupRef, function () {
      return wrapperVisible.value && props.preventScrollThrough;
    }, popupClass.value);
    return {
      to: to,
      popupClass: popupClass,
      wrapperVisible: wrapperVisible,
      innerVisible: innerVisible,
      currentVisible: currentVisible,
      rootStyles: rootStyles,
      contentClasses: contentClasses,
      contentTransitionName: contentTransitionName,
      closeBtnNode: closeBtnNode,
      afterEnter: afterEnter,
      afterLeave: afterLeave,
      handleOverlayClick: handleOverlayClick,
      handleCloseClick: handleCloseClick
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_overlay = vue.resolveComponent("t-overlay");
  var _component_t_node = vue.resolveComponent("t-node");
  return !_ctx.destroyOnClose || _ctx.wrapperVisible ? (vue.openBlock(), vue.createBlock(vue.Teleport, {
    key: 0,
    to: _ctx.to,
    disabled: !_ctx.to
  }, [vue.createVNode(_component_t_overlay, vue.mergeProps(_ctx.overlayProps, {
    visible: _ctx.innerVisible && _ctx.showOverlay,
    onClick: _ctx.handleOverlayClick
  }), null, 16, ["visible", "onClick"]), vue.createVNode(vue.Transition, {
    name: _ctx.contentTransitionName,
    onAfterEnter: _ctx.afterEnter,
    onAfterLeave: _ctx.afterLeave
  }, {
    default: vue.withCtx(function () {
      return [vue.withDirectives(vue.createElementVNode("div", vue.mergeProps({
        ref: "popupRef",
        class: [_ctx.popupClass, _ctx.$attrs.class, _ctx.contentClasses],
        style: _ctx.rootStyles
      }, _ctx.$attrs), [_ctx.closeBtnNode ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass("".concat(_ctx.popupClass, "__close")),
        onClick: _cache[0] || (_cache[0] = function () {
          return _ctx.handleCloseClick && _ctx.handleCloseClick.apply(_ctx, arguments);
        })
      }, [vue.createVNode(_component_t_node, {
        content: _ctx.closeBtnNode
      }, null, 8, ["content"])], 2)) : vue.createCommentVNode("", true), vue.renderSlot(_ctx.$slots, "default")], 16), [[vue.vShow, _ctx.innerVisible]])];
    }),
    _: 3
  }, 8, ["name", "onAfterEnter", "onAfterLeave"])], 8, ["to", "disabled"])) : vue.createCommentVNode("", true);
}

script.render = render;

exports["default"] = script;
//# sourceMappingURL=popup.js.map
