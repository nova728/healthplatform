/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var isObject = require('lodash/isObject');
var isString = require('lodash/isString');
var hooks_useClass = require('../hooks/useClass.js');
var hooks_tnode = require('../hooks/tnode.js');
var progress_utils = require('./utils.js');
var progress_props = require('./props.js');
var progress_constants = require('./constants.js');
var config = require('../config.js');
require('../config-provider/useConfig.js');
require('lodash/isFunction');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('@babel/runtime/helpers/objectWithoutProperties');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var isObject__default = /*#__PURE__*/_interopDefaultLegacy(isObject);
var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);

var prefix = config["default"].prefix;
var _Progress = vue.defineComponent({
  name: "".concat(prefix, "-progress"),
  props: progress_props["default"],
  setup: function setup(props2) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var progressClass = hooks_useClass.usePrefixClass("progress");
    var computedStatus = vue.computed(function () {
      if (props2.percentage >= 100) {
        return "success";
      }
      return props2.status || "default";
    });
    var trackBgStyle = vue.computed(function () {
      var style = {};
      if (props2.strokeWidth) {
        var height = isString__default["default"](props2.strokeWidth) ? props2.strokeWidth : "".concat(props2.strokeWidth, "px");
        style.height = height;
        style.borderRadius = height;
      }
      if (props2.trackColor) {
        style.backgroundColor = props2.trackColor;
      }
      return style;
    });
    var barStyle = vue.computed(function () {
      return {
        width: "".concat(props2.percentage, "%"),
        background: props2.color && progress_utils.getBackgroundColor(props2.color)
      };
    });
    var getIconMap = function getIconMap() {
      var CIRCLE_ICONS = {
        success: tdesignIconsVueNext.CheckIcon,
        warning: tdesignIconsVueNext.ErrorIcon,
        error: tdesignIconsVueNext.CloseIcon
      };
      var NORMAL_ICONS = {
        success: tdesignIconsVueNext.CheckCircleFilledIcon,
        warning: tdesignIconsVueNext.ErrorCircleFilledIcon,
        error: tdesignIconsVueNext.ErrorCircleFilledIcon
      };
      return props2.theme === progress_constants.PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;
    };
    var diameter = vue.computed(function () {
      return progress_constants.CIRCLE_SIZE_PX;
    });
    var rPoints = vue.computed(function () {
      return diameter.value / 2;
    });
    var circleStrokeWidth = vue.computed(function () {
      return props2.strokeWidth ? Number(props2.strokeWidth) : 6;
    });
    var radius = vue.computed(function () {
      return rPoints.value - circleStrokeWidth.value / 2;
    });
    var circleStyle = vue.computed(function () {
      if (props2.theme !== progress_constants.PRO_THEME.CIRCLE) {
        return {};
      }
      return {
        width: "".concat(diameter.value, "px"),
        height: "".concat(diameter.value, "px")
      };
    });
    var strokeDashArr = vue.computed(function () {
      var radius2 = (diameter.value - circleStrokeWidth.value) / 2;
      var perimeter = Math.PI * 2 * radius2;
      var percent = props2.percentage / 100;
      return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
    });
    var circlePathStyle = vue.computed(function () {
      var strokeColor = isObject__default["default"](props2.color) ? "" : props2.color;
      return {
        stroke: strokeColor
      };
    });
    var circleOuterStyle = vue.computed(function () {
      var strokeColor = isObject__default["default"](props2.trackColor) ? "" : props2.trackColor;
      return {
        stroke: strokeColor
      };
    });
    var getLabelContent = function getLabelContent() {
      var labelContent = "".concat(props2.percentage, "%");
      var status = props2.status || "";
      if (progress_constants.STATUS_ICON.includes(status) && props2.theme !== progress_constants.PRO_THEME.PLUMP) {
        var components = getIconMap();
        var component = components[status];
        if (component) {
          labelContent = vue.createVNode(component, {
            "class": ["".concat(progressClass.value, "__icon")]
          }, null);
        }
      }
      return labelContent;
    };
    return function () {
      var labelContent = props2.label && vue.createVNode("div", {
        "class": "".concat(progressClass.value, "__info")
      }, [renderTNodeJSX("label", getLabelContent())]);
      var separateClasses = props2.percentage > progress_constants.PLUMP_SEPARATE ? "".concat(progressClass.value, "--over-ten") : "".concat(progressClass.value, "--under-ten");
      return vue.createVNode("div", {
        "class": progressClass.value
      }, [props2.theme === progress_constants.PRO_THEME.LINE && vue.createVNode("div", {
        "class": "".concat(progressClass.value, "--thin ").concat(progressClass.value, "--status-").concat(computedStatus.value)
      }, [vue.createVNode("div", {
        "class": "".concat(progressClass.value, "__bar"),
        "style": trackBgStyle.value
      }, [vue.createVNode("div", {
        "class": "".concat(progressClass.value, "__inner"),
        "style": barStyle.value
      }, null)]), labelContent]), props2.theme === progress_constants.PRO_THEME.PLUMP && vue.createVNode("div", {
        "class": ["".concat(progressClass.value, "__bar ").concat(progressClass.value, "--plump ").concat(separateClasses), _defineProperty__default["default"]({}, "".concat(progressClass.value, "--status-").concat(computedStatus.value), computedStatus.value)],
        "style": trackBgStyle.value
      }, [vue.createVNode("div", {
        "class": "".concat(progressClass.value, "__inner"),
        "style": barStyle.value
      }, [props2.percentage > progress_constants.PLUMP_SEPARATE && labelContent]), props2.percentage <= progress_constants.PLUMP_SEPARATE && labelContent]), props2.theme === progress_constants.PRO_THEME.CIRCLE && vue.createVNode("div", {
        "class": "".concat(progressClass.value, "--circle ").concat(progressClass.value, "--status-").concat(computedStatus.value),
        "style": circleStyle.value
      }, [labelContent, vue.createVNode("svg", {
        "width": diameter.value,
        "height": diameter.value,
        "viewBox": "0 0 ".concat(diameter.value, " ").concat(diameter.value)
      }, [vue.createVNode("circle", {
        "cx": rPoints.value,
        "cy": rPoints.value,
        "r": radius.value,
        "stroke-width": circleStrokeWidth.value,
        "fill": "none",
        "class": ["".concat(progressClass.value, "__circle-outer")],
        "style": circleOuterStyle.value
      }, null), props2.percentage > 0 && vue.createVNode("circle", {
        "cx": rPoints.value,
        "cy": rPoints.value,
        "r": radius.value,
        "stroke-width": circleStrokeWidth.value,
        "fill": "none",
        "stroke-linecap": "round",
        "class": ["".concat(progressClass.value, "__circle-inner")],
        "transform": "matrix(0,-1,1,0,0,".concat(diameter.value, ")"),
        "stroke-dasharray": strokeDashArr.value,
        "style": circlePathStyle.value
      }, null)])])]);
    };
  }
});

exports["default"] = _Progress;
//# sourceMappingURL=progress.js.map
