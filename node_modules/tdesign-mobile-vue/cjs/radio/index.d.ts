import _Radio from './radio';
import { WithInstallType } from '../shared';
import './style';
import { TdRadioProps, TdRadioGroupProps } from './type';
export * from './type';
export declare type RadioProps = TdRadioProps;
export declare type RadioGroupProps = TdRadioGroupProps;
export declare const RadioGroup: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            value: import("./type").RadioValue;
            modelValue: import("./type").RadioValue;
            name: string;
            disabled: boolean;
            icon: "circle" | "line" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[];
            placement: "left" | "right";
            allowUncheck: boolean;
            borderless: boolean;
        }> & Omit<{
            readonly name: string;
            readonly icon: "circle" | "line" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[];
            readonly placement: "left" | "right";
            readonly allowUncheck: boolean;
            readonly borderless: boolean;
            readonly value?: import("./type").RadioValue;
            readonly defaultValue?: import("./type").RadioValue;
            readonly onChange?: (value: import("./type").RadioValue, context: {
                e: Event;
                name?: string;
            }) => void;
            readonly keys?: unknown;
            readonly modelValue?: import("./type").RadioValue;
            readonly disabled?: boolean;
            readonly options?: import("./type").RadioOption[];
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            allowUncheck: BooleanConstructor;
            borderless: BooleanConstructor;
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            icon: {
                type: import("vue").PropType<"circle" | "line" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
                default: string;
            };
            keys: {
                type: import("vue").PropType<import("..").KeysType>;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            options: {
                type: import("vue").PropType<import("./type").RadioOption[]>;
            };
            placement: {
                type: import("vue").PropType<"left" | "right">;
                default: "left" | "right";
                validator(val: "left" | "right"): boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").RadioValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").RadioValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").RadioValue>;
            };
            onChange: import("vue").PropType<(value: import("./type").RadioValue, context: {
                e: Event;
                name?: string;
            }) => void>;
        }>>, "value" | "modelValue" | "name" | "disabled" | "icon" | "placement" | "allowUncheck" | "borderless">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any>;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            allowUncheck: BooleanConstructor;
            borderless: BooleanConstructor;
            disabled: {
                type: BooleanConstructor;
                default: any;
            };
            icon: {
                type: import("vue").PropType<"circle" | "line" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
                default: string;
            };
            keys: {
                type: import("vue").PropType<import("..").KeysType>;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            options: {
                type: import("vue").PropType<import("./type").RadioOption[]>;
            };
            placement: {
                type: import("vue").PropType<"left" | "right">;
                default: "left" | "right";
                validator(val: "left" | "right"): boolean;
            };
            value: {
                type: import("vue").PropType<import("./type").RadioValue>;
                default: any;
            };
            modelValue: {
                type: import("vue").PropType<import("./type").RadioValue>;
                default: any;
            };
            defaultValue: {
                type: import("vue").PropType<import("./type").RadioValue>;
            };
            onChange: import("vue").PropType<(value: import("./type").RadioValue, context: {
                e: Event;
                name?: string;
            }) => void>;
        }>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            value: import("./type").RadioValue;
            modelValue: import("./type").RadioValue;
            name: string;
            disabled: boolean;
            icon: "circle" | "line" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[];
            placement: "left" | "right";
            allowUncheck: boolean;
            borderless: boolean;
        }, {}, string, {}> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}>, info: string) => boolean | void)[];
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean>): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        allowUncheck: BooleanConstructor;
        borderless: BooleanConstructor;
        disabled: {
            type: BooleanConstructor;
            default: any;
        };
        icon: {
            type: import("vue").PropType<"circle" | "line" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
            default: string;
        };
        keys: {
            type: import("vue").PropType<import("..").KeysType>;
        };
        name: {
            type: StringConstructor;
            default: string;
        };
        options: {
            type: import("vue").PropType<import("./type").RadioOption[]>;
        };
        placement: {
            type: import("vue").PropType<"left" | "right">;
            default: "left" | "right";
            validator(val: "left" | "right"): boolean;
        };
        value: {
            type: import("vue").PropType<import("./type").RadioValue>;
            default: any;
        };
        modelValue: {
            type: import("vue").PropType<import("./type").RadioValue>;
            default: any;
        };
        defaultValue: {
            type: import("vue").PropType<import("./type").RadioValue>;
        };
        onChange: import("vue").PropType<(value: import("./type").RadioValue, context: {
            e: Event;
            name?: string;
        }) => void>;
    }>> & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    allowUncheck: BooleanConstructor;
    borderless: BooleanConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    icon: {
        type: import("vue").PropType<"circle" | "line" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        default: string;
    };
    keys: {
        type: import("vue").PropType<import("..").KeysType>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    options: {
        type: import("vue").PropType<import("./type").RadioOption[]>;
    };
    placement: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    value: {
        type: import("vue").PropType<import("./type").RadioValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").RadioValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").RadioValue>;
    };
    onChange: import("vue").PropType<(value: import("./type").RadioValue, context: {
        e: Event;
        name?: string;
    }) => void>;
}>>, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    value: import("./type").RadioValue;
    modelValue: import("./type").RadioValue;
    name: string;
    disabled: boolean;
    icon: "circle" | "line" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[];
    placement: "left" | "right";
    allowUncheck: boolean;
    borderless: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & import("vue").Plugin<any[]>;
export declare const Radio: WithInstallType<typeof _Radio>;
export default Radio;
