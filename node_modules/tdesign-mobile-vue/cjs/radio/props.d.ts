import { TdRadioProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    allowUncheck: BooleanConstructor;
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderless: {
        type: BooleanConstructor;
        default: any;
    };
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    content: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    contentDisabled: BooleanConstructor;
    default: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    icon: {
        type: PropType<"circle" | "line" | "none" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        default: string;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    maxContentRow: {
        type: NumberConstructor;
        default: number;
    };
    maxLabelRow: {
        type: NumberConstructor;
        default: number;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placement: {
        type: PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: TdRadioProps['placement']): boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    value: {
        type: PropType<import("./type").RadioValue>;
        default: any;
    };
    onChange: PropType<(checked: boolean, context: {
        e: Event;
    }) => void>;
};
export default _default;
