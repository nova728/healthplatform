import { TdSearchProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    action: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    autocompleteOptions: {
        type: PropType<import("./type").AutocompleteOption[]>;
    };
    center: BooleanConstructor;
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    focus: BooleanConstructor;
    leftIcon: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    readonly: BooleanConstructor;
    shape: {
        type: PropType<"round" | "square">;
        default: "round" | "square";
        validator(val: TdSearchProps['shape']): boolean;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onActionClick: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onBlur: PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: string, context: {
        e?: MouseEvent | InputEvent;
    }) => void>;
    onClear: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onSearch: PropType<(context?: {
        value: string;
        trigger: "submit" | "clear" | "option-click";
        e?: MouseEvent | InputEvent;
    }) => void>;
    onSubmit: PropType<(context: {
        value: string;
        e: KeyboardEvent;
    }) => void>;
};
export default _default;
