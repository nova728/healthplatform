/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
var vue = require('vue');
var tdesignIconsVueNext = require('tdesign-icons-vue-next');
var core = require('@vueuse/core');
var config = require('../config.js');
var shared_dom = require('../shared/dom.js');
var search_props = require('./props.js');
var shared_useDefault_index = require('../shared/useDefault/index.js');
var hooks_useClass = require('../hooks/useClass.js');
var hooks_tnode = require('../hooks/tnode.js');
var _common_js_common = require('../_common/js/common.js');
require('lodash/isFunction');
require('lodash/isString');
require('lodash/camelCase');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

var prefix = config["default"].prefix;
var _Search = vue.defineComponent({
  name: "".concat(prefix, "-search"),
  props: search_props["default"],
  setup: function setup(props, context) {
    var renderTNodeJSX = hooks_tnode.useTNodeJSX();
    var searchClass = hooks_useClass.usePrefixClass("search");
    var inputRef = vue.ref();
    var _useFocus = core.useFocus(inputRef, {
        initialValue: props.focus
      }),
      focused = _useFocus.focused;
    var _useDefault = shared_useDefault_index.useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray__default["default"](_useDefault, 1),
      searchValue = _useDefault2[0];
    var boxClasses = vue.computed(function () {
      return ["".concat(searchClass.value, "__input-box"), "".concat(searchClass.value, "__input-box--").concat(props.shape), _defineProperty__default["default"]({}, "".concat(prefix, "-is-focused"), focused.value)];
    });
    var inputClasses = vue.computed(function () {
      return ["".concat(prefix, "-input__keyword"), _defineProperty__default["default"]({}, "".concat(searchClass.value, "--center"), props.center)];
    });
    var setInputValue = function setInputValue(v) {
      var input = inputRef.value;
      var sV = String(v);
      if (!input) {
        return;
      }
      if (input.value !== sV) {
        input.value = sV;
      }
    };
    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var value = e.target.value;
      searchValue.value = value;
      vue.nextTick(function () {
        return setInputValue(searchValue.value);
      });
    };
    var handleInput = function handleInput(e) {
      if (e instanceof InputEvent) {
        var checkInputType = e.inputType && e.inputType === "insertCompositionText";
        if (e.isComposing || checkInputType) return;
      }
      inputValueChangeHandle(e);
    };
    var handleClear = function handleClear(e) {
      var _props$onClear;
      searchValue.value = "";
      focused.value = true;
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, {
        e: e
      });
    };
    var handleFocus = function handleFocus(e) {
      var _props$onFocus;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
        value: searchValue.value,
        e: e
      });
    };
    var handleBlur = function handleBlur(e) {
      var _props$onBlur;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
        value: searchValue.value,
        e: e
      });
    };
    var handleCompositionend = function handleCompositionend(e) {
      inputValueChangeHandle(e);
    };
    var handleAction = function handleAction(e) {
      var _props$onActionClick;
      (_props$onActionClick = props.onActionClick) === null || _props$onActionClick === void 0 || _props$onActionClick.call(props, {
        e: e
      });
    };
    var handleSearch = function handleSearch(e) {
      if (_common_js_common.ENTER_REG.test(e.code) || _common_js_common.ENTER_REG.test(e.key)) {
        var _props$onSubmit;
        shared_dom.preventDefault(e, false);
        (_props$onSubmit = props.onSubmit) === null || _props$onSubmit === void 0 || _props$onSubmit.call(props, {
          value: searchValue.value,
          e: e
        });
      }
    };
    return function () {
      var readerLeftIcon = function readerLeftIcon() {
        var leftIcon = renderTNodeJSX("leftIcon");
        if (leftIcon === "search") {
          return vue.createVNode(tdesignIconsVueNext.SearchIcon, {
            "size": "24px"
          }, null);
        }
        return renderTNodeJSX("leftIcon");
      };
      var readerClear = function readerClear() {
        if (props.clearable && searchValue.value) {
          return vue.createVNode("div", {
            "class": "".concat(searchClass.value, "__clear"),
            "onClick": handleClear
          }, [vue.createVNode(tdesignIconsVueNext.CloseCircleFilledIcon, {
            "size": "24"
          }, null)]);
        }
        return null;
      };
      var readerAction = function readerAction() {
        var action = renderTNodeJSX("action");
        if (action && searchValue.value) {
          return vue.createVNode("div", {
            "class": "".concat(searchClass.value, "__search-action"),
            "onClick": handleAction
          }, [action]);
        }
        return null;
      };
      return vue.createVNode("div", {
        "class": "".concat(searchClass.value)
      }, [vue.createVNode("div", {
        "class": boxClasses.value
      }, [readerLeftIcon(), vue.createVNode("input", {
        "ref": inputRef,
        "value": searchValue.value,
        "type": "search",
        "class": inputClasses.value,
        "autofocus": props.focus,
        "placeholder": props.placeholder,
        "readonly": props.readonly,
        "disabled": props.disabled,
        "onKeypress": handleSearch,
        "onFocus": handleFocus,
        "onBlur": handleBlur,
        "onInput": handleInput,
        "onCompositionend": handleCompositionend
      }, null), readerClear()]), readerAction()]);
    };
  }
});

exports["default"] = _Search;
//# sourceMappingURL=search.js.map
