import type { SliderValue } from './type';
export interface TouchData {
    startValue: number;
    newValue: number;
    startX: number;
    deltaX: number;
    offsetX: number;
}
declare const _default: import("vue").DefineComponent<{
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
            value: SliderValue;
            position?: "end" | "start";
        }) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    showExtremeValue: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: import("vue").PropType<"default" | "capsule">;
        default: "default" | "capsule";
        validator(val: "default" | "capsule"): boolean;
    };
    value: {
        type: import("vue").PropType<SliderValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<SliderValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<SliderValue>;
        default: number;
    };
    onChange: import("vue").PropType<(value: SliderValue) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    label: {
        type: import("vue").PropType<string | boolean | ((h: typeof import("vue").h, props: {
            value: SliderValue;
            position?: "end" | "start";
        }) => import("..").SlotReturnValue)>;
        default: boolean;
    };
    marks: {
        type: import("vue").PropType<number[] | import("./type").SliderMarks>;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    min: {
        type: NumberConstructor;
        default: number;
    };
    range: BooleanConstructor;
    showExtremeValue: BooleanConstructor;
    step: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: import("vue").PropType<"default" | "capsule">;
        default: "default" | "capsule";
        validator(val: "default" | "capsule"): boolean;
    };
    value: {
        type: import("vue").PropType<SliderValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<SliderValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<SliderValue>;
        default: number;
    };
    onChange: import("vue").PropType<(value: SliderValue) => void>;
}>>, {
    label: string | boolean | ((h: typeof import("vue").h, props: {
        value: SliderValue;
        position?: "end" | "start";
    }) => import("..").SlotReturnValue);
    value: SliderValue;
    defaultValue: SliderValue;
    modelValue: SliderValue;
    theme: "default" | "capsule";
    disabled: boolean;
    range: boolean;
    max: number;
    step: number;
    min: number;
    showExtremeValue: boolean;
}, {}>;
export default _default;
