/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var vue = require('vue');
var isObject = require('lodash/isObject');
var toast_toast = require('./toast.js');
var shared_dom = require('../shared/dom.js');
var shared_util = require('../shared/util.js');
require('tdesign-icons-vue-next');
require('../hooks/tnode.js');
require('lodash/isFunction');
require('lodash/camelCase');
require('lodash/kebabCase');
require('../hooks/render-tnode.js');
require('lodash/isEmpty');
require('lodash/isString');
require('../overlay/index.js');
require('../overlay/overlay.js');
require('../config.js');
require('../overlay/props.js');
require('../hooks/useClass.js');
require('../config-provider/useConfig.js');
require('lodash/cloneDeep');
require('../config-provider/context.js');
require('lodash/mergeWith');
require('lodash/merge');
require('lodash/isArray');
require('../_common/js/global-config/mobile/default-config.js');
require('../_common/js/global-config/mobile/locale/zh_CN.js');
require('../_chunks/dep-2d756502.js');
require('@babel/runtime/helpers/typeof');
require('../_chunks/dep-f98b59f6.js');
require('dayjs');
require('../shared/component.js');
require('./props.js');
require('../hooks/useLockScroll.js');
require('../_util/useTouch.js');
require('../_util/getScrollParent.js');
require('../_util/supportsPassive.js');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/isNumber');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var isObject__default = /*#__PURE__*/_interopDefaultLegacy(isObject);

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty__default["default"](e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var instance = null;
var app;
function Toast(props) {
  if (!shared_util.isBrowser) return;
  var root = document.createElement("div");
  var container = shared_dom.getAttach(isObject__default["default"](props) ? props.attach : "body");
  if (container) {
    container.appendChild(root);
  } else {
    console.error("attach is not exist");
  }
  var propsObject = _objectSpread({
    duration: 2e3
  }, parseOptions(props));
  if (instance) {
    instance.clear();
  }
  instance = toast_toast["default"];
  instance.clear = function () {
    clearTimeout(instance.timer);
    app.unmount();
    root.remove();
    if (propsObject.onClose) {
      propsObject.onClose();
    }
    instance = null;
  };
  if (propsObject.duration && propsObject.duration > 0) {
    instance.timer = setTimeout(function () {
      instance.clear();
      if (propsObject.onDestroy) {
        propsObject.onDestroy();
      }
    }, propsObject.duration);
  }
  app = vue.createApp(instance, _objectSpread({}, propsObject));
  app.mount(root);
  return instance;
}
Toast.clear = function () {
  if (instance) {
    instance.clear();
  }
};
["loading", "success", "error"].forEach(function (type) {
  if (!type) {
    return;
  }
  Toast[type] = function (options) {
    var props = {
      message: "",
      theme: type
    };
    if (typeof options === "string") {
      props.message = options;
    } else {
      props = _objectSpread(_objectSpread({}, props), options);
    }
    return Toast(props);
  };
});
function parseOptions(message) {
  if (typeof message === "string") {
    return {
      message: message
    };
  }
  return message;
}
Toast.install = function (app2) {
  app2.config.globalProperties.$toast = Toast;
};
var ToastPlugin = Toast;

exports.ToastPlugin = ToastPlugin;
exports["default"] = ToastPlugin;
//# sourceMappingURL=plugin.js.map
