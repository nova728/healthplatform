import { TreeSelectValue, _TreeOptionData } from './type';
declare const _default: import("vue").DefineComponent<{
    customStyle: {
        type: StringConstructor;
        default: string;
    };
    filterable: BooleanConstructor;
    height: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    keys: {
        type: import("vue").PropType<import("..").TreeKeysType>;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<_TreeOptionData<string | number>[]>;
        default: () => _TreeOptionData<string | number>[];
    };
    value: {
        type: import("vue").PropType<TreeSelectValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<TreeSelectValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<TreeSelectValue>;
    };
    onChange: import("vue").PropType<(value: TreeSelectValue, level: import("./type").TreeLevel) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "change")[], "update:modelValue" | "update:value" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    customStyle: {
        type: StringConstructor;
        default: string;
    };
    filterable: BooleanConstructor;
    height: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    keys: {
        type: import("vue").PropType<import("..").TreeKeysType>;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<_TreeOptionData<string | number>[]>;
        default: () => _TreeOptionData<string | number>[];
    };
    value: {
        type: import("vue").PropType<TreeSelectValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<TreeSelectValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<TreeSelectValue>;
    };
    onChange: import("vue").PropType<(value: TreeSelectValue, level: import("./type").TreeLevel) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    value: TreeSelectValue;
    modelValue: TreeSelectValue;
    height: string | number;
    multiple: boolean;
    options: _TreeOptionData<string | number>[];
    customStyle: string;
    filterable: boolean;
}, {}>;
export default _default;
