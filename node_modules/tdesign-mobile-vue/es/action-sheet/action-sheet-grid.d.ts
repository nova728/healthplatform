import { ActionSheetItem } from './type';
declare const _default: import("vue").DefineComponent<{
    items: {
        type: {
            (arrayLength: number): ActionSheetItem[];
            (...items: ActionSheetItem[]): ActionSheetItem[];
            new (arrayLength: number): ActionSheetItem[];
            new (...items: ActionSheetItem[]): ActionSheetItem[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        required: true;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    selected: {
        type: FunctionConstructor;
        default: any;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "selected"[], "selected", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    items: {
        type: {
            (arrayLength: number): ActionSheetItem[];
            (...items: ActionSheetItem[]): ActionSheetItem[];
            new (arrayLength: number): ActionSheetItem[];
            new (...items: ActionSheetItem[]): ActionSheetItem[];
            isArray(arg: any): arg is any[];
            readonly prototype: any[];
            from<T>(arrayLike: ArrayLike<T>): T[];
            from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
            from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
            from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
            of<T_4>(...items: T_4[]): T_4[];
            readonly [Symbol.species]: ArrayConstructor;
        };
        required: true;
    };
    count: {
        type: NumberConstructor;
        default: number;
    };
    selected: {
        type: FunctionConstructor;
        default: any;
    };
}>> & {
    onSelected?: (...args: any[]) => any;
}, {
    count: number;
    selected: Function;
}, {}>;
export default _default;
