/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { defineComponent, inject, computed, createVNode, mergeProps, Fragment } from 'vue';
import { Badge } from '../badge/index.mjs';
import { Image } from '../image/index.mjs';
import config from '../config.mjs';
import AvatarProps from './props.mjs';
import { useTNodeJSX, useContent } from '../hooks/tnode.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import { isValidSize } from '../_common/js/avatar/utils.mjs';
import '../badge/badge.mjs';
import '../_chunks/dep-4c2819a4.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-dc33ef46.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../_chunks/dep-5030b0d2.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../badge/props.mjs';
import '../shared/index.mjs';
import '../shared/functions.mjs';
import '../shared/util.mjs';
import '../shared/component.mjs';
import '../shared/constants.mjs';
import '../shared/render.mjs';
import '../_chunks/dep-ca4b618a.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../shared/dom.mjs';
import '../_chunks/dep-14bda5a6.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../shared/render-tnode.mjs';
import '../shared/useToggle/index.mjs';
import '../shared/useCountDown/index.mjs';
import '../_chunks/dep-1f2e940b.mjs';
import '@vueuse/core';
import '../shared/useCountDown/utils.mjs';
import '../shared/useDefault/index.mjs';
import '../shared/useChildSlots/index.mjs';
import '../_chunks/dep-6dd2b317.mjs';
import '../shared/useVModel/index.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../shared/useTouch/index.mjs';
import '../shared/useScrollParent/index.mjs';
import '../shared/useExpose/index.mjs';
import '../shared/useTest/index.mjs';
import '../shared/useClickAway/index.mjs';
import '../shared/useGesture/index.mjs';
import '@use-gesture/vanilla';
import '../shared/hover.mjs';
import './style/css.mjs';
import '../badge/type.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';
import '../image/image.mjs';
import 'tdesign-icons-vue-next';
import '../loading/index.mjs';
import '../loading/loading.mjs';
import '../loading/icon/gradient.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-67f4637f.mjs';
import '../_chunks/dep-689db43b.mjs';
import '../_chunks/dep-791a4d06.mjs';
import '../loading/icon/spinner.mjs';
import '../loading/props.mjs';
import '../loading/type.mjs';
import '../loading/plugin.mjs';
import '../image/props.mjs';
import '../image/type.mjs';

var prefix = config.prefix;
var _Avatar = defineComponent({
  name: "".concat(prefix, "-avatar"),
  props: AvatarProps,
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var renderTNodeContent = useContent();
    var avatarClass = usePrefixClass("avatar");
    var avatarGroupProps = inject("avatarGroup", {});
    var hasAvatarGroupProps = Object.keys(avatarGroupProps).length > 0;
    var shapeValue = computed(function () {
      return props.shape || (avatarGroupProps === null || avatarGroupProps === void 0 ? void 0 : avatarGroupProps.shape) || "circle";
    });
    var sizeValue = computed(function () {
      return props.size || (avatarGroupProps === null || avatarGroupProps === void 0 ? void 0 : avatarGroupProps.size);
    });
    var isCustomSize = computed(function () {
      return !isValidSize(sizeValue.value);
    });
    var avatarClasses = computed(function () {
      return ["".concat(avatarClass.value), "".concat(avatarClass.value, "--").concat(isCustomSize.value ? "medium" : sizeValue.value), "".concat(avatarClass.value, "--").concat(shapeValue.value), hasAvatarGroupProps ? "".concat(avatarClass.value, "--border ").concat(avatarClass.value, "--border-").concat(isCustomSize.value ? "medium" : sizeValue.value) : ""];
    });
    var customSize = computed(function () {
      return isCustomSize.value ? {
        height: sizeValue.value,
        width: sizeValue.value,
        "font-size": "".concat(Number.parseInt(sizeValue.value, 10) / 8 * 3 + 2, "px")
      } : {};
    });
    var handleImgLoadError = function handleImgLoadError(e) {
      var _props$onError;
      (_props$onError = props.onError) === null || _props$onError === void 0 || _props$onError.call(props, e);
    };
    return function () {
      var icon = renderTNodeJSX("icon");
      var TNodeContent = renderTNodeContent("default", "content");
      var readerAvatar = function readerAvatar() {
        if (props.image && !props.hideOnLoadFailed) {
          return createVNode(Image, mergeProps({
            "src": props.image,
            "alt": props.alt
          }, props.imageProps, {
            "onError": handleImgLoadError
          }), null);
        }
        if (icon) {
          return createVNode("div", {
            "class": "".concat(avatarClass.value, "__icon")
          }, [icon]);
        }
        return createVNode(Fragment, null, [TNodeContent]);
      };
      return createVNode("div", {
        "class": "".concat(avatarClass.value, "__wrapper")
      }, [createVNode("div", {
        "class": "".concat(avatarClass.value, "__badge")
      }, [createVNode(Badge, props.badgeProps, {
        default: function _default() {
          return [createVNode("div", {
            "class": avatarClasses.value,
            "style": customSize.value
          }, [readerAvatar()])];
        }
      })])]);
    };
  }
});

export { _Avatar as default };
//# sourceMappingURL=avatar.mjs.map
