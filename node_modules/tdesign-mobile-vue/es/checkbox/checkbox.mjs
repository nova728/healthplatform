/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-4c2819a4.mjs';
import { _ as _defineProperty } from '../_chunks/dep-dc33ef46.mjs';
import { defineComponent, inject, computed, h, createVNode, resolveComponent, Fragment } from 'vue';
import { CheckCircleFilledIcon, CircleIcon, MinusCircleFilledIcon, MinusRectangleFilledIcon, CheckRectangleFilledIcon, MinusIcon, CheckIcon } from 'tdesign-icons-vue-next';
import config from '../config.mjs';
import CheckboxProps from './props.mjs';
import '../shared/index.mjs';
import { useTNodeJSX, useContent } from '../hooks/tnode.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import TNodeComponent from '../shared/render-tnode.mjs';
import { useDefault } from '../shared/useDefault/index.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../shared/functions.mjs';
import '../shared/util.mjs';
import '../_chunks/dep-5030b0d2.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../shared/component.mjs';
import '../shared/constants.mjs';
import '../shared/render.mjs';
import '../_chunks/dep-ca4b618a.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../shared/dom.mjs';
import '../_chunks/dep-14bda5a6.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../shared/useToggle/index.mjs';
import '../shared/useCountDown/index.mjs';
import '../_chunks/dep-1f2e940b.mjs';
import '@vueuse/core';
import '../shared/useCountDown/utils.mjs';
import '../shared/useChildSlots/index.mjs';
import '../_chunks/dep-6dd2b317.mjs';
import '../shared/useVModel/index.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../shared/useTouch/index.mjs';
import '../shared/useScrollParent/index.mjs';
import '../shared/useExpose/index.mjs';
import '../shared/useTest/index.mjs';
import '../shared/useClickAway/index.mjs';
import '../shared/useGesture/index.mjs';
import '@use-gesture/vanilla';
import '../shared/hover.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-60e514fa.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var _Checkbox = defineComponent({
  name: "".concat(prefix, "-checkbox"),
  components: {
    TNode: TNodeComponent
  },
  props: _objectSpread(_objectSpread({}, CheckboxProps), {}, {
    borderless: {
      type: Boolean,
      value: false
    }
  }),
  emits: ["update:checked", "update:modelValue", "change"],
  setup: function setup(props, context) {
    var checkboxClass = usePrefixClass("checkbox");
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var _useDefault = useDefault(props, context.emit, "checked", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      innerChecked = _useDefault2[0],
      setInnerChecked = _useDefault2[1];
    var checkboxGroup = inject("checkboxGroup", void 0);
    var disabled = useFormDisabled(checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.disabled);
    var indeterminate = computed(function () {
      if (props.checkAll && checkboxGroup != null) return checkboxGroup.checkAllStatus.value === "indeterminate";
      return props.indeterminate;
    });
    var isIconArray = Array.isArray(props.icon);
    var defaultCheckIcons = [h(CheckCircleFilledIcon), h(CircleIcon)];
    var checkIcons = computed(function () {
      if (isIconArray && props.icon.length > 1) {
        return props.icon.map(function (icon) {
          return typeof icon === "string" ? h("img", {
            class: "".concat(checkboxClass.value, "__icon-image"),
            src: icon
          }) : icon;
        });
      }
      return defaultCheckIcons;
    });
    var checkedIcon = computed(function () {
      if (props.icon === "circle" || props.icon === true) return indeterminate.value ? h(MinusCircleFilledIcon) : h(CheckCircleFilledIcon);
      if (props.icon === "rectangle") return indeterminate.value ? h(MinusRectangleFilledIcon) : h(CheckRectangleFilledIcon);
      if (props.icon === "line") return indeterminate.value ? h(MinusIcon) : h(CheckIcon);
      return null;
    });
    var isChecked = computed(function () {
      if (props.checkAll) {
        var checkAllStatus = checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.checkAllStatus.value;
        return checkAllStatus === "checked" || checkAllStatus === "indeterminate";
      }
      if (checkboxGroup != null && props.value != null) {
        var _checkboxGroup$checke;
        return !!((_checkboxGroup$checke = checkboxGroup.checkedSet.value) !== null && _checkboxGroup$checke !== void 0 && _checkboxGroup$checke.has(props.value));
      }
      return innerChecked.value;
    });
    var isDisabled = computed(function () {
      if (checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.max.value) return checkboxGroup.max.value <= checkboxGroup.innerValue.value.length && !isChecked.value;
      return disabled.value;
    });
    var handleChange = function handleChange(e, source) {
      if (isDisabled.value || props.readonly) return;
      if (source === "text" && props.contentDisabled) return;
      var value = !isChecked.value;
      setInnerChecked(value, {
        e: e
      });
      e.stopPropagation();
      if (checkboxGroup && checkboxGroup !== null && checkboxGroup !== void 0 && checkboxGroup.onCheckedChange) {
        checkboxGroup.onCheckedChange({
          checked: value,
          checkAll: props.checkAll,
          e: e,
          option: props
        });
      }
    };
    return function () {
      var placement = props.placement,
        block = props.block,
        icon = props.icon,
        maxLabelRow = props.maxLabelRow,
        maxContentRow = props.maxContentRow,
        borderless = props.borderless;
      var renderIconArray = function renderIconArray() {
        if (isIconArray) {
          return createVNode(resolveComponent("t-node"), {
            "content": checkIcons.value[isChecked.value ? 0 : 1],
            "class": "".concat(checkboxClass.value, "__icon-wrapper")
          }, null);
        }
        if (isChecked.value) {
          return createVNode(resolveComponent("t-node"), {
            "content": checkedIcon.value,
            "class": "".concat(checkboxClass.value, "__icon-wrapper")
          }, null);
        }
        return createVNode(Fragment, null, [(icon === "circle" || icon === true || icon === "rectangle") && createVNode("div", {
          "class": _defineProperty(_defineProperty(_defineProperty({}, "".concat(checkboxClass.value, "__icon-circle"), icon === true), "".concat(checkboxClass.value, "__icon-").concat(icon), typeof icon === "string"), "".concat(checkboxClass.value, "__icon-").concat(icon, "--disabled"), isDisabled.value)
        }, null), icon === "line" && createVNode("div", {
          "class": "placeholder"
        }, null)]);
      };
      var renderIconNode = function renderIconNode() {
        if (!icon) {
          return null;
        }
        return createVNode("div", {
          "class": _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(checkboxClass.value, "__icon"), true), "".concat(checkboxClass.value, "__icon--").concat(placement), true), "".concat(checkboxClass.value, "__icon--checked"), isChecked.value), "".concat(checkboxClass.value, "__icon--disabled"), isDisabled.value)
        }, [renderIconArray()]);
      };
      var renderCheckBoxContent = function renderCheckBoxContent() {
        var labelContent = renderContent("default", "label");
        var checkboxContent = renderTNodeJSX("content");
        return createVNode("div", {
          "class": "".concat(checkboxClass.value, "__content"),
          "onClick": function onClick(event) {
            event.stopPropagation();
            handleChange(event, "text");
          }
        }, [createVNode("div", {
          "class": _defineProperty(_defineProperty(_defineProperty({}, "".concat(checkboxClass.value, "__title"), true), "".concat(checkboxClass.value, "__title--checked"), isChecked.value), "".concat(checkboxClass.value, "__title--disabled"), isDisabled.value),
          "style": {
            "-webkit-line-clamp": maxLabelRow
          }
        }, [labelContent]), createVNode("div", {
          "class": _defineProperty(_defineProperty({}, "".concat(checkboxClass.value, "__description"), true), "".concat(checkboxClass.value, "__description--disabled"), isDisabled.value),
          "style": {
            "-webkit-line-clamp": maxContentRow
          }
        }, [checkboxContent])]);
      };
      return createVNode("div", {
        "class": _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(checkboxClass.value), true), "".concat(checkboxClass.value, "--").concat(placement), true), "".concat(checkboxClass.value, "--checked"), isChecked.value), "".concat(checkboxClass.value, "--block"), block),
        "onClick": handleChange
      }, [renderIconNode(), renderCheckBoxContent(), !borderless && createVNode("div", {
        "class": "".concat(checkboxClass.value, "__border ").concat(checkboxClass.value, "__border--").concat(placement)
      }, null)]);
    };
  }
});

export { _Checkbox as default };
//# sourceMappingURL=checkbox.mjs.map
