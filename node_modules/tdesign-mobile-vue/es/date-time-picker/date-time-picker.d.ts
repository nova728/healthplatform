declare const _default: import("vue").DefineComponent<{
    cancelBtn: {
        type: StringConstructor;
        default: string;
    };
    confirmBtn: {
        type: StringConstructor;
        default: string;
    };
    end: {
        type: import("vue").PropType<string | number>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<import("./type").DateTimePickerMode>;
        default: string;
    };
    renderLabel: {
        type: import("vue").PropType<(type: string, value: number) => string>;
    };
    showWeek: BooleanConstructor;
    start: {
        type: import("vue").PropType<string | number>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<import("./type").DateValue>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateValue>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateValue>;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateValue) => void>;
    onConfirm: import("vue").PropType<(value: import("./type").DateValue) => void>;
    onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "change" | "pick" | "cancel" | "confirm")[], "update:modelValue" | "update:value" | "change" | "confirm" | "cancel" | "pick", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cancelBtn: {
        type: StringConstructor;
        default: string;
    };
    confirmBtn: {
        type: StringConstructor;
        default: string;
    };
    end: {
        type: import("vue").PropType<string | number>;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    mode: {
        type: import("vue").PropType<import("./type").DateTimePickerMode>;
        default: string;
    };
    renderLabel: {
        type: import("vue").PropType<(type: string, value: number) => string>;
    };
    showWeek: BooleanConstructor;
    start: {
        type: import("vue").PropType<string | number>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<import("./type").DateValue>;
    };
    modelValue: {
        type: import("vue").PropType<import("./type").DateValue>;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").DateValue>;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").DateValue) => void>;
    onConfirm: import("vue").PropType<(value: import("./type").DateValue) => void>;
    onPick: import("vue").PropType<(value: import("./type").DateValue) => void>;
}>> & {
    onCancel?: (...args: any[]) => any;
    onChange?: (...args: any[]) => any;
    onConfirm?: (...args: any[]) => any;
    onPick?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    title: string;
    cancelBtn: string;
    confirmBtn: string;
    format: string;
    mode: import("./type").DateTimePickerMode;
    showWeek: boolean;
}, {}>;
export default _default;
