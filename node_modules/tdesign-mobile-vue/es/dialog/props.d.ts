import { TdDialogProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    actions: {
        type: PropType<import("..").TdButtonProps[]>;
    };
    buttonLayout: {
        type: PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: TdDialogProps['buttonLayout']): boolean;
    };
    cancelBtn: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
    };
    closeBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnOverlayClick: {
        type: BooleanConstructor;
        default: any;
    };
    confirmBtn: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue) | import("..").TdButtonProps>;
    };
    content: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    destroyOnClose: BooleanConstructor;
    overlayProps: {
        type: PropType<object>;
        default: () => {};
    };
    preventScrollThrough: {
        type: BooleanConstructor;
        default: boolean;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    visible: BooleanConstructor;
    width: {
        type: PropType<string | number>;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onCancel: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: PropType<(context: import("./type").DialogCloseContext) => void>;
    onClosed: PropType<() => void>;
    onConfirm: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onOverlayClick: PropType<(context: {
        e: MouseEvent;
    }) => void>;
};
export default _default;
