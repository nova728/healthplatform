/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-dc33ef46.mjs';
import { defineComponent, reactive, ref, watch, computed, provide, createVNode, resolveComponent } from 'vue';
import { onClickOutside } from '@vueuse/core';
import { CaretDownSmallIcon, CaretUpSmallIcon } from 'tdesign-icons-vue-next';
import { c as camelCase_1 } from '../_chunks/dep-ca4b618a.mjs';
import config from '../config.mjs';
import { context, DropdownMenuExpandState } from './context.mjs';
import '../shared/index.mjs';
import { findRelativeRect, findRelativeContainer } from './dom-utils.mjs';
import { useContent } from '../hooks/tnode.mjs';
import DropdownMenuProps from './props.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import { useExpose } from '../shared/useExpose/index.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../shared/functions.mjs';
import '../shared/util.mjs';
import '../_chunks/dep-4c2819a4.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-5030b0d2.mjs';
import '../shared/component.mjs';
import '../shared/constants.mjs';
import '../shared/render.mjs';
import '../shared/dom.mjs';
import '../_chunks/dep-14bda5a6.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../shared/render-tnode.mjs';
import '../shared/useToggle/index.mjs';
import '../shared/useCountDown/index.mjs';
import '../_chunks/dep-1f2e940b.mjs';
import '../shared/useCountDown/utils.mjs';
import '../shared/useDefault/index.mjs';
import '../shared/useChildSlots/index.mjs';
import '../_chunks/dep-6dd2b317.mjs';
import '../shared/useVModel/index.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../shared/useTouch/index.mjs';
import '../shared/useScrollParent/index.mjs';
import '../shared/useTest/index.mjs';
import '../shared/useClickAway/index.mjs';
import '../shared/useGesture/index.mjs';
import '@use-gesture/vanilla';
import '../shared/hover.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var _DropdownMenu = defineComponent({
  name: "".concat(prefix, "-dropdown-menu"),
  components: {
    CaretDownSmallIcon: CaretDownSmallIcon,
    CaretUpSmallIcon: CaretUpSmallIcon
  },
  props: _objectSpread({
    onMenuOpened: Function,
    onMenuClosed: Function
  }, DropdownMenuProps),
  emits: ["menuOpened", "menuClosed"],
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var dropdownMenuClass = usePrefixClass("dropdown-menu");
    var renderContent = useContent();
    var state = reactive({
      activeId: null,
      barRect: {},
      childCount: 0,
      itemsLabel: []
    });
    var menuItems = ref([]);
    var updateItems = function updateItems() {
      if (slots.default) {
        var itemName = "".concat(prefix, "-dropdown-item");
        var children = slots.default();
        menuItems.value = children.filter(function (child) {
          var _child$type;
          var childTypeName = child === null || child === void 0 || (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name;
          return (childTypeName === null || childTypeName === void 0 ? void 0 : childTypeName.includes) && childTypeName.includes(itemName);
        });
      }
    };
    watch(function () {
      var _slots$default;
      return slots === null || slots === void 0 || (_slots$default = slots.default) === null || _slots$default === void 0 ? void 0 : _slots$default.call(slots);
    }, updateItems, {
      deep: true,
      immediate: true
    });
    var menuTitles = computed(function () {
      return menuItems.value.map(function (item, index) {
        var _item$props = item.props,
          keys = _item$props.keys,
          label = _item$props.label,
          value = _item$props.value,
          modelValue = _item$props.modelValue,
          defaultValue = _item$props.defaultValue,
          disabled = _item$props.disabled,
          options = _item$props.options;
        var currentValue = value || modelValue || defaultValue;
        var target = options === null || options === void 0 ? void 0 : options.find(function (item2) {
          var _keys$value;
          return item2[(_keys$value = keys === null || keys === void 0 ? void 0 : keys.value) !== null && _keys$value !== void 0 ? _keys$value : "value"] === currentValue;
        });
        if (state.itemsLabel.length < index + 1) {
          var _keys$label;
          var targetLabel = target && target[(_keys$label = keys === null || keys === void 0 ? void 0 : keys.label) !== null && _keys$label !== void 0 ? _keys$label : "label"] || "";
          var computedLabel = label || targetLabel;
          state.itemsLabel.push(computedLabel);
          return {
            labelProps: label,
            label: computedLabel,
            disabled: disabled !== void 0 && disabled !== false
          };
        }
        return {
          labelProps: label,
          label: label || target.label,
          disabled: disabled !== void 0 && disabled !== false
        };
      });
    });
    provide("dropdownMenuProps", props);
    provide("dropdownMenuState", state);
    var classes = computed(function () {
      return ["".concat(dropdownMenuClass.value)];
    });
    var refBar = ref();
    var styleBarItem = computed(function () {
      return function (item, idx) {
        return ["".concat(dropdownMenuClass.value, "__item"), _defineProperty(_defineProperty({}, "".concat(dropdownMenuClass.value, "__item--disabled"), item.disabled), "".concat(dropdownMenuClass.value, "__item--active"), idx === state.activeId)];
      };
    });
    var styleIcon = computed(function () {
      return function (item, idx) {
        return ["".concat(dropdownMenuClass.value, "__icon"), _defineProperty({}, "".concat(dropdownMenuClass.value, "__icon--active"), idx === state.activeId)];
      };
    });
    var expandMenu = function expandMenu(item, idx) {
      var _props$onMenuOpened;
      var disabled = item.disabled;
      if (disabled) return;
      if (state.activeId === idx) {
        var _props$onMenuClosed;
        collapseMenu();
        (_props$onMenuClosed = props.onMenuClosed) === null || _props$onMenuClosed === void 0 || _props$onMenuClosed.call(props, {
          trigger: "menu"
        });
        return;
      }
      (_props$onMenuOpened = props.onMenuOpened) === null || _props$onMenuOpened === void 0 || _props$onMenuOpened.call(props, "menuOpened");
      state.activeId = idx;
      state.itemsLabel[idx] = item.label;
      var bar = refBar.value;
      var barRect = findRelativeRect(bar);
      state.barRect = barRect;
      var container = findRelativeContainer(bar) || document.body;
      context.recordMenuExpanded(container, control, DropdownMenuExpandState.expanded);
    };
    var collapseMenu = function collapseMenu() {
      menuTitles.value.forEach(function (item, index) {
        item.label = state.itemsLabel[index];
      });
      state.activeId = null;
      var bar = refBar.value;
      var container = findRelativeContainer(bar) || document.body;
      context.recordMenuExpanded(container, control, DropdownMenuExpandState.collapsed);
    };
    onClickOutside(refBar, function () {
      var _props$onMenuClosed2;
      collapseMenu();
      (_props$onMenuClosed2 = props.onMenuClosed) === null || _props$onMenuClosed2 === void 0 || _props$onMenuClosed2.call(props, {
        trigger: "outside"
      });
    });
    var control = {
      expandMenu: expandMenu,
      collapseMenu: collapseMenu,
      emitEvents: function emitEvents(emit, trigger) {
        var _props;
        (_props = props["on".concat(camelCase_1(emit))]) === null || _props === void 0 || _props.call(props, trigger);
      }
    };
    provide("dropdownMenuControl", control);
    useExpose({
      toggle: function toggle(idx) {
        if (idx != null) {
          var item = menuTitles.value[idx];
          expandMenu(item, idx);
        } else {
          collapseMenu();
        }
      }
    });
    useExpose({
      expandMenu: expandMenu,
      collapseMenu: collapseMenu
    });
    return function () {
      var defaultSlot = renderContent("default", "content");
      var renderDownIcon = function renderDownIcon(item, idx) {
        if (props.direction === "down") {
          return createVNode(resolveComponent("caret-down-small-icon"), {
            "class": styleIcon.value(item, idx)
          }, null);
        }
        return createVNode(resolveComponent("caret-up-small-icon"), {
          "class": styleIcon.value(item, idx)
        }, null);
      };
      return createVNode("div", {
        "ref": refBar,
        "class": classes.value
      }, [(menuTitles.value || []).map(function (item, idx) {
        return createVNode("div", {
          "class": styleBarItem.value(item, idx),
          "onClick": function onClick() {
            return expandMenu(item, idx);
          }
        }, [createVNode("div", {
          "class": "".concat(dropdownMenuClass.value, "__title")
        }, [item.labelProps || item.label]), renderDownIcon(item, idx)]);
      }), defaultSlot]);
    };
  }
});

export { _DropdownMenu as default };
//# sourceMappingURL=dropdown-menu.mjs.map
