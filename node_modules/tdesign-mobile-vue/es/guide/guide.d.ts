import { h } from 'vue';
import { GuideStep } from './type';
declare const _default: import("vue").DefineComponent<{
    backButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    counter: {
        type: import("vue").PropType<(h: typeof h, props: {
            current: number;
            total: number;
        }) => import("../common").SlotReturnValue>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    hideCounter: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: import("vue").PropType<"dialog" | "popover">;
        default: "dialog" | "popover";
        validator(val: "dialog" | "popover"): boolean;
    };
    nextButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    steps: {
        type: import("vue").PropType<GuideStep[]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onBack: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onChange: import("vue").PropType<(current: number, context?: {
        e: MouseEvent;
        total: number;
    }) => void>;
    onFinish: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onNextStepClick: import("vue").PropType<(context: {
        e: MouseEvent;
        next: number;
        current: number;
        total: number;
    }) => void>;
    onSkip: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    backButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    counter: {
        type: import("vue").PropType<(h: typeof h, props: {
            current: number;
            total: number;
        }) => import("../common").SlotReturnValue>;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
    };
    finishButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    hideCounter: BooleanConstructor;
    hideSkip: BooleanConstructor;
    highlightPadding: {
        type: NumberConstructor;
        default: number;
    };
    mode: {
        type: import("vue").PropType<"dialog" | "popover">;
        default: "dialog" | "popover";
        validator(val: "dialog" | "popover"): boolean;
    };
    nextButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    showOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipButtonProps: {
        type: import("vue").PropType<import("../button").TdButtonProps>;
    };
    steps: {
        type: import("vue").PropType<GuideStep[]>;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    onBack: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onChange: import("vue").PropType<(current: number, context?: {
        e: MouseEvent;
        total: number;
    }) => void>;
    onFinish: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
    onNextStepClick: import("vue").PropType<(context: {
        e: MouseEvent;
        next: number;
        current: number;
        total: number;
    }) => void>;
    onSkip: import("vue").PropType<(context: {
        e: MouseEvent;
        current: number;
        total: number;
    }) => void>;
}>>, {
    modelValue: number;
    mode: "dialog" | "popover";
    zIndex: number;
    showOverlay: boolean;
    current: number;
    highlightPadding: number;
    hideCounter: boolean;
    hideSkip: boolean;
}, {}>;
export default _default;
