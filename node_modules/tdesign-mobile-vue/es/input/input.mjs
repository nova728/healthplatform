/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-4c2819a4.mjs';
import { _ as _defineProperty } from '../_chunks/dep-dc33ef46.mjs';
import { defineComponent, ref, computed, nextTick, watch, createVNode } from 'vue';
import { CloseCircleFilledIcon, BrowseOffIcon, BrowseIcon } from 'tdesign-icons-vue-next';
import { i as isFunction_1 } from '../_chunks/dep-14bda5a6.mjs';
import config from '../config.mjs';
import InputProps from './props.mjs';
import '../shared/index.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { useDefault } from '../shared/useDefault/index.mjs';
import { getCharacterLength } from '../shared/util.mjs';
import { extendAPI } from '../shared/component.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../shared/functions.mjs';
import '../shared/constants.mjs';
import '../shared/render.mjs';
import '../_chunks/dep-ca4b618a.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../shared/dom.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../shared/render-tnode.mjs';
import '../shared/useToggle/index.mjs';
import '../shared/useCountDown/index.mjs';
import '../_chunks/dep-1f2e940b.mjs';
import '@vueuse/core';
import '../shared/useCountDown/utils.mjs';
import '../shared/useChildSlots/index.mjs';
import '../_chunks/dep-6dd2b317.mjs';
import '../shared/useVModel/index.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../shared/useTouch/index.mjs';
import '../shared/useScrollParent/index.mjs';
import '../shared/useExpose/index.mjs';
import '../shared/useTest/index.mjs';
import '../shared/useClickAway/index.mjs';
import '../shared/useGesture/index.mjs';
import '@use-gesture/vanilla';
import '../shared/hover.mjs';
import '../_chunks/dep-5030b0d2.mjs';
import '../_chunks/dep-60e514fa.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var _Input = defineComponent({
  name: "".concat(prefix, "-input"),
  props: _objectSpread(_objectSpread({}, InputProps), {}, {
    labelAlign: {
      type: String,
      default: "top"
    },
    pattern: {
      type: String
    },
    inputmode: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["search", "text", "none", "url", "tel", "email", "numeric", "decimal"].includes(val);
      }
    }
  }),
  setup: function setup(props, context) {
    var renderTNodeJSX = useTNodeJSX();
    var inputClass = usePrefixClass("input");
    var isDisabled = useFormDisabled();
    var inputRef = ref();
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      innerValue = _useDefault2[0];
    var status = props.status || "default";
    var renderType = ref(props.type);
    var focused = ref(false);
    var inputClasses = computed(function () {
      return ["".concat(inputClass.value, "__control"), _defineProperty(_defineProperty(_defineProperty({}, "".concat(inputClass.value, "--").concat(props.align), props.align !== "left"), "".concat(inputClass.value, "--").concat(status), status), "".concat(inputClass.value, "__control--disabled"), isDisabled.value)];
    });
    var rootClasses = computed(function () {
      return [inputClass.value, _defineProperty(_defineProperty(_defineProperty({}, "".concat(inputClass.value, "--layout-").concat(props.layout), props.layout), "".concat(inputClass.value, "--center"), props.labelAlign === "center"), "".concat(inputClass.value, "--border"), !props.borderless)];
    });
    var showClear = computed(function () {
      if (isDisabled.value || props.readonly === true) return false;
      if (props.clearable && innerValue.value && innerValue.value.length > 0) {
        return props.clearTrigger === "always" || props.clearTrigger === "focus" && focused.value;
      }
      return false;
    });
    var setInputValue = function setInputValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var input = inputRef.value;
      var sV = String(v);
      if (!input) {
        return;
      }
      if (input.value !== sV) {
        input.value = sV;
      }
    };
    var handleInput = function handleInput(e) {
      if (e instanceof InputEvent) {
        var checkInputType = e.inputType && e.inputType === "insertCompositionText";
        if (e.isComposing || checkInputType) return;
      }
      inputValueChangeHandle(e);
    };
    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var value = e.target.value;
      var allowInputOverMax = props.allowInputOverMax,
        maxcharacter = props.maxcharacter;
      if (!allowInputOverMax && maxcharacter && maxcharacter > 0 && !Number.isNaN(maxcharacter)) {
        var _getCharacterLength = getCharacterLength(value, maxcharacter),
          _getCharacterLength$l = _getCharacterLength.length,
          length = _getCharacterLength$l === void 0 ? 0 : _getCharacterLength$l,
          _getCharacterLength$c = _getCharacterLength.characters,
          characters = _getCharacterLength$c === void 0 ? "" : _getCharacterLength$c;
        innerValue.value = characters;
      } else {
        innerValue.value = value;
      }
      nextTick(function () {
        return setInputValue(innerValue.value);
      });
    };
    var focus = function focus() {
      var _inputRef$value;
      focused.value = true;
      (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 || _inputRef$value.focus();
    };
    var blur = function blur() {
      var _inputRef$value2;
      focused.value = false;
      (_inputRef$value2 = inputRef.value) === null || _inputRef$value2 === void 0 || _inputRef$value2.blur();
    };
    extendAPI({
      focus: focus,
      blur: blur
    });
    var handleClear = function handleClear(e) {
      var _props$onClear;
      e.preventDefault();
      innerValue.value = "";
      focus();
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, {
        e: e
      });
    };
    var handleFocus = function handleFocus(e) {
      var _props$onFocus;
      focused.value = true;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, innerValue.value, {
        e: e
      });
    };
    var handleBlur = function handleBlur(e) {
      var _props$onBlur2;
      focused.value = false;
      if (isFunction_1(props.format)) {
        innerValue.value = props.format(innerValue.value);
        nextTick(function () {
          var _props$onBlur;
          setInputValue(innerValue.value);
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, innerValue.value, {
            e: e
          });
        });
        return;
      }
      (_props$onBlur2 = props.onBlur) === null || _props$onBlur2 === void 0 || _props$onBlur2.call(props, innerValue.value, {
        e: e
      });
    };
    var handleCompositionend = function handleCompositionend(e) {
      inputValueChangeHandle(e);
    };
    var handlePwdIconClick = function handlePwdIconClick() {
      if (isDisabled.value) return;
      renderType.value = renderType.value === "password" ? "text" : "password";
    };
    watch(function () {
      return props.autofocus;
    }, function (v) {
      if (v === true) {
        nextTick(function () {
          focus();
        });
      }
    }, {
      immediate: true
    });
    watch(function () {
      return props.type;
    }, function (v) {
      renderType.value = v;
    }, {
      immediate: true
    });
    return function () {
      var renderPrefix = function renderPrefix() {
        var prefixIcon = renderTNodeJSX("prefixIcon");
        var label = renderTNodeJSX("label");
        return createVNode("div", {
          "class": "".concat(inputClass.value, "__wrap--prefix")
        }, [prefixIcon && createVNode("div", {
          "class": "".concat(inputClass.value, "__icon--prefix")
        }, [prefixIcon]), createVNode("div", {
          "class": "".concat(inputClass.value, "__label")
        }, [label])]);
      };
      var renderClearable = function renderClearable() {
        if (showClear.value) {
          return createVNode("div", {
            "class": "".concat(inputClass.value, "__wrap--clearable-icon"),
            "onTouchend": handleClear
          }, [createVNode(CloseCircleFilledIcon, null, null)]);
        }
        return null;
      };
      var renderSuffix = function renderSuffix() {
        var suffix = renderTNodeJSX("suffix");
        if (!suffix) {
          return null;
        }
        return createVNode("div", {
          "class": "".concat(inputClass.value, "__wrap--suffix")
        }, [suffix]);
      };
      var renderSuffixIcon = function renderSuffixIcon() {
        var suffixIcon = renderTNodeJSX("suffixIcon");
        if (props.type === "password") {
          if (renderType.value === "password") {
            suffixIcon = createVNode(BrowseOffIcon, {
              "onClick": handlePwdIconClick
            }, null);
          } else if (renderType.value === "text") {
            suffixIcon = createVNode(BrowseIcon, {
              "onClick": handlePwdIconClick
            }, null);
          }
        }
        if (!suffixIcon) {
          return null;
        }
        return createVNode("div", {
          "class": "".concat(inputClass.value, "__wrap--suffix-icon")
        }, [suffixIcon]);
      };
      var renderTips = function renderTips() {
        var tips = renderTNodeJSX("tips");
        if (!tips) {
          return null;
        }
        return createVNode("div", {
          "class": "".concat(inputClass.value, "__tips ").concat(inputClass.value, "--").concat(props.align)
        }, [tips]);
      };
      return createVNode("div", {
        "class": rootClasses.value
      }, [renderPrefix(), createVNode("div", {
        "class": "".concat(inputClass.value, "__wrap")
      }, [createVNode("div", {
        "class": "".concat(inputClass.value, "__content ").concat(inputClass.value, "--").concat(status || "default")
      }, [createVNode("input", {
        "ref": inputRef,
        "value": innerValue.value,
        "name": props.name,
        "class": inputClasses.value,
        "type": renderType.value,
        "disabled": isDisabled.value,
        "autocomplete": props.autocomplete ? "On" : "Off",
        "placeholder": props.placeholder,
        "readonly": props.readonly,
        "maxlength": props.maxlength || -1,
        "pattern": props.pattern,
        "inputmode": props.inputmode,
        "spellcheck": props.spellCheck,
        "onFocus": handleFocus,
        "onBlur": handleBlur,
        "onInput": handleInput,
        "onCompositionend": handleCompositionend
      }, null), renderClearable(), renderSuffix(), renderSuffixIcon()]), renderTips()])]);
    };
  }
});

export { _Input as default };
//# sourceMappingURL=input.mjs.map
