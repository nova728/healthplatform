/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-dc33ef46.mjs';
import { defineComponent, ref, computed, watch, onMounted, setBlockTracking, createVNode, Teleport } from 'vue';
import TGradientIcon from './icon/gradient.mjs';
import SpinnerIcon from './icon/spinner.mjs';
import config from '../config.mjs';
import props from './props.mjs';
import { useTNodeJSX, useContent } from '../hooks/tnode.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import { getAttach, addClass, removeClass } from '../shared/dom.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../_common/js/loading/circle-adapter.mjs';
import '../_common/js/utils/set-style.mjs';
import '../_common/js/utils/helper.mjs';
import '../_chunks/dep-6dd2b317.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-67f4637f.mjs';
import '../_chunks/dep-4c2819a4.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-689db43b.mjs';
import '../_chunks/dep-791a4d06.mjs';
import '../_chunks/dep-5030b0d2.mjs';
import '../_chunks/dep-14bda5a6.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../_chunks/dep-ca4b618a.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';

var prefix = config.prefix;
var _Loading = defineComponent({
  name: "".concat(prefix, "-loading"),
  props: props,
  setup: function setup(props2) {
    var renderTNodeJSX = useTNodeJSX();
    var renderTNodeContent = useContent();
    var loadingClass = usePrefixClass("loading");
    var delayShowLoading = ref(false);
    var teleportElement = ref();
    var countDelay = function countDelay() {
      delayShowLoading.value = false;
      var timer = setTimeout(function () {
        delayShowLoading.value = true;
        clearTimeout(timer);
      }, props2.delay);
    };
    var realLoading = computed(function () {
      return (!props2.delay || delayShowLoading.value) && props2.loading;
    });
    watch(function () {
      return props2.loading;
    }, function (value) {
      if (value) {
        props2.delay && countDelay();
      }
    }, {
      immediate: true
    });
    var rootClass = computed(function () {
      return [loadingClass.value, _defineProperty({}, "".concat(loadingClass.value, "--vertical"), props2.layout === "vertical"), _defineProperty({}, "".concat(loadingClass.value, "--fullscreen"), props2.fullscreen), _defineProperty({}, "".concat(loadingClass.value, "--full"), !props2.fullscreen && !!props2.attach)];
    });
    var textClass = computed(function () {
      return ["".concat(loadingClass.value, "__text"), _defineProperty({}, "".concat(loadingClass.value, "__text--only"), !props2.indicator)];
    });
    var rootStyle = computed(function () {
      var style = [];
      if (props2.inheritColor) {
        style.push("color: inherit");
      }
      if (props2.size) {
        style.push("font-size: ".concat(props2.size, ";"));
      }
      return style.join(";");
    });
    var defaultIndicator = {
      circular: TGradientIcon,
      spinner: SpinnerIcon
    };
    onMounted(function () {
      if (props2.attach) {
        var attach = getAttach(props2.attach);
        if (!attach) {
          console.error("attach is not exist");
        } else {
          teleportElement.value = attach;
        }
      }
      if (props2.fullscreen) {
        teleportElement.value = getAttach("body");
      }
    });
    var dotsLoading = computed(function () {
      setBlockTracking(-1);
      var node = createVNode("div", {
        "class": "".concat(loadingClass.value, "__dots"),
        "style": {
          animationPlayState: props2.pause ? "paused" : "",
          animationDirection: props2.reverse ? "reverse" : "",
          animationDuration: "".concat(props2.duration, "ms"),
          width: props2.size,
          height: props2.size
        }
      }, [Array.from({
        length: 3
      }).map(function (val, i) {
        return createVNode("div", {
          "class": "".concat(loadingClass.value, "__dot"),
          "style": props2.duration ? "animation-duration: ".concat(props2.duration / 1e3, "s; animation-delay: ").concat(props2.duration * i / 3e3, "s") : ""
        }, null);
      })]);
      setBlockTracking(1);
      return node;
    });
    var defaultLoading = computed(function () {
      setBlockTracking(-1);
      var TIndicator = defaultIndicator[props2.theme || "circular"];
      var node = createVNode(TIndicator, {
        "style": {
          animationPlayState: props2.pause ? "paused" : "",
          animationDirection: props2.reverse ? "reverse" : "",
          animationDuration: "".concat(props2.duration, "ms"),
          width: props2.size,
          height: props2.size
        }
      }, null);
      setBlockTracking(1);
      return node;
    });
    watch(function () {
      return props2.loading;
    }, function (isLoading) {
      if (isLoading && props2.fullscreen) {
        countDelay();
        addClass(document.body, "".concat(loadingClass.value, "--lock"));
      } else {
        removeClass(document.body, "".concat(loadingClass.value, "--lock"));
      }
    });
    return function () {
      var indicator = renderTNodeJSX("indicator", {
        defaultNode: props2.theme === "dots" ? dotsLoading.value : defaultLoading.value
      });
      var text = renderTNodeJSX("text");
      var TNodeContent = renderTNodeContent("default", "content");
      if (props2.fullscreen || props2.attach) {
        if (!props2.loading) return null;
        return createVNode(Teleport, {
          "disabled": !props2.attach || !teleportElement.value,
          "to": teleportElement.value
        }, {
          default: function _default() {
            return [createVNode("div", {
              "class": rootClass.value,
              "style": rootStyle.value
            }, [realLoading.value && indicator, text && realLoading.value && createVNode("span", {
              "class": textClass.value
            }, [text]), TNodeContent])];
          }
        });
      }
      return createVNode("div", {
        "class": rootClass.value,
        "style": rootStyle.value
      }, [realLoading.value && indicator, text && realLoading.value && createVNode("span", {
        "class": textClass.value
      }, [text]), TNodeContent]);
    };
  }
});

export { _Loading as default };
//# sourceMappingURL=loading.mjs.map
