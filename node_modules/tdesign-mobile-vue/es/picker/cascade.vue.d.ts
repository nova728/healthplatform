import { PickerColumn, PickerValue } from './type';
declare const _default: import("vue").DefineComponent<{
    cancelBtn: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    columns: {
        type: import("vue").PropType<PickerColumn | PickerColumn[] | ((item: PickerValue[]) => PickerColumn[])>;
        default: () => PickerColumn | PickerColumn[] | ((item: PickerValue[]) => PickerColumn[]);
        required: boolean;
    };
    confirmBtn: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    header: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    option: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    renderLabel: {
        type: import("vue").PropType<(item: import("./type").PickerColumnItem) => string>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<PickerValue[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<PickerValue[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<PickerValue[]>;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: PickerValue[], context: {
        columns: import("./type").PickerContext[];
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(value: PickerValue[], context: {
        index: number[];
        e: MouseEvent;
        label: string[];
    }) => void>;
    onPick: import("vue").PropType<(value: PickerValue[], context: import("./type").PickerContext) => void>;
}, {
    name: string;
    finalDepth: import("vue").Ref<number>;
    finalSubOptionsRecord: import("vue").Ref<{}>;
    pickerProps: import("vue").ComputedRef<any>;
    generateCascadePickerColumns: (value: PickerValue[], options: any, depth: number, subOptionsRecord: Record<string, any>) => PickerColumn[];
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    cancelBtn: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    columns: {
        type: import("vue").PropType<PickerColumn | PickerColumn[] | ((item: PickerValue[]) => PickerColumn[])>;
        default: () => PickerColumn | PickerColumn[] | ((item: PickerValue[]) => PickerColumn[]);
        required: boolean;
    };
    confirmBtn: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    header: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    option: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    renderLabel: {
        type: import("vue").PropType<(item: import("./type").PickerColumnItem) => string>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: import("vue").PropType<PickerValue[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<PickerValue[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<PickerValue[]>;
    };
    onCancel: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: PickerValue[], context: {
        columns: import("./type").PickerContext[];
        e: MouseEvent;
    }) => void>;
    onConfirm: import("vue").PropType<(value: PickerValue[], context: {
        index: number[];
        e: MouseEvent;
        label: string[];
    }) => void>;
    onPick: import("vue").PropType<(value: PickerValue[], context: import("./type").PickerContext) => void>;
}>>, {
    title: string;
    cancelBtn: string | boolean;
    columns: PickerColumn | PickerColumn[] | ((item: PickerValue[]) => PickerColumn[]);
    confirmBtn: string | boolean;
    value: PickerValue[];
    modelValue: PickerValue[];
}, {}>;
export default _default;
