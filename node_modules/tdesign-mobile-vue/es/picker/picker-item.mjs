/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { defineComponent, ref, computed, onMounted, watch, createVNode, Fragment } from 'vue';
import config from '../config.mjs';
import Picker from './picker.class.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import '../_chunks/dep-6dd2b317.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-c3754251.mjs';
import '../_chunks/dep-dc33ef46.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../shared/dom.mjs';
import '../_chunks/dep-14bda5a6.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';

var prefix = config.prefix;
var PickerItem = defineComponent({
  name: "".concat(prefix, "-picker-item"),
  props: {
    options: {
      type: Array
    },
    value: {
      type: [String, Number],
      default: void 0
    },
    renderLabel: {
      type: Function,
      default: void 0
    },
    onPick: {
      type: Function,
      default: void 0
    }
  },
  emits: ["pick"],
  setup: function setup(props, context) {
    var pickerItemClass = usePrefixClass("picker-item");
    var picker = null;
    var root = ref();
    var getIndexByValue = function getIndexByValue(val) {
      var defaultIndex = 0;
      if (val !== void 0) {
        var _props$options;
        defaultIndex = (_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.findIndex(function (item) {
          return (item === null || item === void 0 ? void 0 : item.value) === val;
        });
      }
      return defaultIndex < 0 ? 0 : defaultIndex;
    };
    var className = computed(function () {
      return "".concat(pickerItemClass.value);
    });
    var itemClassName = computed(function () {
      return ["".concat(pickerItemClass.value, "__item")];
    });
    var setIndex = function setIndex(index) {
      if (picker) {
        picker.updateItems();
        picker.updateIndex(index, {
          isChange: false
        });
      }
    };
    var setValue = function setValue(value) {
      if (picker) {
        picker.updateItems();
        picker.updateIndex(getIndexByValue(value), {
          isChange: false
        });
      }
    };
    var setOptions = function setOptions() {
      var _picker;
      (_picker = picker) === null || _picker === void 0 || _picker.update();
    };
    var setUpdateItems = function setUpdateItems() {
      var _picker2;
      (_picker2 = picker) === null || _picker2 === void 0 || _picker2.updateItems();
    };
    context.expose({
      setIndex: setIndex,
      setValue: setValue,
      setOptions: setOptions,
      setUpdateItems: setUpdateItems
    });
    onMounted(function () {
      if (root.value) {
        picker = new Picker({
          el: root.value,
          defaultIndex: getIndexByValue(props.value) || 0,
          onChange: function onChange(index) {
            var _props$onPick;
            var curItem = props.options[index];
            var changeValue = {
              value: curItem.value,
              index: index
            };
            (_props$onPick = props.onPick) === null || _props$onPick === void 0 || _props$onPick.call(props, changeValue);
          }
        });
      }
    });
    watch(function () {
      return props.options;
    }, function () {
      var _picker3;
      (_picker3 = picker) === null || _picker3 === void 0 || _picker3.updateItems();
    }, {
      flush: "post",
      deep: true
    });
    return function () {
      return createVNode("ul", {
        "ref": root,
        "class": className.value
      }, [(props.options || []).map(function (option, index) {
        return createVNode("li", {
          "key": index,
          "class": itemClassName.value
        }, [context.slots.option ? context.slots.option(option, index) : createVNode(Fragment, null, [props.renderLabel ? props.renderLabel(option) : option === null || option === void 0 ? void 0 : option.label])]);
      })]);
    };
  }
});

export { PickerItem as default };
//# sourceMappingURL=picker-item.mjs.map
