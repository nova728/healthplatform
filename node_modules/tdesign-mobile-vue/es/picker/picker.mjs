/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _slicedToArray } from '../_chunks/dep-4c2819a4.mjs';
import { defineComponent, toRefs, ref, computed, watch, createVNode, resolveComponent } from 'vue';
import { i as isString_1 } from '../_chunks/dep-ab2bdb8f.mjs';
import { i as isBoolean_1 } from '../_chunks/dep-60e514fa.mjs';
import { i as isFunction_1 } from '../_chunks/dep-14bda5a6.mjs';
import config from '../config.mjs';
import PickerProps from './props.mjs';
import '../shared/index.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import PickerItem from './picker-item.mjs';
import { getPickerColumns } from './utils.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import { u as useConfig } from '../_chunks/dep-ceb2af97.mjs';
import { useVModel } from '../shared/useVModel/index.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../shared/functions.mjs';
import '../shared/util.mjs';
import '../_chunks/dep-5030b0d2.mjs';
import '../shared/component.mjs';
import '../shared/constants.mjs';
import '../shared/render.mjs';
import '../_chunks/dep-ca4b618a.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../shared/dom.mjs';
import '../shared/render-tnode.mjs';
import '../shared/useToggle/index.mjs';
import '../shared/useCountDown/index.mjs';
import '../_chunks/dep-1f2e940b.mjs';
import '@vueuse/core';
import '../shared/useCountDown/utils.mjs';
import '../shared/useDefault/index.mjs';
import '../shared/useChildSlots/index.mjs';
import '../_chunks/dep-6dd2b317.mjs';
import '../shared/useTouch/index.mjs';
import '../shared/useScrollParent/index.mjs';
import '../shared/useExpose/index.mjs';
import '../shared/useTest/index.mjs';
import '../_chunks/dep-dc33ef46.mjs';
import '../shared/useClickAway/index.mjs';
import '../shared/useGesture/index.mjs';
import '@use-gesture/vanilla';
import '../shared/hover.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import './picker.class.mjs';
import '../_chunks/dep-c3754251.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';

var prefix = config.prefix;
var getIndexFromColumns = function getIndexFromColumns(column, value) {
  if (!value) return 0;
  return column === null || column === void 0 ? void 0 : column.findIndex(function (item) {
    return (item === null || item === void 0 ? void 0 : item.value) === value;
  });
};
var _Picker = defineComponent({
  name: "".concat(prefix, "-picker"),
  components: {
    PickerItem: PickerItem
  },
  props: PickerProps,
  emits: ["change", "cancel", "pick", "update:modelValue", "update:value"],
  setup: function setup(props, _ref) {
    var _pickerValue$value;
    var slots = _ref.slots;
    var pickerClass = usePrefixClass("picker");
    var _useConfig = useConfig("picker"),
      globalConfig = _useConfig.globalConfig;
    var renderTNodeJSX = useTNodeJSX();
    var _toRefs = toRefs(props),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, props.defaultValue, props.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      _useVModel2$ = _useVModel2[0],
      pickerValue = _useVModel2$ === void 0 ? ref([]) : _useVModel2$,
      setPickerValue = _useVModel2[1];
    var getDefaultText = function getDefaultText(prop, defaultText) {
      if (isString_1(prop)) return prop;
      if (isBoolean_1(prop) && prop) return defaultText;
      return "";
    };
    var confirmButtonText = computed(function () {
      return getDefaultText(props.confirmBtn, globalConfig.value.confirm);
    });
    var cancelButtonText = computed(function () {
      return getDefaultText(props.cancelBtn, globalConfig.value.cancel);
    });
    var curValueArray = ref(((_pickerValue$value = pickerValue.value) === null || _pickerValue$value === void 0 ? void 0 : _pickerValue$value.map(function (item) {
      return item;
    })) || []);
    var realColumns = computed(function () {
      if (isFunction_1(props.columns)) {
        var _columns = props.columns(curValueArray.value);
        return getPickerColumns(_columns);
      }
      return getPickerColumns(props.columns);
    });
    var curIndexArray = realColumns.value.map(function (item, index) {
      var _pickerValue$value2;
      return getIndexFromColumns(item, (_pickerValue$value2 = pickerValue.value) === null || _pickerValue$value2 === void 0 ? void 0 : _pickerValue$value2[index]);
    });
    var pickerItemInstanceArray = ref([]);
    var setPickerItemRef = function setPickerItemRef(item, index) {
      pickerItemInstanceArray.value[index] = item;
    };
    var handleConfirm = function handleConfirm(e) {
      var _props$onConfirm;
      var target = realColumns.value.map(function (item, index) {
        return item[curIndexArray[index]];
      });
      var label = target.map(function (item) {
        return item.label;
      });
      var value2 = target.map(function (item) {
        return item.value;
      });
      setPickerValue(value2);
      (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 || _props$onConfirm.call(props, value2, {
        index: curIndexArray,
        label: label,
        e: e
      });
    };
    var handleCancel = function handleCancel(e) {
      var _props$onCancel;
      pickerItemInstanceArray.value.forEach(function (item, index) {
        item === null || item === void 0 || item.setIndex(curIndexArray[index]);
      });
      (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 || _props$onCancel.call(props, {
        e: e
      });
    };
    var handlePick = function handlePick(context, column) {
      var _realColumns$value, _props$onPick;
      var index = context.index;
      curIndexArray[column] = index;
      curValueArray.value[column] = (_realColumns$value = realColumns.value) === null || _realColumns$value === void 0 || (_realColumns$value = _realColumns$value[column][index]) === null || _realColumns$value === void 0 ? void 0 : _realColumns$value.value;
      (_props$onPick = props.onPick) === null || _props$onPick === void 0 || _props$onPick.call(props, curValueArray.value, {
        index: index,
        column: column
      });
    };
    watch(pickerValue, function () {
      curValueArray.value = pickerValue.value.map(function (item) {
        return item;
      });
    });
    watch([realColumns, curValueArray], function () {
      realColumns.value.forEach(function (col, idx) {
        var _pickerItemInstanceAr;
        var index = col.findIndex(function (item) {
          return item.value === curValueArray.value[idx];
        });
        curIndexArray[idx] = index > -1 ? index : 0;
        (_pickerItemInstanceAr = pickerItemInstanceArray.value[idx]) === null || _pickerItemInstanceAr === void 0 || _pickerItemInstanceAr.setIndex(curIndexArray[idx]);
      });
    });
    return function () {
      var header = renderTNodeJSX("header");
      return createVNode("div", {
        "class": "".concat(pickerClass.value)
      }, [createVNode("div", {
        "class": "".concat(pickerClass.value, "__toolbar")
      }, [cancelButtonText.value && createVNode("div", {
        "class": "".concat(pickerClass.value, "__cancel"),
        "onClick": handleCancel
      }, [cancelButtonText.value]), createVNode("div", {
        "class": "".concat(pickerClass.value, "__title")
      }, [props.title]), confirmButtonText.value && createVNode("div", {
        "class": "".concat(pickerClass.value, "__confirm"),
        "onClick": handleConfirm
      }, [confirmButtonText.value])]), header, createVNode("div", {
        "class": "".concat(pickerClass.value, "__main")
      }, [realColumns.value.map(function (item, index) {
        var _pickerValue$value3;
        return createVNode("div", {
          "key": index,
          "class": "".concat(pickerClass.value, "-item__group")
        }, [createVNode(resolveComponent("picker-item"), {
          "ref": function ref(item2) {
            return setPickerItemRef(item2, index);
          },
          "options": item,
          "value": (_pickerValue$value3 = pickerValue.value) === null || _pickerValue$value3 === void 0 ? void 0 : _pickerValue$value3[index],
          "render-label": props.renderLabel,
          "onPick": function onPick($event) {
            return handlePick($event, index);
          }
        }, {
          option: slots.option || props.option
        })]);
      }), createVNode("div", {
        "class": "".concat(pickerClass.value, "__mask ").concat(pickerClass.value, "__mask--top")
      }, null), createVNode("div", {
        "class": "".concat(pickerClass.value, "__mask ").concat(pickerClass.value, "__mask--bottom")
      }, null), createVNode("div", {
        "class": "".concat(pickerClass.value, "__indicator")
      }, null)])]);
    };
  }
});

export { _Picker as default };
//# sourceMappingURL=picker.mjs.map
