import { TdPickerProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    cancelBtn: {
        type: PropType<string | boolean>;
        default: boolean;
    };
    columns: {
        type: PropType<import("./type").PickerColumn | import("./type").PickerColumn[] | ((item: import("./type").PickerValue[]) => import("./type").PickerColumn[])>;
        default: () => TdPickerProps['columns'];
        required: boolean;
    };
    confirmBtn: {
        type: PropType<string | boolean>;
        default: boolean;
    };
    header: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    option: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    renderLabel: {
        type: PropType<(item: import("./type").PickerColumnItem) => string>;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    value: {
        type: PropType<import("./type").PickerValue[]>;
        default: any;
    };
    modelValue: {
        type: PropType<import("./type").PickerValue[]>;
        default: any;
    };
    defaultValue: {
        type: PropType<import("./type").PickerValue[]>;
    };
    onCancel: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").PickerValue[], context: {
        columns: import("./type").PickerContext[];
        e: MouseEvent;
    }) => void>;
    onConfirm: PropType<(value: import("./type").PickerValue[], context: {
        index: number[];
        e: MouseEvent;
        label: string[];
    }) => void>;
    onPick: PropType<(value: import("./type").PickerValue[], context: import("./type").PickerContext) => void>;
};
export default _default;
