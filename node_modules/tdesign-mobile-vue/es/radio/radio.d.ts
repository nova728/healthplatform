declare const _default: import("vue").DefineComponent<{
    allowUncheck: BooleanConstructor;
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderless: {
        type: BooleanConstructor;
        default: any;
    };
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    contentDisabled: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    icon: {
        type: import("vue").PropType<"circle" | "line" | "none" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    maxContentRow: {
        type: NumberConstructor;
        default: number;
    };
    maxLabelRow: {
        type: NumberConstructor;
        default: number;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placement: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    value: {
        type: import("vue").PropType<import("./type").RadioValue>;
        default: any;
    };
    onChange: import("vue").PropType<(checked: boolean, context: {
        e: Event;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "update:checked")[], "update:modelValue" | "change" | "update:checked", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    allowUncheck: BooleanConstructor;
    block: {
        type: BooleanConstructor;
        default: boolean;
    };
    borderless: {
        type: BooleanConstructor;
        default: any;
    };
    checked: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultChecked: BooleanConstructor;
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    contentDisabled: BooleanConstructor;
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    icon: {
        type: import("vue").PropType<"circle" | "line" | "none" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[]>;
        default: string;
    };
    label: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    maxContentRow: {
        type: NumberConstructor;
        default: number;
    };
    maxLabelRow: {
        type: NumberConstructor;
        default: number;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placement: {
        type: import("vue").PropType<"left" | "right">;
        default: "left" | "right";
        validator(val: "left" | "right"): boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    value: {
        type: import("vue").PropType<import("./type").RadioValue>;
        default: any;
    };
    onChange: import("vue").PropType<(checked: boolean, context: {
        e: Event;
    }) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:checked"?: (...args: any[]) => any;
}, {
    readonly: boolean;
    value: import("./type").RadioValue;
    modelValue: boolean;
    name: string;
    disabled: boolean;
    block: boolean;
    icon: "circle" | "line" | "none" | "dot" | ((h: typeof import("vue").h) => import("..").SlotReturnValue)[];
    placement: "left" | "right";
    allowUncheck: boolean;
    borderless: boolean;
    checked: boolean;
    defaultChecked: boolean;
    contentDisabled: boolean;
    maxContentRow: number;
    maxLabelRow: number;
}, {}>;
export default _default;
