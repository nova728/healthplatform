/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-dc33ef46.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-4c2819a4.mjs';
import { defineComponent, ref, computed, nextTick, createVNode } from 'vue';
import { SearchIcon, CloseCircleFilledIcon } from 'tdesign-icons-vue-next';
import { useFocus } from '@vueuse/core';
import config from '../config.mjs';
import { preventDefault } from '../shared/dom.mjs';
import searchProps from './props.mjs';
import { useDefault } from '../shared/useDefault/index.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import { useTNodeJSX } from '../hooks/tnode.mjs';
import { ENTER_REG } from '../_common/js/common.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-14bda5a6.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-ca4b618a.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';

var prefix = config.prefix;
var _Search = defineComponent({
  name: "".concat(prefix, "-search"),
  props: searchProps,
  setup: function setup(props, context) {
    var renderTNodeJSX = useTNodeJSX();
    var searchClass = usePrefixClass("search");
    var inputRef = ref();
    var _useFocus = useFocus(inputRef, {
        initialValue: props.focus
      }),
      focused = _useFocus.focused;
    var _useDefault = useDefault(props, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      searchValue = _useDefault2[0];
    var boxClasses = computed(function () {
      return ["".concat(searchClass.value, "__input-box"), "".concat(searchClass.value, "__input-box--").concat(props.shape), _defineProperty({}, "".concat(prefix, "-is-focused"), focused.value)];
    });
    var inputClasses = computed(function () {
      return ["".concat(prefix, "-input__keyword"), _defineProperty({}, "".concat(searchClass.value, "--center"), props.center)];
    });
    var setInputValue = function setInputValue(v) {
      var input = inputRef.value;
      var sV = String(v);
      if (!input) {
        return;
      }
      if (input.value !== sV) {
        input.value = sV;
      }
    };
    var inputValueChangeHandle = function inputValueChangeHandle(e) {
      var value = e.target.value;
      searchValue.value = value;
      nextTick(function () {
        return setInputValue(searchValue.value);
      });
    };
    var handleInput = function handleInput(e) {
      if (e instanceof InputEvent) {
        var checkInputType = e.inputType && e.inputType === "insertCompositionText";
        if (e.isComposing || checkInputType) return;
      }
      inputValueChangeHandle(e);
    };
    var handleClear = function handleClear(e) {
      var _props$onClear;
      searchValue.value = "";
      focused.value = true;
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 || _props$onClear.call(props, {
        e: e
      });
    };
    var handleFocus = function handleFocus(e) {
      var _props$onFocus;
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 || _props$onFocus.call(props, {
        value: searchValue.value,
        e: e
      });
    };
    var handleBlur = function handleBlur(e) {
      var _props$onBlur;
      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 || _props$onBlur.call(props, {
        value: searchValue.value,
        e: e
      });
    };
    var handleCompositionend = function handleCompositionend(e) {
      inputValueChangeHandle(e);
    };
    var handleAction = function handleAction(e) {
      var _props$onActionClick;
      (_props$onActionClick = props.onActionClick) === null || _props$onActionClick === void 0 || _props$onActionClick.call(props, {
        e: e
      });
    };
    var handleSearch = function handleSearch(e) {
      if (ENTER_REG.test(e.code) || ENTER_REG.test(e.key)) {
        var _props$onSubmit;
        preventDefault(e, false);
        (_props$onSubmit = props.onSubmit) === null || _props$onSubmit === void 0 || _props$onSubmit.call(props, {
          value: searchValue.value,
          e: e
        });
      }
    };
    return function () {
      var readerLeftIcon = function readerLeftIcon() {
        var leftIcon = renderTNodeJSX("leftIcon");
        if (leftIcon === "search") {
          return createVNode(SearchIcon, {
            "size": "24px"
          }, null);
        }
        return renderTNodeJSX("leftIcon");
      };
      var readerClear = function readerClear() {
        if (props.clearable && searchValue.value) {
          return createVNode("div", {
            "class": "".concat(searchClass.value, "__clear"),
            "onClick": handleClear
          }, [createVNode(CloseCircleFilledIcon, {
            "size": "24"
          }, null)]);
        }
        return null;
      };
      var readerAction = function readerAction() {
        var action = renderTNodeJSX("action");
        if (action && searchValue.value) {
          return createVNode("div", {
            "class": "".concat(searchClass.value, "__search-action"),
            "onClick": handleAction
          }, [action]);
        }
        return null;
      };
      return createVNode("div", {
        "class": "".concat(searchClass.value)
      }, [createVNode("div", {
        "class": boxClasses.value
      }, [readerLeftIcon(), createVNode("input", {
        "ref": inputRef,
        "value": searchValue.value,
        "type": "search",
        "class": inputClasses.value,
        "autofocus": props.focus,
        "placeholder": props.placeholder,
        "readonly": props.readonly,
        "disabled": props.disabled,
        "onKeypress": handleSearch,
        "onFocus": handleFocus,
        "onBlur": handleBlur,
        "onInput": handleInput,
        "onCompositionend": handleCompositionend
      }, null), readerClear()]), readerAction()]);
    };
  }
});

export { _Search as default };
//# sourceMappingURL=search.mjs.map
