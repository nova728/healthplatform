/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _toConsumableArray } from '../../_chunks/dep-6dd2b317.mjs';
import { unrefElement, useEventListener } from '@vueuse/core';
import { i as isArray_1 } from '../../_chunks/dep-ff449344.mjs';
import { isBrowser } from '../util.mjs';
import '../../_chunks/dep-4b5beaed.mjs';
import '../../_chunks/dep-57a75b98.mjs';
import '../../_chunks/dep-4c2819a4.mjs';
import '../../_chunks/dep-5030b0d2.mjs';
import '../../_chunks/dep-c6268b4a.mjs';
import '../../_chunks/dep-b617aa7d.mjs';
import '../../_chunks/dep-06d482c6.mjs';
import '../../config.mjs';

function useClickAway(target, fn) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!isBrowser) return;
  var _options$eventName = options.eventName,
    eventName = _options$eventName === void 0 ? "touchstart" : _options$eventName,
    _options$capture = options.capture,
    capture = _options$capture === void 0 ? true : _options$capture,
    _options$ignore = options.ignore,
    ignore = _options$ignore === void 0 ? [] : _options$ignore,
    _options$detectIframe = options.detectIframe,
    detectIframe = _options$detectIframe === void 0 ? false : _options$detectIframe;
  var listenerOptions = {
    passive: true,
    capture: capture
  };
  var checkElInEvtTarget = function checkElInEvtTarget(el, event) {
    return el && (event.target === el || event.composedPath().includes(el));
  };
  var shouldIgnore = function shouldIgnore(event) {
    return ignore.some(function (ignoreTarget) {
      return checkElInEvtTarget(unrefElement(ignoreTarget), event);
    });
  };
  var eventHandler = function eventHandler(event) {
    var targets = isArray_1(target) ? _toConsumableArray(target) : [target];
    var shouldTrigger = targets.every(function (targetItem) {
      return !checkElInEvtTarget(unrefElement(targetItem), event);
    });
    if (!shouldTrigger) return;
    shouldTrigger = !shouldIgnore(event);
    if (!shouldTrigger) return;
    fn(event);
  };
  var cleanup = [useEventListener(window, eventName, eventHandler, listenerOptions)];
  if (detectIframe) {
    cleanup.push(useEventListener(window, "blur", function (event) {
      setTimeout(function () {
        var targets = isArray_1(target) ? _toConsumableArray(target) : [target];
        if (targets.every(function (targetItem) {
          var _window$document$acti;
          var el = unrefElement(targetItem);
          return ((_window$document$acti = window.document.activeElement) === null || _window$document$acti === void 0 ? void 0 : _window$document$acti.tagName) === "IFRAME" && !(el !== null && el !== void 0 && el.contains(window.document.activeElement));
        })) {
          fn(event);
        }
      }, 0);
    }));
  }
  return function () {
    return cleanup.forEach(function (clean) {
      return clean();
    });
  };
}

export { useClickAway };
//# sourceMappingURL=index.mjs.map
