/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _toConsumableArray } from '../_chunks/dep-6dd2b317.mjs';
import { _ as _defineProperty } from '../_chunks/dep-dc33ef46.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-4c2819a4.mjs';
import { defineComponent, ref, reactive, toRefs, computed, watch, onMounted, createVNode } from 'vue';
import { i as isFunction_1 } from '../_chunks/dep-14bda5a6.mjs';
import { useIntersectionObserver } from '@vueuse/core';
import config from '../config.mjs';
import props from './props.mjs';
import { useVModel } from '../shared/useVModel/index.mjs';
import { trimValue, trimSingleValue } from './tool.mjs';
import { useFormDisabled } from '../form/hooks.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-60e514fa.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';

var prefix = config.prefix;
var _Slider = defineComponent({
  name: "".concat(prefix, "-slider"),
  props: props,
  setup: function setup(props2) {
    var sliderClass = usePrefixClass("slider");
    var isDisabled = useFormDisabled();
    var sliderLine = ref();
    var leftDot = ref();
    var rightDot = ref();
    var state = reactive({
      initialLeft: 0,
      initialRight: 0,
      maxRange: 0,
      lineLeft: 0,
      lineRight: 0,
      dotTopValue: [0, 0],
      blockSize: 20,
      isScale: false,
      scaleArray: [],
      scaleTextArray: []
    });
    var defaultValue = props2.defaultValue || props2.min;
    var _toRefs = toRefs(props2),
      value = _toRefs.value,
      modelValue = _toRefs.modelValue;
    var _useVModel = useVModel(value, modelValue, defaultValue, props2.onChange),
      _useVModel2 = _slicedToArray(_useVModel, 2),
      innerValue = _useVModel2[0],
      setInnerValue = _useVModel2[1];
    var scope = computed(function () {
      return Number(props2.max) - Number(props2.min);
    });
    watch(function () {
      return innerValue.value;
    }, function (val) {
      if (props2.range) {
        var left = state.maxRange * (val[0] - props2.min) / scope.value;
        var right = state.maxRange * (props2.max - val[1]) / scope.value;
        setLineStyle(left, right);
      } else {
        setSingleBarWidth(val);
      }
    });
    var rootRef = ref();
    var classes = computed(function () {
      return ["".concat(sliderClass.value), _defineProperty(_defineProperty(_defineProperty({}, "".concat(sliderClass.value, "--top"), props2.label || state.scaleTextArray.length), "".concat(sliderClass.value, "--disabled"), isDisabled.value), "".concat(sliderClass.value, "--range"), props2.range)];
    });
    var sliderLineClasses = computed(function () {
      return ["".concat(sliderClass.value, "__bar"), "".concat(sliderClass.value, "__bar--").concat(props2.theme), _defineProperty(_defineProperty({}, "".concat(sliderClass.value, "__bar--disabled"), isDisabled.value), "".concat(sliderClass.value, "__bar--marks"), state.isScale && props2.theme === "capsule")];
    });
    var precision = computed(function () {
      var precisions = [props2.min, props2.max, props2.step].map(function (item) {
        var decimalArr = "".concat(item).split(".");
        return decimalArr[1] ? decimalArr[1].length : 0;
      });
      return Math.max.apply(null, precisions);
    });
    var lineBarWidth = ref();
    var setSingleBarWidth = function setSingleBarWidth(value2) {
      var halfBlock = props2.theme === "capsule" ? Number(state.blockSize) / 2 : 0;
      var percentage = (Number(value2) - props2.min) / scope.value;
      lineBarWidth.value = percentage * state.maxRange + halfBlock;
    };
    var setLineStyle = function setLineStyle(left, right) {
      var halfBlock = props2.theme === "capsule" ? Number(state.blockSize) / 2 : 0;
      var _innerValue$value = _slicedToArray(innerValue.value, 2),
        a = _innerValue$value[0],
        b = _innerValue$value[1];
      var cut = function cut(v) {
        return parseInt(v, 10);
      };
      state.dotTopValue = [a, b];
      if (left + right <= state.maxRange) {
        state.lineLeft = cut(left + halfBlock);
        state.lineRight = cut(right + halfBlock);
      } else {
        state.lineLeft = cut(state.maxRange + halfBlock - right);
        state.lineRight = cut(state.maxRange - left + halfBlock * 1.5);
      }
    };
    var getInitialStyle = function getInitialStyle() {
      var _sliderLine$value;
      var line = (_sliderLine$value = sliderLine.value) === null || _sliderLine$value === void 0 ? void 0 : _sliderLine$value.getBoundingClientRect();
      var halfBlock = Number(state.blockSize) / 2;
      var maxRange = line.right - line.left;
      state.maxRange = maxRange;
      state.initialLeft = line.left;
      state.initialRight = line.right;
      if (props2.theme === "capsule") {
        state.maxRange = maxRange - Number(state.blockSize) - 6;
        state.initialLeft -= halfBlock;
        state.initialRight -= halfBlock;
      }
    };
    var onTouchEnd = function onTouchEnd() {};
    var onSingleDotMove = function onSingleDotMove(e) {
      if (isDisabled.value) return;
      var _e$changedTouches = _slicedToArray(e.changedTouches, 1),
        pageX = _e$changedTouches[0].pageX;
      var value2 = convertPosToValue(pageX - state.initialLeft);
      changeValue(calcByStep(value2));
    };
    var changeValue = function changeValue(value2) {
      setInnerValue(trimValue(value2, props2));
    };
    var calcByStep = function calcByStep(value2) {
      if (props2.step < 0 || props2.step > scope.value) return Number(parseFloat("".concat(value2)).toFixed(precision.value));
      var closestStep = trimSingleValue(Math.round(value2 / props2.step) * props2.step, props2.min, props2.max);
      return Number(parseFloat("".concat(closestStep)).toFixed(precision.value));
    };
    var getValue = function getValue(label, value2) {
      var REGEXP = /[$][{value}]{7}/;
      if (isFunction_1(label)) return label(value2);
      if (label && label === "true") return value2;
      if (REGEXP.test(label)) return label.replace(REGEXP, value2);
    };
    var handleMask = function handleMask(marks) {
      var calcPos = function calcPos(arr) {
        var margin = props2.theme === "capsule" ? state.blockSize / 2 : 0;
        return arr.map(function (item) {
          return {
            val: item,
            left: Math.round((item - props2.min) / scope.value * state.maxRange) + margin
          };
        });
      };
      if (marks !== null && marks !== void 0 && marks.length && Array.isArray(marks)) {
        state.isScale = true;
        state.scaleArray = calcPos(marks);
        state.scaleTextArray = [];
      }
      if (Object.prototype.toString.call(marks) === "[object Object]") {
        var scaleArray = Object.keys(marks).map(function (item) {
          return Number(item);
        });
        var scaleTextArray = scaleArray.map(function (item) {
          return marks[item];
        });
        state.isScale = scaleArray.length > 0;
        state.scaleArray = calcPos(scaleArray);
        state.scaleTextArray = scaleTextArray;
      }
    };
    var convertPosToValue = function convertPosToValue(posValue) {
      var isLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var raw = isLeft ? posValue / state.maxRange * scope.value + props2.min : props2.max - posValue / state.maxRange * scope.value;
      return raw;
    };
    var onTouchMoveLeft = function onTouchMoveLeft(e) {
      if (isDisabled.value) return;
      var _e$changedTouches2 = _slicedToArray(e.changedTouches, 1),
        pageX = _e$changedTouches2[0].pageX;
      var currentLeft = pageX - state.initialLeft;
      var newData = _toConsumableArray(innerValue.value);
      var leftValue = convertPosToValue(currentLeft);
      newData[0] = calcByStep(leftValue);
      changeValue(newData);
    };
    var onTouchMoveRight = function onTouchMoveRight(e) {
      if (isDisabled.value) return;
      var _e$changedTouches3 = _slicedToArray(e.changedTouches, 1),
        pageX = _e$changedTouches3[0].pageX;
      var currentRight = -(pageX - state.initialRight);
      var newData = _toConsumableArray(innerValue.value);
      var rightValue = convertPosToValue(currentRight, false);
      newData[1] = calcByStep(rightValue);
      changeValue(newData);
    };
    var handleSingleClick = function handleSingleClick(e) {
      e.stopPropagation();
      if (isDisabled.value) return;
      if (!sliderLine.value) return;
      var currentLeft = e.clientX - state.initialLeft;
      var value2 = convertPosToValue(currentLeft);
      changeValue(calcByStep(value2));
    };
    var handleRangeClick = function handleRangeClick(e) {
      var _leftDot$value, _rightDot$value;
      e.stopPropagation();
      if (isDisabled.value) return;
      var halfBlock = props2.theme === "capsule" ? Number(state.blockSize) / 2 : 0;
      var currentLeft = e.clientX - state.initialLeft;
      if (currentLeft < 0 || currentLeft > state.maxRange + Number(state.blockSize)) return;
      var leftDotValue = (_leftDot$value = leftDot.value) === null || _leftDot$value === void 0 ? void 0 : _leftDot$value.getBoundingClientRect();
      var rightDotValue = (_rightDot$value = rightDot.value) === null || _rightDot$value === void 0 ? void 0 : _rightDot$value.getBoundingClientRect();
      var distanceLeft = Math.abs(e.clientX - leftDotValue.left - halfBlock);
      var distanceRight = Math.abs(rightDotValue.left - e.clientX + halfBlock);
      var isMoveLeft = distanceLeft < distanceRight;
      if (isMoveLeft) {
        var _innerValue$value2;
        var left = e.clientX - state.initialLeft;
        var leftValue = convertPosToValue(left);
        changeValue([calcByStep(leftValue), (_innerValue$value2 = innerValue.value) === null || _innerValue$value2 === void 0 ? void 0 : _innerValue$value2[1]]);
      } else {
        var _innerValue$value3;
        var right = -(e.clientX - state.initialRight);
        var rightValue = convertPosToValue(right, false);
        changeValue([(_innerValue$value3 = innerValue.value) === null || _innerValue$value3 === void 0 ? void 0 : _innerValue$value3[0], calcByStep(rightValue)]);
      }
    };
    onMounted(function () {
      init();
    });
    var _useIntersectionObser = useIntersectionObserver(rootRef, function (_ref3, observerElement) {
        var _ref4 = _slicedToArray(_ref3, 1),
          isIntersecting = _ref4[0].isIntersecting;
        if (isIntersecting) {
          stop();
          init();
        }
      }),
      stop = _useIntersectionObser.stop;
    var init = function init() {
      getInitialStyle();
      if (props2.range) {
        var _innerValue$value$, _innerValue$value4;
        var left = state.maxRange * ((_innerValue$value$ = (_innerValue$value4 = innerValue.value) === null || _innerValue$value4 === void 0 ? void 0 : _innerValue$value4[0]) !== null && _innerValue$value$ !== void 0 ? _innerValue$value$ : 0 - props2.min) / scope.value;
        var right = state.maxRange * (props2.max - innerValue.value[1]) / scope.value;
        setLineStyle(left, right);
      } else {
        setSingleBarWidth(innerValue.value);
      }
      if (props2.marks) {
        handleMask(props2.marks);
      }
    };
    var readerMinText = function readerMinText() {
      if (!props2.showExtremeValue) {
        return null;
      }
      var textClass = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(sliderClass.value, "__value"), !props2.range), "".concat(sliderClass.value, "__value--min"), !props2.range), "".concat(sliderClass.value, "__range-extreme"), props2.range), "".concat(sliderClass.value, "__range-extreme--min"), props2.range);
      if (props2.range) {
        return createVNode("text", {
          "class": textClass
        }, [props2.min]);
      }
      return createVNode("text", {
        "class": textClass
      }, [props2.label ? getValue(props2.label, props2.min) : props2.min]);
    };
    var readerMaxText = function readerMaxText() {
      if (!props2.showExtremeValue) {
        return null;
      }
      var textClass = ["".concat(sliderClass.value, "__value"), "".concat(sliderClass.value, "__value--max")];
      if (props2.range) {
        return createVNode("text", {
          "class": textClass
        }, [props2.max]);
      }
      return createVNode("text", {
        "class": textClass
      }, [props2.label ? getValue(props2.label, props2.max) : props2.max]);
    };
    var readerScale = function readerScale() {
      if (!state.isScale) {
        return null;
      }
      return state.scaleArray.map(function (item, index) {
        return createVNode("div", {
          "style": "left: ".concat(item.left, "px; transform: translateX(-50%);"),
          "class": ["".concat(sliderClass.value, "__scale-item"), "".concat(sliderClass.value, "__scale-item--").concat(props2.theme), _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(sliderClass.value, "__scale-item--active"), !props2.range && Number(innerValue.value) >= item.val), "".concat(sliderClass.value, "__scale-item--active"), props2.range && state.dotTopValue[1] >= item.val && item.val >= state.dotTopValue[0]), "".concat(sliderClass.value, "__scale-item--disabled"), isDisabled.value), "".concat(sliderClass.value, "__scale-item--hidden"), (index === 0 || index === state.scaleArray.length - 1) && props2.theme === "capsule" || innerValue.value === item.val)]
        }, [state.scaleTextArray.length && createVNode("div", {
          "class": ["".concat(sliderClass.value, "__scale-desc"), "".concat(sliderClass.value, "__scale-desc--").concat(props2.theme)]
        }, [state.scaleTextArray[index]])]);
      });
    };
    var readerLineSingle = function readerLineSingle() {
      return createVNode("div", {
        "class": ["".concat(sliderClass.value, "__line"), "".concat(sliderClass.value, "__line--").concat(props2.theme), "".concat(sliderClass.value, "__line--single"), _defineProperty({}, "".concat(sliderClass.value, "__line--disabled"), isDisabled.value)],
        "style": "width: ".concat(lineBarWidth.value, "px")
      }, [createVNode("div", {
        "ref": "singleDot",
        "class": "".concat(sliderClass.value, "__dot"),
        "onTouchmove": onSingleDotMove,
        "onTouchend": onTouchEnd,
        "onTouchcancel": onTouchEnd
      }, [props2.label && createVNode("div", {
        "class": ["".concat(sliderClass.value, "__dot-value"), _defineProperty({}, "".concat(sliderClass.value, "__dot-value--sr-only"), !props2.label)]
      }, [getValue(props2.label, innerValue.value) || innerValue.value]), createVNode("div", {
        "class": "".concat(sliderClass.value, "__dot-slider")
      }, null)])]);
    };
    var readerLineRange = function readerLineRange() {
      return createVNode("div", {
        "class": ["".concat(sliderClass.value, "__line"), "".concat(sliderClass.value, "__line--").concat(props2.theme), _defineProperty({}, "".concat(sliderClass.value, "__line--disabled"), isDisabled.value)],
        "style": "left: ".concat(state.lineLeft, "px; right: ").concat(state.lineRight, "px")
      }, [createVNode("div", {
        "ref": leftDot,
        "class": ["".concat(sliderClass.value, "__dot"), "".concat(sliderClass.value, "__dot--left")],
        "onTouchmove": onTouchMoveLeft,
        "onTouchend": onTouchEnd,
        "onTouchcancel": onTouchEnd
      }, [props2.label && createVNode("div", {
        "class": ["".concat(sliderClass.value, "__dot-value"), _defineProperty({}, "".concat(sliderClass.value, "__dot-value--sr-only"), !props2.label)]
      }, [getValue(props2.label, state.dotTopValue[0]) || state.dotTopValue[0]]), createVNode("div", {
        "class": "".concat(sliderClass.value, "__dot-slider")
      }, null)]), createVNode("div", {
        "ref": rightDot,
        "class": ["".concat(sliderClass.value, "__dot"), "".concat(sliderClass.value, "__dot--right")],
        "onTouchmove": onTouchMoveRight,
        "onTouchend": onTouchEnd,
        "onTouchcancel": onTouchEnd
      }, [props2.label && createVNode("div", {
        "class": ["".concat(sliderClass.value, "__dot-value"), _defineProperty({}, "".concat(sliderClass.value, "__dot-value--sr-only"), !props2.label)]
      }, [getValue(props2.label, state.dotTopValue[1]) || state.dotTopValue[1]]), createVNode("div", {
        "class": "".concat(sliderClass.value, "__dot-slider")
      }, null)])]);
    };
    return function () {
      return createVNode("div", {
        "ref": rootRef,
        "class": classes.value
      }, [readerMinText(), createVNode("div", {
        "ref": sliderLine,
        "class": sliderLineClasses.value,
        "onClick": props2.range ? handleRangeClick : handleSingleClick
      }, [readerScale(), props2.range ? readerLineRange() : readerLineSingle()]), readerMaxText()]);
    };
  }
});

export { _Slider as default };
//# sourceMappingURL=slider.mjs.map
