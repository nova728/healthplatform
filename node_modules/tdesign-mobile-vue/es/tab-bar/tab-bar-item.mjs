/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-dc33ef46.mjs';
import { isVNode, defineComponent, inject, ref, computed, watch, createVNode, resolveComponent } from 'vue';
import { ViewListIcon } from 'tdesign-icons-vue-next';
import { Badge } from '../badge/index.mjs';
import config from '../config.mjs';
import { initName } from './useTabBar.mjs';
import TabBarItemProps from './tab-bar-item-props.mjs';
import { useTNodeJSX, useContent } from '../hooks/tnode.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import { u as useConfig } from '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../badge/badge.mjs';
import '../_chunks/dep-4c2819a4.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../_chunks/dep-5030b0d2.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../badge/props.mjs';
import '../shared/index.mjs';
import '../shared/functions.mjs';
import '../shared/util.mjs';
import '../shared/component.mjs';
import '../shared/constants.mjs';
import '../shared/render.mjs';
import '../_chunks/dep-ca4b618a.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../shared/dom.mjs';
import '../_chunks/dep-14bda5a6.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../shared/render-tnode.mjs';
import '../shared/useToggle/index.mjs';
import '../shared/useCountDown/index.mjs';
import '../_chunks/dep-1f2e940b.mjs';
import '@vueuse/core';
import '../shared/useCountDown/utils.mjs';
import '../shared/useDefault/index.mjs';
import '../shared/useChildSlots/index.mjs';
import '../_chunks/dep-6dd2b317.mjs';
import '../shared/useVModel/index.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../shared/useTouch/index.mjs';
import '../shared/useScrollParent/index.mjs';
import '../shared/useExpose/index.mjs';
import '../shared/useTest/index.mjs';
import '../shared/useClickAway/index.mjs';
import '../shared/useGesture/index.mjs';
import '@use-gesture/vanilla';
import '../shared/hover.mjs';
import './style/css.mjs';
import '../badge/type.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var prefix = config.prefix;
var _TabBarItem = defineComponent({
  name: "".concat(prefix, "-tab-bar-item"),
  components: {
    TBadge: Badge,
    TViewListIcon: ViewListIcon
  },
  props: TabBarItemProps,
  setup: function setup(props, context) {
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var tabBarItemClass = usePrefixClass("tab-bar-item");
    var _useConfig = useConfig("tabBar"),
      t = _useConfig.t,
      globalConfig = _useConfig.globalConfig;
    var _inject = inject("tab-bar"),
      split = _inject.split,
      shape = _inject.shape,
      theme = _inject.theme,
      defaultIndex = _inject.defaultIndex,
      activeValue = _inject.activeValue,
      itemCount = _inject.itemCount,
      updateChild = _inject.updateChild;
    var currentName = initName(defaultIndex);
    var textNode = ref();
    var badgeProps = computed(function () {
      return props.badgeProps;
    });
    var getBadgeAriaLabel = function getBadgeAriaLabel() {
      var options = badgeProps.value;
      if (options !== null && options !== void 0 && options.dot || options !== null && options !== void 0 && options.count) {
        var maxCount = options.maxCount || 99;
        if (options.dot) {
          return globalConfig.value.newsAriaLabel;
        }
        if (options.count === "...") {
          return globalConfig.value.moreNewsAriaLabel;
        }
        var count = Number(options.count);
        if (isNaN(count)) {
          return "".concat(options.count);
        }
        var str1 = t(globalConfig.value.haveMoreNewsAriaLabel, {
          value: maxCount
        });
        var str2 = t(globalConfig.value.haveNewsAriaLabel, {
          value: options.count
        });
        return "".concat(Number(options.count) > maxCount ? str1 : str2);
      }
      return "TabBar";
    };
    var ariaLabel = ref(getBadgeAriaLabel());
    var iconOnly = ref(false);
    watch(textNode, function () {
      var _textNode$value;
      var height = (_textNode$value = textNode.value) === null || _textNode$value === void 0 ? void 0 : _textNode$value.clientHeight;
      iconOnly.value = Number(height) === 0;
    });
    var hasSubTabBar = computed(function () {
      return Array.isArray(props.subTabBar) && props.subTabBar.length > 0;
    });
    var isChecked = computed(function () {
      if (hasSubTabBar.value && Array.isArray(activeValue.value)) {
        return activeValue.value.includes(currentName);
      }
      return currentName === activeValue.value;
    });
    var isSpread = ref(false);
    watch(isChecked, function (newValue) {
      if (!newValue) {
        isSpread.value = false;
      }
    });
    var crowded = ref(false);
    watch(itemCount, function () {
      if (isChecked.value) {
        crowded.value = itemCount.value > 3;
        isSpread.value = true;
      }
    });
    var isToggleCurrent = computed(function () {
      return Array.isArray(activeValue.value) && activeValue.value[0] === currentName;
    });
    var toggle = function toggle() {
      if (hasSubTabBar.value) {
        isSpread.value = !isSpread.value;
        if (!isToggleCurrent.value) {
          updateChild([currentName]);
          return;
        }
      }
      updateChild(currentName);
    };
    var hasChildren = computed(function () {
      var _props$subTabBar;
      return Number((_props$subTabBar = props.subTabBar) === null || _props$subTabBar === void 0 ? void 0 : _props$subTabBar.length) > 0;
    });
    var selectChild = function selectChild(childName) {
      if (!(Array.isArray(activeValue.value) && activeValue.value[1] === childName)) {
        updateChild([currentName, childName]);
      }
      isSpread.value = false;
    };
    return function () {
      var iconContent = function iconContent() {
        var iconSlot = renderTNodeJSX("icon");
        if (!iconSlot) {
          return null;
        }
        iconSlot === null || iconSlot === void 0 || iconSlot.forEach(function (item) {
          var _item$type;
          if (((_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.name) === "Icon") {
            item.props.size = iconOnly.value ? "24px" : "20px";
          }
        });
        return iconSlot;
      };
      var badge = function badge() {
        var _slot;
        var _badgeProps$value, _badgeProps$value2, _badgeProps$value3, _badgeProps$value4, _badgeProps$value5, _badgeProps$value6, _badgeProps$value7, _badgeProps$value8;
        return iconContent() && createVNode("div", {
          "class": "".concat(tabBarItemClass.value, "__icon"),
          "style": {
            height: "".concat(iconOnly.value ? 24 : 20, "px")
          }
        }, [(_badgeProps$value = badgeProps.value) !== null && _badgeProps$value !== void 0 && _badgeProps$value.dot || (_badgeProps$value2 = badgeProps.value) !== null && _badgeProps$value2 !== void 0 && _badgeProps$value2.count ? createVNode(resolveComponent("t-badge"), {
          "count": ((_badgeProps$value3 = badgeProps.value) === null || _badgeProps$value3 === void 0 ? void 0 : _badgeProps$value3.count) || 0,
          "max-count": ((_badgeProps$value4 = badgeProps.value) === null || _badgeProps$value4 === void 0 ? void 0 : _badgeProps$value4.maxCount) || 99,
          "dot": ((_badgeProps$value5 = badgeProps.value) === null || _badgeProps$value5 === void 0 ? void 0 : _badgeProps$value5.dot) || false,
          "content": ((_badgeProps$value6 = badgeProps.value) === null || _badgeProps$value6 === void 0 ? void 0 : _badgeProps$value6.content) || "",
          "size": ((_badgeProps$value7 = badgeProps.value) === null || _badgeProps$value7 === void 0 ? void 0 : _badgeProps$value7.size) || "medium",
          "offset": ((_badgeProps$value8 = badgeProps.value) === null || _badgeProps$value8 === void 0 ? void 0 : _badgeProps$value8.offset) || [0, 0]
        }, _isSlot(_slot = iconContent()) ? _slot : {
          default: function _default() {
            return [_slot];
          }
        }) : iconContent()]);
      };
      var textNodeContent = function textNodeContent() {
        return createVNode("div", {
          "ref": textNode,
          "class": _defineProperty(_defineProperty({}, "".concat(tabBarItemClass.value, "__text"), true), "".concat(tabBarItemClass.value, "__text--small"), !!iconContent())
        }, [hasChildren.value && createVNode(resolveComponent("t-view-list-icon"), {
          "size": "16",
          "class": "".concat(tabBarItemClass.value, "__icon-menu")
        }, null), renderContent("default", "content")]);
      };
      var menu = function menu() {
        if (hasChildren.value && isSpread.value) {
          return createVNode("div", {
            "role": "menu",
            "class": "".concat(tabBarItemClass.value, "__spread")
          }, [props.subTabBar.map(function (child, index) {
            return createVNode("div", {
              "key": index,
              "role": "tab",
              "class": "".concat(tabBarItemClass.value, "__spread-item"),
              "onClick": function onClick() {
                return selectChild(child.value || index);
              }
            }, [index !== 0 && createVNode("div", {
              "class": "".concat(tabBarItemClass.value, "__spread-item-split")
            }, null), createVNode("div", {
              "class": "".concat(tabBarItemClass.value, "__spread-item-text")
            }, [child.label])]);
          })]);
        }
      };
      return createVNode("div", {
        "class": _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(tabBarItemClass.value), true), "".concat(tabBarItemClass.value, "--split"), split.value), "".concat(tabBarItemClass.value, "--text-only"), !iconContent()), "".concat(tabBarItemClass.value, "--crowded"), crowded.value), "".concat(tabBarItemClass.value, "--").concat(shape.value), true), "".concat(context.attrs.class || ""), true)
      }, [createVNode("div", {
        "class": _defineProperty(_defineProperty(_defineProperty({}, "".concat(tabBarItemClass.value, "__content"), true), "".concat(tabBarItemClass.value, "__content--checked"), isChecked.value), "".concat(tabBarItemClass.value, "__content--").concat(theme.value), true),
        "aria-selected": (!hasChildren.value || !isSpread.value) && isChecked.value,
        "aria-expanded": hasChildren.value && isSpread.value,
        "role": hasChildren.value ? "button" : "tab",
        "onClick": toggle
      }, [badge(), textNodeContent()]), menu()]);
    };
  }
});

export { _TabBarItem as default };
//# sourceMappingURL=tab-bar-item.mjs.map
