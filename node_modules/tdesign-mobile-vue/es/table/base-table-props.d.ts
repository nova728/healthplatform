import { TdBaseTableProps } from '../table/type';
import { PropType } from 'vue';
declare const _default: {
    bordered: BooleanConstructor;
    cellEmptyContent: {
        type: PropType<string | ((h: typeof import("vue").h, props: import("../table/type").BaseTableCellParams<import("../table/type").TableRowData>) => import("..").SlotReturnValue)>;
    };
    columns: {
        type: PropType<import("../table/type").BaseTableCol<import("../table/type").TableRowData>[]>;
        default: () => TdBaseTableProps['columns'];
    };
    data: {
        type: PropType<import("../table/type").TableRowData[]>;
        default: () => TdBaseTableProps['data'];
    };
    empty: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    fixedRows: {
        type: PropType<number[]>;
    };
    height: {
        type: PropType<string | number>;
    };
    loading: {
        type: PropType<boolean | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: PropType<Partial<import("..").TdLoadingProps>>;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: TdBaseTableProps['tableLayout']): boolean;
    };
    verticalAlign: {
        type: PropType<"top" | "middle" | "bottom">;
        default: "top" | "middle" | "bottom";
        validator(val: TdBaseTableProps['verticalAlign']): boolean;
    };
    onCellClick: PropType<(context: import("../table/type").BaseTableCellEventContext<import("../table/type").TableRowData>) => void>;
    onRowClick: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onScroll: PropType<(params: {
        e: WheelEvent;
    }) => void>;
};
export default _default;
