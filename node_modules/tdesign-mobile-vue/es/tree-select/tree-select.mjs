/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { _ as _defineProperty } from '../_chunks/dep-dc33ef46.mjs';
import { _ as _toConsumableArray } from '../_chunks/dep-6dd2b317.mjs';
import { _ as _slicedToArray } from '../_chunks/dep-4c2819a4.mjs';
import { isVNode, defineComponent, toRefs, ref, computed, watch, createVNode } from 'vue';
import { SideBar, SideBarItem } from '../side-bar/index.mjs';
import { Radio, RadioGroup } from '../radio/index.mjs';
import { CheckboxGroup, Checkbox } from '../checkbox/index.mjs';
import config from '../config.mjs';
import '../shared/index.mjs';
import props from './props.mjs';
import { usePrefixClass } from '../hooks/useClass.mjs';
import { useDefault } from '../shared/useDefault/index.mjs';
import { convertUnit } from '../shared/util.mjs';
import '../_chunks/dep-b617aa7d.mjs';
import '../_chunks/dep-4b5beaed.mjs';
import '../side-bar/side-bar.mjs';
import '../side-bar/props.mjs';
import '../hooks/tnode.mjs';
import '../_chunks/dep-14bda5a6.mjs';
import '../_chunks/dep-57a75b98.mjs';
import '../_chunks/dep-c6268b4a.mjs';
import '../_chunks/dep-c06e51c6.mjs';
import '../_chunks/dep-ca4b618a.mjs';
import '../_chunks/dep-c0c7e354.mjs';
import '../_chunks/dep-12b97090.mjs';
import '../_chunks/dep-ff449344.mjs';
import '../_chunks/dep-a9ebd588.mjs';
import '../_chunks/dep-9f686842.mjs';
import '../_chunks/dep-06d482c6.mjs';
import '../_chunks/dep-feb307dc.mjs';
import '../_chunks/dep-f70b3591.mjs';
import '../_chunks/dep-82b3737e.mjs';
import '../hooks/render-tnode.mjs';
import '../_chunks/dep-35186489.mjs';
import '../_chunks/dep-afd6e78d.mjs';
import '../_chunks/dep-44fb3d82.mjs';
import '../_chunks/dep-ce88baea.mjs';
import '../_chunks/dep-4d5ede6c.mjs';
import '../_chunks/dep-32f76754.mjs';
import '../_chunks/dep-4f0b3d47.mjs';
import '../_chunks/dep-ab2bdb8f.mjs';
import '../shared/functions.mjs';
import '../_chunks/dep-5030b0d2.mjs';
import '../shared/component.mjs';
import '../shared/constants.mjs';
import '../shared/render.mjs';
import '../shared/dom.mjs';
import '../shared/render-tnode.mjs';
import '../shared/useToggle/index.mjs';
import '../shared/useCountDown/index.mjs';
import '../_chunks/dep-1f2e940b.mjs';
import '@vueuse/core';
import '../shared/useCountDown/utils.mjs';
import '../shared/useChildSlots/index.mjs';
import '../shared/useVModel/index.mjs';
import '../shared/useTouch/index.mjs';
import '../shared/useScrollParent/index.mjs';
import '../shared/useExpose/index.mjs';
import '../shared/useTest/index.mjs';
import '../shared/useClickAway/index.mjs';
import '../shared/useGesture/index.mjs';
import '@use-gesture/vanilla';
import '../shared/hover.mjs';
import '../_chunks/dep-ceb2af97.mjs';
import '../_chunks/dep-8b0eae2f.mjs';
import '../_chunks/dep-dffd3346.mjs';
import '../_chunks/dep-4a0b07f2.mjs';
import '../_chunks/dep-9f2b5648.mjs';
import '../_chunks/dep-dff870f8.mjs';
import '../_chunks/dep-8eaf2b7e.mjs';
import '../_chunks/dep-5fe3ebe0.mjs';
import '../_chunks/dep-0c24a69a.mjs';
import '../_chunks/dep-0d47707f.mjs';
import '../_chunks/dep-0bb5e0ba.mjs';
import '../_chunks/dep-4a37904d.mjs';
import '../_common/js/global-config/mobile/default-config.mjs';
import '../_common/js/global-config/mobile/locale/zh_CN.mjs';
import '../_chunks/dep-fbaa4502.mjs';
import '../_chunks/dep-c48250ca.mjs';
import '../_chunks/dep-8398b33d.mjs';
import '../config-provider/type.mjs';
import '../side-bar/side-bar-item.mjs';
import '../side-bar/side-bar-item-props.mjs';
import '../badge/index.mjs';
import '../badge/badge.mjs';
import '../badge/props.mjs';
import './style/css.mjs';
import '../badge/type.mjs';
import '../side-bar/type.mjs';
import '../radio/radio.mjs';
import 'tdesign-icons-vue-next';
import '../radio/props.mjs';
import '../form/hooks.mjs';
import '../_chunks/dep-60e514fa.mjs';
import '../radio/radio-group.mjs';
import '../radio/radio-group-props.mjs';
import '../radio/type.mjs';
import '../checkbox/checkbox.mjs';
import '../checkbox/props.mjs';
import '../checkbox/checkbox-group.mjs';
import '../checkbox/checkbox-group-props.mjs';
import '../checkbox/hooks/index.mjs';
import '../checkbox/hooks/getOptions.mjs';
import '../checkbox/hooks/setCheckAllStatus.mjs';
import '../_chunks/dep-45147d22.mjs';
import '../checkbox/type.mjs';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var prefix = config.prefix;
var _TreeSelect = defineComponent({
  name: "".concat(prefix, "-tree-select"),
  components: {
    TSideBar: SideBar,
    TSideBarItem: SideBarItem,
    TRadio: Radio,
    TRadioGroup: RadioGroup
  },
  props: props,
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props2, context) {
    var treeSelectClass = usePrefixClass("tree-select");
    var _toRefs = toRefs(props2),
      height = _toRefs.height,
      customStyle = _toRefs.customStyle,
      value = _toRefs.value,
      options = _toRefs.options,
      keys = _toRefs.keys,
      multiple = _toRefs.multiple;
    var _useDefault = useDefault(props2, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      innerValue = _useDefault2[0],
      setInnerValue = _useDefault2[1];
    var leafLevel = ref(0);
    var treeOptions = ref([]);
    var rootStyle = computed(function () {
      return ["height: ".concat(convertUnit(height.value)), customStyle.value].join(";");
    });
    var buildTreeOptions = function buildTreeOptions() {
      var options2 = props2.options,
        multiple2 = props2.multiple,
        keys2 = props2.keys;
      var level = -1;
      var tmpTreeOptions = [];
      var node = {
        children: options2
      };
      if (options2.length === 0 || Array.isArray(value) && value.length === 0) return;
      var _loop = function _loop() {
        var _innerValue$value;
        level += 1;
        var list = node.children.map(function (item) {
          return {
            label: item[(keys2 === null || keys2 === void 0 ? void 0 : keys2.label) || "label"],
            value: item[(keys2 === null || keys2 === void 0 ? void 0 : keys2.value) || "value"],
            disabled: item[(keys2 === null || keys2 === void 0 ? void 0 : keys2.disabled) || "disabled"],
            children: item.children
          };
        });
        var thisValue = (_innerValue$value = innerValue.value) === null || _innerValue$value === void 0 ? void 0 : _innerValue$value[level];
        tmpTreeOptions.push(_toConsumableArray(list));
        if (thisValue == null) {
          var _list = _slicedToArray(list, 1),
            firstChild = _list[0];
          node = firstChild;
        } else {
          var child = list.find(function (child2) {
            return child2.value === thisValue;
          });
          node = child !== null && child !== void 0 ? child : list[0];
        }
      };
      while (node && node.children) {
        _loop();
      }
      leafLevel.value = Math.max(0, level);
      treeOptions.value = tmpTreeOptions;
      if (multiple2) {
        var finalValue = innerValue.value;
        if (finalValue[leafLevel.value] != null && !Array.isArray(finalValue[leafLevel.value])) {
          throw TypeError("\u5E94\u4F20\u5165\u6570\u7EC4\u7C7B\u578B\u7684 value");
        }
      }
    };
    var getTreeClass = function getTreeClass(level, total) {
      if (level === 0) return "right";
      if (level === 1 && level !== total - 1) return "middle";
      return "left";
    };
    var onRootChange = function onRootChange(level) {
      setInnerValue(innerValue.value, level);
    };
    var handleTreeClick = function handleTreeClick(itemValue, level, isDisabled) {
      if (isDisabled) return;
      innerValue.value[level] = itemValue;
      setInnerValue(innerValue.value, level);
    };
    watch([innerValue, options, keys, multiple], function () {
      buildTreeOptions();
    }, {
      immediate: true,
      deep: true
    });
    var renderSideBar = function renderSideBar(treeOption) {
      var _slot;
      return createVNode(SideBar, {
        "modelValue": innerValue.value[0],
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return innerValue.value[0] = $event;
        },
        "class": "".concat(treeSelectClass.value, "-colum"),
        "onChange": function onChange() {
          return onRootChange(0);
        }
      }, _isSlot(_slot = treeOption.map(function (item, index) {
        return createVNode(SideBarItem, {
          "key": index,
          "label": item.label,
          "value": item.value,
          "disabled": item.disabled
        }, null);
      })) ? _slot : {
        default: function _default() {
          return [_slot];
        }
      });
    };
    var renderMiddleLevel = function renderMiddleLevel(treeOption, level) {
      return treeOption.map(function (item) {
        return createVNode("div", {
          "key": item.value,
          "class": _defineProperty(_defineProperty(_defineProperty({}, "".concat(treeSelectClass.value, "__item"), true), "".concat(treeSelectClass.value, "__item--active"), item.value === innerValue.value[level]), "".concat(treeSelectClass.value, "__item--disabled"), item.disabled),
          "onClick": function onClick() {
            return handleTreeClick(item.value, level, item.disabled);
          }
        }, [item.label]);
      });
    };
    var renderLeafLevel = function renderLeafLevel(treeOption, level) {
      var _slot3;
      if (multiple.value) {
        var _slot2;
        return createVNode(CheckboxGroup, {
          "modelValue": innerValue.value[level],
          "onUpdate:modelValue": function onUpdateModelValue($event) {
            return innerValue.value[level] = $event;
          },
          "class": "".concat(treeSelectClass.value, "__checkbox"),
          "onChange": function onChange() {
            return onRootChange(level);
          }
        }, _isSlot(_slot2 = treeOption.map(function (item) {
          return createVNode(Checkbox, {
            "key": item.value,
            "class": "".concat(treeSelectClass.value, "__checkbox-item"),
            "value": item.value,
            "maxLabelRow": 1,
            "icon": "line",
            "borderless": true,
            "placement": "right",
            "disabled": item.disabled
          }, {
            default: function _default() {
              return [item.label];
            }
          });
        })) ? _slot2 : {
          default: function _default() {
            return [_slot2];
          }
        });
      }
      return createVNode(RadioGroup, {
        "modelValue": innerValue.value[level],
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return innerValue.value[level] = $event;
        },
        "class": "".concat(treeSelectClass.value, "__radio"),
        "onChange": function onChange() {
          return onRootChange(level);
        }
      }, _isSlot(_slot3 = treeOption.map(function (item) {
        return createVNode(Radio, {
          "key": item.value,
          "class": "".concat(treeSelectClass.value, "__radio-item"),
          "value": item.value,
          "icon": "line",
          "maxLabelRow": 1,
          "borderless": true,
          "placement": "right",
          "disabled": item.disabled
        }, {
          default: function _default() {
            return [item.label];
          }
        });
      })) ? _slot3 : {
        default: function _default() {
          return [_slot3];
        }
      });
    };
    return function () {
      return createVNode("div", {
        "class": treeSelectClass.value,
        "style": rootStyle.value
      }, [treeOptions.value.map(function (item, level) {
        var levelContent;
        if (level === 0) {
          levelContent = renderSideBar(item);
        } else if (level === leafLevel.value) {
          levelContent = renderLeafLevel(item, level);
        } else {
          levelContent = renderMiddleLevel(item, level);
        }
        return createVNode("div", {
          "key": level,
          "class": ["".concat(treeSelectClass.value, "__column"), "".concat(treeSelectClass.value, "__column--").concat(getTreeClass(leafLevel.value - level, treeOptions.value.length))]
        }, [levelContent]);
      })]);
    };
  }
});

export { _TreeSelect as default };
//# sourceMappingURL=tree-select.mjs.map
