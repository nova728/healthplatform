/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode } from 'vue';
import isNumber from 'lodash/isNumber';
import isString from 'lodash/isString';
import config from '../config.js';
import BadgeProps from './props.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';

var prefix = config.prefix;
var _Badge = defineComponent({
  name: "".concat(prefix, "-badge"),
  props: BadgeProps,
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var renderTNodeContent = useContent();
    var badgeClass = usePrefixClass("badge");
    var classPrefix = usePrefixClass();
    var badgeClasses = computed(function () {
      return _defineProperty(_defineProperty({}, "".concat(badgeClass.value), true), "".concat(badgeClass.value, "__ribbon-outer"), props.shape === "ribbon");
    });
    var badgeInnerClasses = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(badgeClass.value, "--basic"), true), "".concat(badgeClass.value, "--dot"), props.dot), "".concat(badgeClass.value, "--").concat(props.size), true), "".concat(badgeClass.value, "--").concat(props.shape), true), "".concat(badgeClass.value, "--count"), !props.dot && props.count), "".concat(classPrefix.value, "-has-count"), true);
    });
    var isShowBadge = computed(function () {
      if (props.dot) {
        return true;
      }
      var count = Number(props.count);
      if (!props.showZero && count === 0) {
        return false;
      }
      if (props.count == null) return false;
      return true;
    });
    var hasUnit = function hasUnit(unit) {
      return unit.indexOf("px") > 0 || unit.indexOf("rpx") > 0 || unit.indexOf("em") > 0 || unit.indexOf("rem") > 0 || unit.indexOf("%") > 0 || unit.indexOf("vh") > 0 || unit.indexOf("vm") > 0;
    };
    var badgeStyles = computed(function () {
      if (!props.offset) {
        return {
          background: props.color
        };
      }
      var _props$offset = _slicedToArray(props.offset, 2),
        _props$offset$ = _props$offset[0],
        xOffset = _props$offset$ === void 0 ? 0 : _props$offset$,
        _props$offset$2 = _props$offset[1],
        yOffset = _props$offset$2 === void 0 ? 0 : _props$offset$2;
      xOffset = hasUnit(xOffset.toString()) ? xOffset : "".concat(xOffset, "px");
      yOffset = hasUnit(yOffset.toString()) ? yOffset : "".concat(yOffset, "px");
      return {
        background: props.color,
        right: xOffset,
        top: yOffset
      };
    });
    return function () {
      var readerCount = function readerCount() {
        if (props.dot) return null;
        if (isString(props.count) || isNumber(props.count)) {
          if (props.count === 0) {
            return props.showZero ? props.count : null;
          }
          return Number(props.count) > Number(props.maxCount) ? "".concat(props.maxCount, "+") : props.count;
        }
        return renderTNodeJSX("count");
      };
      var readerContent = function readerContent() {
        var content = renderTNodeContent("default", "content");
        if (typeof content === "string") {
          return createVNode("span", {
            "class": "".concat(badgeClass.value, "__content-text")
          }, [content]);
        }
        return content;
      };
      var readerBadge = function readerBadge() {
        if (!isShowBadge.value) {
          return null;
        }
        return createVNode("div", {
          "class": badgeInnerClasses.value,
          "style": badgeStyles.value
        }, [readerCount()]);
      };
      return createVNode("div", {
        "class": badgeClasses.value
      }, [createVNode("div", {
        "class": "".concat(badgeClass.value, "__content")
      }, [readerContent()]), readerBadge()]);
    };
  }
});

export { _Badge as default };
//# sourceMappingURL=badge.js.map
