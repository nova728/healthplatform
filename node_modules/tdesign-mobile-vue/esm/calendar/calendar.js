/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { defineComponent, ref, provide, reactive, nextTick, onMounted, watch, createVNode, resolveComponent } from 'vue';
import { Popup } from '../popup/index.js';
import config from '../config.js';
import calendarProps from './props.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import calendarTemplate from './template.js';
import { usePrefixClass } from '../hooks/useClass.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/defineProperty';
import '@babel/runtime/helpers/slicedToArray';
import 'tdesign-icons-vue-next';
import '../popup/props.js';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../shared/dom.js';
import 'lodash/isFunction';
import 'lodash/isString';
import '../overlay/props.js';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../overlay/style';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../hooks/useLockScroll.js';
import '../_util/useTouch.js';
import '../_util/getScrollParent.js';
import '../_util/supportsPassive.js';
import '../popup/style';
import '../popup/type.js';
import '../button/index.js';
import '../button/button.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../loading/style';
import '../loading/type.js';
import '../loading/plugin.js';
import '../button/props.js';
import '../form/hooks.js';
import 'lodash/isBoolean';
import '../button/style';
import '../button/type.js';
import './template-props.js';

var prefix = config.prefix;
var _Calendar = defineComponent({
  name: "".concat(prefix, "-calendar"),
  components: {
    TPopup: Popup,
    calendarTemplate: calendarTemplate
  },
  props: calendarProps,
  emits: ["update:visible"],
  setup: function setup(props, context) {
    var calendarClass = usePrefixClass("calendar");
    var calendarTemplateRef = ref();
    var renderTNodeJSX = useTNodeJSX();
    provide("templateProps", reactive(props));
    var selectedValueIntoView = function selectedValueIntoView() {
      var _templateRef$querySel;
      var type = props.type === "range" ? "start" : "selected";
      var templateRef = calendarTemplateRef.value.templateRef;
      var scrollContainer = templateRef.querySelector(".".concat(calendarClass.value, "__months"));
      var selectedDate = (_templateRef$querySel = templateRef.querySelector(".".concat(calendarClass.value, "__dates-item--").concat(type))) === null || _templateRef$querySel === void 0 || (_templateRef$querySel = _templateRef$querySel.parentNode) === null || _templateRef$querySel === void 0 ? void 0 : _templateRef$querySel.previousElementSibling;
      if (selectedDate) {
        scrollContainer.scrollTop = selectedDate.offsetTop - scrollContainer.offsetTop;
      }
    };
    var onVisibleChange = function onVisibleChange(v) {
      context.emit("update:visible", v);
    };
    var onPopupVisibleChange = function onPopupVisibleChange(v) {
      if (!v) {
        var _props$onClose;
        (_props$onClose = props.onClose) === null || _props$onClose === void 0 || _props$onClose.call(props, "overlay");
      } else {
        nextTick(function () {
          selectedValueIntoView();
        });
      }
      context.emit("update:visible", v);
    };
    onMounted(function () {
      if (!props.usePopup) selectedValueIntoView();
    });
    watch(function () {
      return props.value;
    }, function (val) {
      calendarTemplateRef.value.valueRef = val;
    });
    return function () {
      var title = renderTNodeJSX("title");
      var confirmBtn = renderTNodeJSX("confirmBtn") === void 0 ? null : renderTNodeJSX("confirmBtn");
      return createVNode("div", null, [!props.usePopup ? createVNode(calendarTemplate, {
        "ref": calendarTemplateRef,
        "title": title,
        "confirmBtn": confirmBtn
      }, null) : createVNode(resolveComponent("t-popup"), {
        "visible": props.visible,
        "placement": "bottom",
        "onVisibleChange": onPopupVisibleChange
      }, {
        default: function _default() {
          return [createVNode(calendarTemplate, {
            "ref": calendarTemplateRef,
            "title": title,
            "confirmBtn": confirmBtn,
            "onVisibleChange": onVisibleChange
          }, null)];
        }
      })]);
    };
  }
});

export { _Calendar as default };
//# sourceMappingURL=calendar.js.map
