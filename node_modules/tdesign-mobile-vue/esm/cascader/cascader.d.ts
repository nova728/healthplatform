import { TreeOptionData } from '../common';
import { CascaderTriggerSource } from './type';
declare const _default: import("vue").DefineComponent<{
    checkStrictly: BooleanConstructor;
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    keys: {
        type: import("vue").PropType<import("../common").KeysType>;
    };
    options: {
        type: import("vue").PropType<TreeOptionData<string | number>[]>;
        default: () => TreeOptionData<string | number>[];
    };
    placeholder: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    subTitles: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    theme: {
        type: import("vue").PropType<"tab" | "step">;
        default: "tab" | "step";
        validator(val: "tab" | "step"): boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<string | number>;
    };
    visible: BooleanConstructor;
    onChange: import("vue").PropType<(value: string | number, selectedOptions: TreeOptionData<string | number>[]) => void>;
    onClose: import("vue").PropType<(trigger: CascaderTriggerSource) => void>;
    onPick: import("vue").PropType<(context: {
        level: number;
        value: string | number;
        index: number;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "update:visible")[], "update:modelValue" | "update:value" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    checkStrictly: BooleanConstructor;
    closeBtn: {
        type: import("vue").PropType<boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: boolean;
    };
    keys: {
        type: import("vue").PropType<import("../common").KeysType>;
    };
    options: {
        type: import("vue").PropType<TreeOptionData<string | number>[]>;
        default: () => TreeOptionData<string | number>[];
    };
    placeholder: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
        default: string;
    };
    subTitles: {
        type: import("vue").PropType<string[]>;
        default: () => string[];
    };
    theme: {
        type: import("vue").PropType<"tab" | "step">;
        default: "tab" | "step";
        validator(val: "tab" | "step"): boolean;
    };
    title: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<string | number>;
    };
    visible: BooleanConstructor;
    onChange: import("vue").PropType<(value: string | number, selectedOptions: TreeOptionData<string | number>[]) => void>;
    onClose: import("vue").PropType<(trigger: CascaderTriggerSource) => void>;
    onPick: import("vue").PropType<(context: {
        level: number;
        value: string | number;
        index: number;
    }) => void>;
}>> & {
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    "onUpdate:visible"?: (...args: any[]) => any;
}, {
    value: string | number;
    modelValue: string | number;
    visible: boolean;
    theme: "tab" | "step";
    options: TreeOptionData<string | number>[];
    closeBtn: boolean | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    placeholder: string | ((h: typeof import("vue").h) => import("../common").SlotReturnValue);
    subTitles: string[];
    checkStrictly: boolean;
}, {}>;
export default _default;
