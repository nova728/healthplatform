/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _typeof from '@babel/runtime/helpers/typeof';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, computed, provide, toRefs, createVNode, resolveComponent } from 'vue';
import config from '../config.js';
import props from './checkbox-group-props.js';
import _Checkbox from './checkbox.js';
import '../shared/index.js';
import './hooks/index.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useDefault } from '../shared/useDefault/index.js';
import { getOptions } from './hooks/getOptions.js';
import { setCheckAllStatus } from './hooks/setCheckAllStatus.js';
import 'tdesign-icons-vue-next';
import './props.js';
import '../form/hooks.js';
import 'lodash/isBoolean';
import '../shared/render-tnode.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import 'lodash/camelCase';
import '../shared/dom.js';
import 'lodash/isFunction';
import 'lodash/isString';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import 'lodash/intersection';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var _CheckboxGroup = defineComponent({
  name: "".concat(prefix, "-checkbox-group"),
  components: {
    Checkbox: _Checkbox
  },
  props: props,
  emits: ["update:value", "update:modelValue", "change"],
  setup: function setup(props2, context) {
    var checkboxGroupClass = usePrefixClass("checkbox-group");
    var renderTNodeJSX = useTNodeJSX();
    var isArray = Array.isArray;
    var _useDefault = useDefault(props2, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      innerValue = _useDefault2[0],
      setInnerValue = _useDefault2[1];
    var optionList = getOptions(props2, context.slots);
    var checkedSet = computed(function () {
      if (isArray(innerValue.value)) {
        return new Set(innerValue.value);
      }
      return /* @__PURE__ */new Set();
    });
    var checkAllStatus = setCheckAllStatus(optionList, innerValue, checkedSet);
    var maxExceeded = computed(function () {
      return props2.max !== void 0 && innerValue.value.length === props2.max;
    });
    var onCheckedChange = function onCheckedChange(p) {
      var checked = p.checked,
        checkAll = p.checkAll,
        e = p.e;
      if (checkAll) {
        onCheckAllChange(checked, {
          e: e
        });
      } else {
        handleCheckboxChange(p);
      }
    };
    var handleCheckboxChange = function handleCheckboxChange(data) {
      var currentValue = data.option.value;
      if (isArray(innerValue.value)) {
        if (currentValue === void 0) {
          return;
        }
        var val = _toConsumableArray(innerValue.value);
        if (data.checked) {
          val.push(currentValue);
        } else {
          var i = val.indexOf(currentValue);
          val.splice(i, 1);
        }
        setInnerValue(val, {
          e: data.e,
          current: data.option.value,
          type: data.checked ? "check" : "uncheck"
        });
      } else {
        console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof(innerValue.value)));
      }
    };
    var getAllCheckboxValue = function getAllCheckboxValue() {
      var val = /* @__PURE__ */new Set();
      for (var i = 0, len = optionList.value.length; i < len; i++) {
        var item = optionList.value[i];
        if (item.checkAll) continue;
        if (item.value === void 0) continue;
        val.add(item.value);
        if (maxExceeded.value) break;
      }
      return _toConsumableArray(val);
    };
    var onCheckAllChange = function onCheckAllChange(checked, context2) {
      var value = checked ? getAllCheckboxValue() : [];
      setInnerValue(value, {
        e: context2.e,
        type: checked ? "check" : "uncheck",
        current: void 0
      });
    };
    provide("checkboxGroup", _objectSpread(_objectSpread({}, toRefs(props2)), {}, {
      innerValue: innerValue,
      checkAllStatus: checkAllStatus,
      checkedSet: checkedSet,
      onCheckedChange: onCheckedChange
    }));
    return function () {
      var checkboxNode = function checkboxNode() {
        return createVNode("span", null, [optionList.value.map(function (item, idx) {
          return createVNode(resolveComponent("checkbox"), {
            "key": idx,
            "name": item.name || "",
            "label": item.label || item.text || "",
            "value": item.value,
            "check-all": item.checkAll,
            "block": item.block || true,
            "checked": item.checked || false,
            "content": item.content || "",
            "content-disabled": item.contentDisabled || false,
            "icon": item.icon || "circle",
            "indeterminate": item.indeterminate || false,
            "disabled": item.disabled,
            "max-content-row": item.maxContentRow || 5,
            "max-label-row": item.maxLabelRow || 3,
            "readonly": item.readonly || false,
            "placement": item.placement || "left"
          }, null);
        })]);
      };
      return createVNode("div", {
        "class": "".concat(checkboxGroupClass.value)
      }, [!(props2.options && props2.options.length) ? renderTNodeJSX("default") : checkboxNode()]);
    };
  }
});

export { _CheckboxGroup as default };
//# sourceMappingURL=checkbox-group.js.map
