{"version":3,"file":"checkbox.js","sources":["../../src/checkbox/checkbox.tsx"],"sourcesContent":["import { defineComponent, h, computed, inject } from 'vue';\nimport {\n  CheckIcon,\n  MinusIcon,\n  CheckCircleFilledIcon,\n  CircleIcon,\n  MinusCircleFilledIcon,\n  MinusRectangleFilledIcon,\n  CheckRectangleFilledIcon,\n} from 'tdesign-icons-vue-next';\nimport config from '../config';\nimport CheckboxProps from './props';\nimport { TNode, useDefault } from '../shared';\nimport { TdCheckboxProps } from '../checkbox/type';\nimport { useTNodeJSX, useContent } from '../hooks/tnode';\nimport { useFormDisabled } from '../form/hooks';\nimport { usePrefixClass } from '../hooks/useClass';\n\nconst { prefix } = config;\n\nexport default defineComponent({\n  name: `${prefix}-checkbox`,\n  components: { TNode },\n  props: {\n    ...CheckboxProps,\n    borderless: {\n      type: Boolean,\n      value: false,\n    },\n  },\n  emits: ['update:checked', 'update:modelValue', 'change'],\n  setup(props, context) {\n    const checkboxClass = usePrefixClass('checkbox');\n    const renderTNodeJSX = useTNodeJSX();\n    const renderContent = useContent();\n    const [innerChecked, setInnerChecked] = useDefault<boolean, TdCheckboxProps>(\n      props,\n      context.emit,\n      'checked',\n      'change',\n    );\n    const checkboxGroup: any = inject('checkboxGroup', undefined);\n    const disabled = useFormDisabled(checkboxGroup?.disabled);\n    const indeterminate = computed<boolean>(() => {\n      if (props.checkAll && checkboxGroup != null) return checkboxGroup.checkAllStatus.value === 'indeterminate';\n      return props.indeterminate;\n    });\n\n    const isIconArray = Array.isArray(props.icon);\n    const defaultCheckIcons = [h(CheckCircleFilledIcon), h(CircleIcon)];\n    const checkIcons = computed(() => {\n      if (isIconArray && props.icon.length > 1) {\n        return props.icon.map((icon) =>\n          typeof icon === 'string' ? h('img', { class: `${checkboxClass.value}__icon-image`, src: icon }) : icon,\n        );\n      }\n      return defaultCheckIcons;\n    });\n\n    const checkedIcon = computed(() => {\n      if (props.icon === 'circle' || props.icon === true)\n        return indeterminate.value ? h(MinusCircleFilledIcon) : h(CheckCircleFilledIcon);\n      if (props.icon === 'rectangle')\n        return indeterminate.value ? h(MinusRectangleFilledIcon) : h(CheckRectangleFilledIcon);\n      if (props.icon === 'line') return indeterminate.value ? h(MinusIcon) : h(CheckIcon);\n      return null;\n    });\n\n    const isChecked = computed(() => {\n      if (props.checkAll) {\n        const checkAllStatus = checkboxGroup?.checkAllStatus.value;\n        return checkAllStatus === 'checked' || checkAllStatus === 'indeterminate';\n      }\n      if (checkboxGroup != null && props.value != null) {\n        return !!checkboxGroup.checkedSet.value?.has(props.value);\n      }\n      return innerChecked.value;\n    });\n\n    const isDisabled = computed(() => {\n      if (checkboxGroup?.max.value)\n        return checkboxGroup.max.value <= checkboxGroup.innerValue.value.length && !isChecked.value;\n\n      return disabled.value;\n    });\n\n    const handleChange = (e: Event, source?: string) => {\n      if (isDisabled.value || props.readonly) return;\n      if (source === 'text' && props.contentDisabled) return;\n\n      const value = !isChecked.value;\n      setInnerChecked(value, { e });\n      e.stopPropagation();\n      if (checkboxGroup && checkboxGroup?.onCheckedChange) {\n        checkboxGroup.onCheckedChange({ checked: value, checkAll: props.checkAll, e, option: props });\n      }\n    };\n    return () => {\n      const { placement, block, icon, maxLabelRow, maxContentRow, borderless } = props;\n      const renderIconArray = () => {\n        if (isIconArray) {\n          return (\n            <t-node\n              content={checkIcons.value[isChecked.value ? 0 : 1]}\n              class={`${checkboxClass.value}__icon-wrapper`}\n            />\n          );\n        }\n        if (isChecked.value) {\n          return <t-node content={checkedIcon.value} class={`${checkboxClass.value}__icon-wrapper`} />;\n        }\n        return (\n          <>\n            {(icon === 'circle' || icon === true || icon === 'rectangle') && (\n              <div\n                class={{\n                  [`${checkboxClass.value}__icon-circle`]: icon === true,\n                  [`${checkboxClass.value}__icon-${icon}`]: typeof icon === 'string',\n                  [`${checkboxClass.value}__icon-${icon}--disabled`]: isDisabled.value,\n                }}\n              ></div>\n            )}\n            {icon === 'line' && <div class=\"placeholder\"></div>}\n          </>\n        );\n      };\n\n      const renderIconNode = () => {\n        if (!icon) {\n          return null;\n        }\n        return (\n          <div\n            class={{\n              [`${checkboxClass.value}__icon`]: true,\n              [`${checkboxClass.value}__icon--${placement}`]: true,\n              [`${checkboxClass.value}__icon--checked`]: isChecked.value,\n              [`${checkboxClass.value}__icon--disabled`]: isDisabled.value,\n            }}\n          >\n            {renderIconArray()}\n          </div>\n        );\n      };\n\n      const renderCheckBoxContent = () => {\n        const labelContent = renderContent('default', 'label');\n        const checkboxContent = renderTNodeJSX('content');\n        return (\n          <div\n            class={`${checkboxClass.value}__content`}\n            onClick={(event) => {\n              event.stopPropagation();\n              handleChange(event, 'text');\n            }}\n          >\n            <div\n              class={{\n                [`${checkboxClass.value}__title`]: true,\n                [`${checkboxClass.value}__title--checked`]: isChecked.value,\n                [`${checkboxClass.value}__title--disabled`]: isDisabled.value,\n              }}\n              style={{ '-webkit-line-clamp': maxLabelRow }}\n            >\n              {labelContent}\n            </div>\n            <div\n              class={{\n                [`${checkboxClass.value}__description`]: true,\n                [`${checkboxClass.value}__description--disabled`]: isDisabled.value,\n              }}\n              style={{ '-webkit-line-clamp': maxContentRow }}\n            >\n              {checkboxContent}\n            </div>\n          </div>\n        );\n      };\n      return (\n        <div\n          class={{\n            [`${checkboxClass.value}`]: true,\n            [`${checkboxClass.value}--${placement}`]: true,\n            [`${checkboxClass.value}--checked`]: isChecked.value,\n            [`${checkboxClass.value}--block`]: block,\n          }}\n          onClick={handleChange}\n        >\n          {renderIconNode()}\n          {renderCheckBoxContent()}\n          {!borderless && <div class={`${checkboxClass.value}__border ${checkboxClass.value}__border--${placement}`} />}\n        </div>\n      );\n    };\n  },\n});\n"],"names":["prefix","config","defineComponent","name","components","TNode","props","_objectSpread","CheckboxProps","borderless","type","Boolean","value","emits","setup","context","checkboxClass","usePrefixClass","renderTNodeJSX","useTNodeJSX","renderContent","useContent","_useDefault","useDefault","emit","_useDefault2","_slicedToArray","innerChecked","setInnerChecked","checkboxGroup","inject","disabled","useFormDisabled","indeterminate","computed","checkAll","checkAllStatus","isIconArray","Array","isArray","icon","defaultCheckIcons","h","CheckCircleFilledIcon","CircleIcon","checkIcons","length","map","class","concat","src","checkedIcon","MinusCircleFilledIcon","MinusRectangleFilledIcon","CheckRectangleFilledIcon","MinusIcon","CheckIcon","isChecked","_checkboxGroup$checke","checkedSet","has","isDisabled","max","innerValue","handleChange","e","source","readonly","contentDisabled","stopPropagation","onCheckedChange","checked","option","placement","block","maxLabelRow","maxContentRow","renderIconArray","_createVNode","_resolveComponent","_Fragment","_defineProperty","renderIconNode","renderCheckBoxContent","labelContent","checkboxContent","onClick","event"],"mappings":"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"}