/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, inject, computed, ref, nextTick, watch, onMounted, createVNode } from 'vue';
import { ChevronUpIcon, ChevronDownIcon } from 'tdesign-icons-vue-next';
import { Cell } from '../cell/index.js';
import props from './collapse-panel-props.js';
import config from '../config.js';
import { findIndex } from './util.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useClass.js';
import '../cell/cell.js';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isNumber';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/dom.js';
import 'lodash/isFunction';
import 'lodash/isString';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../cell/props.js';
import '../form/hooks.js';
import 'lodash/isBoolean';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../cell/cell-group.js';
import '../cell/cell-group-props.js';
import '../cell/style';
import '../cell/type.js';

var prefix = config.prefix;
var _CollapsePanel = defineComponent({
  name: "".concat(prefix, "-collapse-panel"),
  components: {
    TCell: Cell
  },
  props: props,
  setup: function setup(props2, _ref) {
    var slots = _ref.slots;
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var collapsePanelClass = usePrefixClass("collapse-panel");
    var parent = inject("collapse");
    var renderParentTNode = inject("renderParentTNode");
    var disabled = computed(function () {
      return (parent === null || parent === void 0 ? void 0 : parent.disabled.value) || props2.disabled;
    });
    var rootClass = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, "".concat(collapsePanelClass.value), true), "".concat(collapsePanelClass.value, "--").concat(props2.placement), true), "".concat(collapsePanelClass.value, "--active"), isActive.value), "".concat(collapsePanelClass.value, "--disabled"), disabled.value);
    });
    var isActive = computed(function () {
      return findIndex(props2.value, parent === null || parent === void 0 ? void 0 : parent.activeValue.value) > -1;
    });
    var updatePanelValue = function updatePanelValue(args) {
      if (props2.value != null) {
        parent === null || parent === void 0 || parent.onPanelChange(props2.value, args);
      }
    };
    var handleClick = function handleClick(e) {
      e === null || e === void 0 || e.stopPropagation();
      if (disabled.value) {
        return;
      }
      updatePanelValue({
        e: e
      });
    };
    var bodyRef = ref();
    var wrapRef = ref();
    var headRef = ref();
    var wrapperHeight = ref("");
    var isToggle = true;
    var updatePanelState = function updatePanelState() {
      nextTick(function () {
        if (!wrapRef.value) {
          return;
        }
        var _headRef$value$getBou = headRef.value.getBoundingClientRect(),
          headHeight = _headRef$value$getBou.height;
        if (!isActive.value) {
          isToggle = false;
          wrapperHeight.value = "".concat(headHeight, "px");
          return;
        }
        if (isToggle) {
          isToggle = false;
          wrapperHeight.value = "auto";
          return;
        }
        setContentWrapperHeight();
      });
    };
    watch(isActive, function () {
      if (wrapperHeight.value === "auto") {
        setContentWrapperHeight();
      }
      nextTick(function () {
        return updatePanelState();
      });
    }, {
      immediate: true
    });
    onMounted(function () {
      if (parent !== null && parent !== void 0 && parent.defaultExpandAll) {
        updatePanelValue();
      }
    });
    var renderDefaultIcon = function renderDefaultIcon() {
      if (props2.placement === "bottom") {
        return isActive.value ? createVNode(ChevronUpIcon, null, null) : createVNode(ChevronDownIcon, null, null);
      }
      return isActive.value ? createVNode(ChevronDownIcon, null, null) : createVNode(ChevronUpIcon, null, null);
    };
    var panelExpandIcon = computed(function () {
      return slots.expandIcon || props2.expandIcon;
    });
    var renderRightIcon = function renderRightIcon() {
      var tNodeRender = panelExpandIcon.value === void 0 ? renderParentTNode : renderTNodeJSX;
      return createVNode("div", {
        "class": "".concat(collapsePanelClass.value, "__header-icon")
      }, [tNodeRender("expandIcon", renderDefaultIcon())]);
    };
    var renderPanelContent = function renderPanelContent() {
      var panelContent = renderContent("default", "content");
      if (props2.destroyOnCollapse && !isActive.value) {
        return null;
      }
      return createVNode("div", {
        "ref": bodyRef,
        "class": "".concat(collapsePanelClass.value, "__content")
      }, [panelContent]);
    };
    var setContentWrapperHeight = function setContentWrapperHeight() {
      var _headRef$value$getBou2 = headRef.value.getBoundingClientRect(),
        headHeight = _headRef$value$getBou2.height;
      var _bodyRef$value$getBou = bodyRef.value.getBoundingClientRect(),
        bodyHeight = _bodyRef$value$getBou.height;
      var height = headHeight + bodyHeight;
      wrapperHeight.value = "".concat(height, "px");
    };
    var onTransitionEnd = function onTransitionEnd() {
      if (isActive.value) {
        wrapperHeight.value = "auto";
      }
    };
    return function () {
      var headerContent = renderTNodeJSX("header");
      var noteContent = renderTNodeJSX("headerRightContent");
      var _leftIcon = renderTNodeJSX("headerLeftIcon");
      return createVNode("div", {
        "ref": wrapRef,
        "class": rootClass.value,
        "style": {
          height: wrapperHeight.value
        },
        "onTransitionend": onTransitionEnd
      }, [createVNode("div", {
        "ref": headRef,
        "class": "".concat(collapsePanelClass.value, "__title"),
        "onClick": handleClick
      }, [createVNode(Cell, {
        "class": ["".concat(collapsePanelClass.value, "__header"), "".concat(collapsePanelClass.value, "__header--").concat(props2.placement), _defineProperty({}, "".concat(collapsePanelClass.value, "__header--expanded"), isActive.value)]
      }, {
        leftIcon: function leftIcon() {
          return _leftIcon;
        },
        title: function title() {
          return headerContent;
        },
        note: function note() {
          return noteContent;
        },
        rightIcon: function rightIcon() {
          return renderRightIcon();
        }
      })]), renderPanelContent()]);
    };
  }
});

export { _CollapsePanel as default };
//# sourceMappingURL=collapse-panel.js.map
