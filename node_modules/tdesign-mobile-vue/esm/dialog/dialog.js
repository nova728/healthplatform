/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import { defineComponent, computed, createVNode, resolveComponent, mergeProps } from 'vue';
import { CloseIcon } from 'tdesign-icons-vue-next';
import get from 'lodash/get';
import isString from 'lodash/isString';
import { Button } from '../button/index.js';
import { Popup } from '../popup/index.js';
import config from '../config.js';
import props from './props.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useClass.js';
import '../button/button.js';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../shared/dom.js';
import 'lodash/isFunction';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../loading/style';
import '../loading/type.js';
import '../loading/plugin.js';
import 'lodash/merge';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import '../button/props.js';
import '../form/hooks.js';
import 'lodash/isBoolean';
import '../button/style';
import '../button/type.js';
import '../popup/popup.js';
import '../popup/props.js';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import '../overlay/style';
import '../hooks/useLockScroll.js';
import '../_util/useTouch.js';
import '../_util/getScrollParent.js';
import '../_util/supportsPassive.js';
import '../popup/style';
import '../popup/type.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var Dialog = defineComponent({
  name: "".concat(prefix, "-dialog"),
  components: {
    TPopup: Popup,
    TButton: Button,
    CloseIcon: CloseIcon
  },
  props: props,
  emits: ["update:visible", "confirm", "overlay-click", "cancel", "close", "closed"],
  setup: function setup(props2, context) {
    var dialogClass = usePrefixClass("dialog");
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var isTextStyleBtn = computed(function () {
      return [props2 === null || props2 === void 0 ? void 0 : props2.confirmBtn, props2 === null || props2 === void 0 ? void 0 : props2.cancelBtn].concat(_toConsumableArray((props2 === null || props2 === void 0 ? void 0 : props2.actions) || [])).some(function (item) {
        return get(item, "variant") === "text";
      });
    });
    var footerClass = computed(function () {
      return ["".concat(dialogClass.value, "__footer"), _defineProperty(_defineProperty({}, "".concat(dialogClass.value, "__footer--column"), props2.buttonLayout === "vertical"), "".concat(dialogClass.value, "__footer--full"), isTextStyleBtn.value && get(props2.actions, "length", 0) === 0)];
    });
    var buttonClass = computed(function () {
      return ["".concat(dialogClass.value, "__button"), _defineProperty(_defineProperty({}, "".concat(dialogClass.value, "__button--").concat(props2.buttonLayout), !isTextStyleBtn.value), "".concat(dialogClass.value, "__button--text"), isTextStyleBtn.value)];
    });
    var rootStyles = computed(function () {
      return {
        width: isString(props2.width) ? props2.width : "".concat(props2.width, "px")
      };
    });
    var handleClose = function handleClose(args) {
      var e = args.e;
      context.emit("update:visible", false);
      context.emit("close", {
        e: e,
        trigger: "close-btn"
      });
    };
    var handleClosed = function handleClosed() {
      context.emit("closed");
    };
    var handleConfirm = function handleConfirm(e) {
      var _context$emit;
      context.emit("update:visible", false);
      (_context$emit = context.emit) === null || _context$emit === void 0 || _context$emit.call(context, "confirm", {
        e: e
      });
    };
    var handleCancel = function handleCancel(e) {
      context.emit("update:visible", false);
      context.emit("close", {
        e: e,
        trigger: "cancel"
      });
      context.emit("cancel", {
        e: e
      });
    };
    var handleOverlayClick = function handleOverlayClick(args) {
      var e = args.e;
      if (!props2.closeOnOverlayClick) {
        return;
      }
      context.emit("update:visible", false);
      context.emit("close", {
        e: e,
        trigger: "overlay"
      });
      context.emit("overlay-click", {
        e: e
      });
    };
    var calcBtn = function calcBtn(btn) {
      return isString(btn) ? {
        content: btn
      } : btn;
    };
    var confirmBtnProps = computed(function () {
      return _objectSpread({
        theme: "primary"
      }, calcBtn(props2.confirmBtn));
    });
    var cancelBtnProps = computed(function () {
      return _objectSpread({
        theme: isTextStyleBtn.value ? "default" : "light"
      }, calcBtn(props2.cancelBtn));
    });
    var actionsBtnProps = computed(function () {
      var _props2$actions;
      return (_props2$actions = props2.actions) === null || _props2$actions === void 0 ? void 0 : _props2$actions.map(function (item) {
        return calcBtn(item);
      });
    });
    return function () {
      var visible = props2.visible,
        showOverlay = props2.showOverlay,
        overlayProps = props2.overlayProps,
        preventScrollThrough = props2.preventScrollThrough,
        destroyOnClose = props2.destroyOnClose,
        zIndex = props2.zIndex,
        closeBtn = props2.closeBtn,
        actions = props2.actions;
      var renderTitleNode = function renderTitleNode() {
        var titleNode = renderTNodeJSX("title");
        if (!titleNode) {
          return null;
        }
        return createVNode("div", {
          "class": "".concat(dialogClass.value, "__header")
        }, [titleNode]);
      };
      var renderContentNode = function renderContentNode() {
        var contentNode = renderContent("default", "content");
        if (!contentNode) {
          return null;
        }
        return createVNode("div", {
          "class": "".concat(dialogClass.value, "__body")
        }, [createVNode("div", {
          "class": "".concat(dialogClass.value, "__body-text")
        }, [contentNode])]);
      };
      var renderActionsNode = function renderActionsNode() {
        var actionsNode = renderTNodeJSX("actions");
        if (actionsNode && actionsBtnProps.value) {
          return actionsBtnProps.value.map(function (item, index) {
            return createVNode(resolveComponent("t-button"), mergeProps({
              "key": index
            }, item, {
              "class": buttonClass.value,
              "onClick": handleCancel
            }), null);
          });
        }
        return null;
      };
      var renderCancelBtnNode = function renderCancelBtnNode() {
        var cancelBtnNode = renderTNodeJSX("cancelBtn");
        if (!actions && cancelBtnNode) {
          return createVNode(resolveComponent("t-button"), mergeProps(cancelBtnProps.value, {
            "class": buttonClass.value,
            "onClick": handleCancel
          }), null);
        }
        return null;
      };
      var renderConfirmBntNode = function renderConfirmBntNode() {
        var confirmBtnNode = renderTNodeJSX("confirmBtn");
        if (!actions && confirmBtnNode) {
          return createVNode(resolveComponent("t-button"), mergeProps(confirmBtnProps.value, {
            "class": buttonClass.value,
            "onClick": handleConfirm
          }), null);
        }
        return null;
      };
      return createVNode(resolveComponent("t-popup"), {
        "visible": visible,
        "placement": "center",
        "show-overlay": showOverlay,
        "overlay-props": overlayProps,
        "prevent-scroll-through": preventScrollThrough,
        "destroy-on-close": destroyOnClose,
        "z-index": zIndex,
        "onClose": handleOverlayClick,
        "onClosed": handleClosed
      }, {
        default: function _default() {
          return [createVNode("div", {
            "class": "".concat(dialogClass.value, " ").concat(context.attrs.class || ""),
            "style": rootStyles.value
          }, [renderTNodeJSX("top"), closeBtn && createVNode("div", {
            "class": "".concat(dialogClass.value, "__close-btn")
          }, [createVNode(resolveComponent("close-icon"), {
            "onClick": handleClose
          }, null)]), createVNode("div", {
            "class": "".concat(dialogClass.value, "__content")
          }, [renderTitleNode(), renderContentNode()]), renderTNodeJSX("middle"), createVNode("div", {
            "class": footerClass.value
          }, [renderActionsNode(), renderCancelBtnNode(), renderConfirmBntNode()])])];
        }
      });
    };
  }
});

export { Dialog as default };
//# sourceMappingURL=dialog.js.map
