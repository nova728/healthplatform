import { DropdownValue } from './type';
import { KeysType } from '../common';
declare const _default: import("vue").DefineComponent<{
    disabled: BooleanConstructor;
    footer: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    keys: {
        type: import("vue").PropType<KeysType>;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<import("./type").DropdownOption[]>;
        default: () => import("./type").DropdownOption[];
    };
    optionsColumns: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    value: {
        type: import("vue").PropType<DropdownValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<DropdownValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<DropdownValue>;
        default: any;
    };
    onChange: import("vue").PropType<(value: DropdownValue) => void>;
    onConfirm: import("vue").PropType<(value: DropdownValue) => void>;
    onReset: import("vue").PropType<(value: DropdownValue) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "change" | "close" | "open" | "opened" | "closed")[], "update:modelValue" | "update:value" | "change" | "close" | "closed" | "open" | "opened", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    disabled: BooleanConstructor;
    footer: {
        type: import("vue").PropType<(h: typeof import("vue").h) => import("../common").SlotReturnValue>;
    };
    keys: {
        type: import("vue").PropType<KeysType>;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    multiple: BooleanConstructor;
    options: {
        type: import("vue").PropType<import("./type").DropdownOption[]>;
        default: () => import("./type").DropdownOption[];
    };
    optionsColumns: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    value: {
        type: import("vue").PropType<DropdownValue>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<DropdownValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<DropdownValue>;
        default: any;
    };
    onChange: import("vue").PropType<(value: DropdownValue) => void>;
    onConfirm: import("vue").PropType<(value: DropdownValue) => void>;
    onReset: import("vue").PropType<(value: DropdownValue) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    onClosed?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
    onOpened?: (...args: any[]) => any;
}, {
    label: string;
    value: DropdownValue;
    defaultValue: DropdownValue;
    modelValue: DropdownValue;
    disabled: boolean;
    multiple: boolean;
    options: import("./type").DropdownOption[];
    optionsColumns: string | number;
}, {}>;
export default _default;
