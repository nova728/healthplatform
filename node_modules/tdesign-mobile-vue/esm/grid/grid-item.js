/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isVNode, defineComponent, inject, computed, createVNode, resolveComponent, mergeProps } from 'vue';
import isObject from 'lodash/isObject';
import isString from 'lodash/isString';
import isFunction from 'lodash/isFunction';
import config from '../config.js';
import props from './grid-item-props.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { Image } from '../image/index.js';
import { Badge } from '../badge/index.js';
import { usePrefixClass } from '../hooks/useClass.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import '../image/image.js';
import '@babel/runtime/helpers/slicedToArray';
import '@vueuse/core';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../shared/dom.js';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../loading/style';
import '../loading/type.js';
import '../loading/plugin.js';
import 'lodash/merge';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import '../image/props.js';
import '../image/style';
import '../image/type.js';
import '../badge/badge.js';
import '../badge/props.js';
import '../badge/style';
import '../badge/type.js';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var prefix = config.prefix;
var _GridItem = defineComponent({
  name: "".concat(prefix, "-grid-item"),
  components: {
    TImage: Image,
    TBadge: Badge
  },
  props: props,
  setup: function setup(props2, context) {
    var gridItemClass = usePrefixClass("grid-item");
    var renderTNodeJSX = useTNodeJSX();
    var _inject = inject("grid"),
      column = _inject.column,
      border = _inject.border,
      align = _inject.align,
      gutter = _inject.gutter;
    var rootStyle = computed(function () {
      var percent = column.value > 0 ? "".concat(100 / +column.value, "%") : 0;
      var style = {
        textAlign: ["center", "left"].includes(align.value) ? align.value : "center"
      };
      if (percent !== 0) {
        style.flexBasis = percent;
      }
      return style;
    });
    var size = computed(function () {
      if (column.value > 4 || !column.value) return "small";
      return column.value < 4 ? "large" : "middle";
    });
    var realImage = computed(function () {
      if (isString(props2.image)) return {
        src: props2.image
      };
      if (isObject(props2.image) && !isFunction(props2.image) && !context.slots.image) {
        return props2.image;
      }
      return null;
    });
    var gridItemClasses = computed(function () {
      return ["".concat(gridItemClass.value), "".concat(gridItemClass.value, "--").concat(props2.layout), _defineProperty(_defineProperty({}, "".concat(gridItemClass.value, "--bordered"), border.value), "".concat(gridItemClass.value, "--surround"), border.value && gutter.value)];
    });
    return function () {
      var _slot;
      var renderImage = function renderImage() {
        return realImage.value ? createVNode(resolveComponent("t-image"), mergeProps({
          "shape": "round"
        }, realImage.value), null) : renderTNodeJSX("image");
      };
      return createVNode("div", {
        "class": gridItemClasses.value,
        "style": rootStyle.value
      }, [createVNode("div", {
        "class": "".concat(gridItemClass.value, "__image ").concat(gridItemClass.value, "__image--").concat(size.value)
      }, [props2.badge ? createVNode(resolveComponent("t-badge"), props2.badge, _isSlot(_slot = renderImage()) ? _slot : {
        default: function _default() {
          return [_slot];
        }
      }) : renderImage()]), createVNode("div", {
        "class": "".concat(gridItemClass.value, "__content ").concat(gridItemClass.value, "__content--").concat(props2.layout)
      }, [createVNode("div", {
        "class": "".concat(gridItemClass.value, "__title ").concat(gridItemClass.value, "__title--").concat(size.value)
      }, [renderTNodeJSX("text")]), createVNode("div", {
        "class": "".concat(gridItemClass.value, "__description ").concat(gridItemClass.value, "__description--").concat(props2.layout)
      }, [renderTNodeJSX("description")])])]);
    };
  }
});

export { _GridItem as default };
//# sourceMappingURL=grid-item.js.map
