/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, ref, resolveComponent, openBlock, createBlock, mergeProps } from 'vue';
import config from '../config.js';
import PickerProps from './props.js';
import _Picker from './picker.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isString';
import 'lodash/isBoolean';
import 'lodash/isFunction';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import 'lodash/isNumber';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/dom.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../hooks/tnode.js';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import './picker-item.js';
import './picker.class.js';
import '@babel/runtime/helpers/classCallCheck';
import '@babel/runtime/helpers/createClass';
import '../hooks/useClass.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import './utils.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var name = "".concat(prefix, "-cascade");
var script = defineComponent({
  name: name,
  components: {
    Picker: _Picker
  },
  props: PickerProps,
  setup: function setup(props, context) {
    var pickerProps = computed(function () {
      return _objectSpread({}, props);
    });
    var finalDepth = ref(1);
    var finalSubOptionsRecord = ref({});
    var generateCascadePickerColumns = function generateCascadePickerColumns(value, options, depth, subOptionsRecord) {
      var columns = [];
      columns.push(options.map(function (option) {
        return {
          label: option.label,
          value: option.value
        };
      }));
      for (var i = 0; i < depth - 1; i++) {
        var x = value[i];
        var subOptions = subOptionsRecord[x];
        if (!subOptions) {
          columns.push([]);
        } else {
          columns.push(subOptions.map(function (option) {
            return {
              label: option.label,
              value: option.value
            };
          }));
        }
      }
      return columns;
    };
    var initDepthAndRecord = function initDepthAndRecord(options) {
      var depth = 1;
      var subOptionsRecord = {};
      function traverse(option, currentDepth) {
        if (!option.children) {
          return;
        }
        subOptionsRecord[option.value] = option.children;
        var nextDepth = currentDepth + 1;
        if (nextDepth > depth) {
          depth = nextDepth;
        }
        option.children.forEach(function (option2) {
          traverse(option2, nextDepth);
        });
      }
      options.forEach(function (option) {
        traverse(option, 1);
      });
      finalDepth.value = depth;
      finalSubOptionsRecord.value = subOptionsRecord;
    };
    initDepthAndRecord(props.columns);
    return {
      name: name,
      finalDepth: finalDepth,
      finalSubOptionsRecord: finalSubOptionsRecord,
      pickerProps: pickerProps,
      generateCascadePickerColumns: generateCascadePickerColumns
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_picker = resolveComponent("picker");
  return openBlock(), createBlock(_component_picker, mergeProps(_ctx.pickerProps, {
    columns: function columns(selected) {
      return _ctx.generateCascadePickerColumns(selected, _ctx.columns, _ctx.finalDepth, _ctx.finalSubOptionsRecord);
    }
  }), null, 16, ["columns"]);
}

script.render = render;

export { script as default };
//# sourceMappingURL=cascade.js.map
