/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { defineComponent, computed, createVNode } from 'vue';
import { InfoCircleIcon, CheckCircleIcon, CloseCircleIcon } from 'tdesign-icons-vue-next';
import config from '../config.js';
import ResultProps from './props.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { Image } from '../image/index.js';
import { useIcon } from '../hooks/icon.js';
import { usePrefixClass } from '../hooks/useClass.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../image/image.js';
import '@babel/runtime/helpers/slicedToArray';
import '@babel/runtime/helpers/defineProperty';
import '@vueuse/core';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../shared/dom.js';
import '../shared/index.js';
import '../shared/functions.js';
import '../shared/util.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import '../loading/style';
import '../loading/type.js';
import '../loading/plugin.js';
import 'lodash/merge';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import '../image/props.js';
import '../image/style';
import '../image/type.js';

var prefix = config.prefix;
var _Result = defineComponent({
  name: "".concat(prefix, "-result"),
  props: ResultProps,
  setup: function setup(props) {
    var resultClass = usePrefixClass("result");
    var renderTNodeJSX = useTNodeJSX();
    var renderIconTNode = useIcon();
    var resultClasses = computed(function () {
      return ["".concat(resultClass.value), "".concat(resultClass.value, "--theme-").concat(props.theme || "default")];
    });
    var renderIcon = function renderIcon() {
      var defaultIcons = {
        default: InfoCircleIcon,
        success: CheckCircleIcon,
        warning: InfoCircleIcon,
        error: CloseCircleIcon
      };
      var iconContent = renderIconTNode("icon", defaultIcons);
      return iconContent ? createVNode(iconContent, {
        "class": "".concat(resultClass.value, "__icon")
      }, null) : null;
    };
    var renderImage = function renderImage() {
      var image = renderTNodeJSX("image");
      if (image) {
        if (typeof image === "string") {
          return createVNode(Image, {
            "src": image
          }, null);
        }
        return image;
      }
      return null;
    };
    var renderThumb = function renderThumb() {
      var image = renderImage();
      return createVNode("div", {
        "class": "".concat(resultClass.value, "__thumb")
      }, [image || renderIcon()]);
    };
    var renderTitle = function renderTitle() {
      var title = renderTNodeJSX("title");
      return title ? createVNode("div", {
        "class": ["".concat(resultClass.value, "__title")]
      }, [title]) : null;
    };
    var renderDescription = function renderDescription() {
      var description = renderTNodeJSX("description");
      return description ? createVNode("div", {
        "class": ["".concat(resultClass.value, "__description")]
      }, [description]) : null;
    };
    return function () {
      return createVNode("div", {
        "class": [resultClasses.value]
      }, [renderThumb(), renderTitle(), renderDescription()]);
    };
  }
});

export { _Result as default };
//# sourceMappingURL=result.js.map
