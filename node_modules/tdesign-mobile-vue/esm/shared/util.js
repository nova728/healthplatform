/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import isNumber from 'lodash/isNumber';
import config from '../config.js';

var prefix = config.prefix;
function toCamel(str) {
  return str.replace(/^\S/, function (m) {
    return m.toUpperCase();
  });
}
var isBrowser = typeof window !== "undefined";
function getCharacterLength(str, maxCharacter) {
  var hasMaxCharacter = typeof maxCharacter === "number";
  if (!str || str.length === 0) {
    if (hasMaxCharacter) {
      return {
        length: 0,
        characters: str
      };
    }
    return 0;
  }
  var len = 0;
  for (var i = 0; i < str.length; i++) {
    var currentStringLength = 0;
    if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
      currentStringLength = 2;
    } else {
      currentStringLength = 1;
    }
    if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
      return {
        length: len,
        characters: str.slice(0, i)
      };
    }
    len += currentStringLength;
  }
  if (hasMaxCharacter) {
    return {
      length: len,
      characters: str
    };
  }
  return len;
}
var sleep = function sleep(ms) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, ms);
  });
};
var uniqueFactory = function uniqueFactory(compName) {
  var number = 0;
  return function () {
    return "".concat(prefix, "-").concat(compName, "_").concat(number++);
  };
};
var convertUnit = function convertUnit(val) {
  if (val == null) return 0;
  return isNumber(val) ? "".concat(val, "px") : val;
};
var reconvertUnit = function reconvertUnit(val) {
  if (val == null) return 0;
  return isNumber(val) ? Number(val) : Number(val.slice(0, -2));
};
var formatNumber = function formatNumber(value) {
  var allowDecimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var allowNegative = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (allowDecimal) {
    var index = value.indexOf(".");
    if (index !== -1) {
      value = "".concat(value.slice(0, index + 1)).concat(value.slice(index).replace(/\./g, ""));
    }
  } else {
    var _value$split = value.split("."),
      _value$split2 = _slicedToArray(_value$split, 1),
      _value$split2$ = _value$split2[0],
      splitValue = _value$split2$ === void 0 ? "" : _value$split2$;
    value = splitValue;
  }
  if (allowNegative) {
    var _index = value.indexOf("-");
    if (_index !== -1) {
      value = "".concat(value.slice(0, _index + 1)).concat(value.slice(_index).replace(/-/g, ""));
    }
  } else {
    value = value.replace(/-/g, "");
  }
  return value.replace(/[^\d.-]/g, "");
};

export { convertUnit, formatNumber, getCharacterLength, isBrowser, reconvertUnit, sleep, toCamel, uniqueFactory };
//# sourceMappingURL=util.js.map
