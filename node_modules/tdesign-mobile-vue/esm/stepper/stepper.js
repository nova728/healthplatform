/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, toRefs, computed, createVNode, withDirectives, vModelDynamic } from 'vue';
import { RemoveIcon, AddIcon } from 'tdesign-icons-vue-next';
import config from '../config.js';
import props from './props.js';
import '../shared/index.js';
import { useFormDisabled } from '../form/hooks.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useDefault } from '../shared/useDefault/index.js';
import { formatNumber } from '../shared/util.js';
import '../shared/functions.js';
import '../shared/component.js';
import '../shared/constants.js';
import '../shared/render.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/camelCase';
import '../shared/dom.js';
import 'lodash/isFunction';
import 'lodash/isString';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import 'lodash/kebabCase';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '@babel/runtime/helpers/defineProperty';
import '../shared/useClickAway/index.js';
import 'lodash/isArray';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import 'lodash/isNumber';
import 'lodash/isBoolean';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';

var prefix = config.prefix;
var _Stepper = defineComponent({
  name: "".concat(prefix, "-stepper"),
  props: props,
  setup: function setup(props2, context) {
    var stepperClass = usePrefixClass("stepper");
    var _useDefault = useDefault(props2, context.emit, "value", "change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      stepperValue = _useDefault2[0];
    var disabled = useFormDisabled();
    var _toRefs = toRefs(props2),
      min = _toRefs.min,
      max = _toRefs.max,
      step = _toRefs.step,
      integer = _toRefs.integer;
    var inputStyle = computed(function () {
      return props2.inputWidth ? {
        width: "".concat(props2.inputWidth, "px")
      } : "";
    });
    var isDisabled = function isDisabled(type) {
      if (disabled.value) return true;
      if (type === "minus" && Number(stepperValue.value) <= min.value) {
        return true;
      }
      if (type === "plus" && Number(stepperValue.value) >= max.value) {
        return true;
      }
      return false;
    };
    var getLen = function getLen(num) {
      var numStr = num.toString();
      return numStr.indexOf(".") === -1 ? 0 : numStr.split(".")[1].length;
    };
    var add = function add(a, b) {
      var maxLen = Math.max(getLen(a), getLen(b));
      var base = Math.pow(10, maxLen);
      return Math.round(a * base + b * base) / base;
    };
    var formatValue = function formatValue(value) {
      return Math.max(Math.min(max.value, value, Number.MAX_SAFE_INTEGER), min.value, Number.MIN_SAFE_INTEGER).toFixed(Math.max(getLen(step.value), getLen(value)));
    };
    var updateValue = function updateValue(value) {
      stepperValue.value = formatNumber("".concat(value), !integer.value);
    };
    var plusValue = function plusValue() {
      if (isDisabled("plus")) {
        var _props2$onOverlimit;
        (_props2$onOverlimit = props2.onOverlimit) === null || _props2$onOverlimit === void 0 || _props2$onOverlimit.call(props2, "plus");
        return;
      }
      updateValue(formatValue(add(Number(stepperValue.value), step.value)));
    };
    var minusValue = function minusValue() {
      if (isDisabled("minus")) {
        var _props2$onOverlimit2;
        (_props2$onOverlimit2 = props2.onOverlimit) === null || _props2$onOverlimit2 === void 0 || _props2$onOverlimit2.call(props2, "minus");
        return;
      }
      updateValue(formatValue(add(Number(stepperValue.value), -step.value)));
    };
    var handleInput = function handleInput(e) {
      var value = formatNumber(e.target.value, !integer.value);
      stepperValue.value = value;
    };
    var handleChange = function handleChange() {
      var formattedValue = formatValue(Number(stepperValue.value));
      updateValue(formattedValue);
    };
    var handleFocus = function handleFocus() {
      var _props2$onFocus;
      (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 || _props2$onFocus.call(props2, Number(stepperValue.value));
    };
    var handleBlur = function handleBlur() {
      var _props2$onBlur;
      (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 || _props2$onBlur.call(props2, Number(stepperValue.value));
    };
    return function () {
      return createVNode("div", {
        "class": ["".concat(stepperClass.value), "".concat(stepperClass.value, "--").concat(props2.size)]
      }, [createVNode("div", {
        "class": ["".concat(stepperClass.value, "__minus"), "".concat(stepperClass.value, "__minus--").concat(props2.theme), "".concat(stepperClass.value, "__icon--").concat(props2.size), "".concat(disabled.value || Number(stepperValue.value) <= props2.min ? "".concat(stepperClass.value, "--").concat(props2.theme, "-disabled") : "")],
        "onClick": minusValue
      }, [createVNode(RemoveIcon, {
        "class": "".concat(stepperClass.value, "__minus-icon")
      }, null)]), withDirectives(createVNode("input", {
        "onUpdate:modelValue": function onUpdateModelValue($event) {
          return stepperValue.value = $event;
        },
        "class": ["".concat(stepperClass.value, "__input"), "".concat(stepperClass.value, "__input--").concat(props2.theme), "".concat(stepperClass.value, "__input--").concat(props2.size), "".concat(disabled.value ? "".concat(stepperClass.value, "--").concat(props2.theme, "-disabled") : "")],
        "type": integer.value ? "tel" : "text",
        "inputmode": integer.value ? "numeric" : "decimal",
        "style": inputStyle.value,
        "disabled": props2.disableInput || disabled.value,
        "readonly": props2.disableInput,
        "onFocus": handleFocus,
        "onBlur": handleBlur,
        "onInput": handleInput,
        "onChange": handleChange
      }, null), [[vModelDynamic, stepperValue.value]]), createVNode("div", {
        "class": ["".concat(stepperClass.value, "__plus"), "".concat(stepperClass.value, "__plus--").concat(props2.theme), "".concat(stepperClass.value, "__icon--").concat(props2.size), "".concat(disabled.value || Number(stepperValue.value) >= props2.max ? "".concat(stepperClass.value, "--").concat(props2.theme, "-disabled") : "")],
        "onClick": plusValue
      }, [createVNode(AddIcon, {
        "class": "".concat(stepperClass.value, "__plus-icon")
      }, null)])]);
    };
  }
});

export { _Stepper as default };
//# sourceMappingURL=stepper.js.map
