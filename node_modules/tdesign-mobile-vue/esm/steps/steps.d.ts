declare const _default: import("vue").DefineComponent<{
    current: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultCurrent: {
        type: import("vue").PropType<string | number>;
    };
    currentStatus: {
        type: import("vue").PropType<"default" | "error" | "process" | "finish">;
        default: "default" | "error" | "process" | "finish";
        validator(val: "default" | "error" | "process" | "finish"): boolean;
    };
    layout: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    readonly: BooleanConstructor;
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
    sequence: {
        type: import("vue").PropType<"reverse" | "positive">;
        default: "reverse" | "positive";
        validator(val: "reverse" | "positive"): boolean;
    };
    onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "update:current")[], "update:modelValue" | "change" | "update:current", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    current: {
        type: import("vue").PropType<string | number>;
        default: any;
    };
    defaultCurrent: {
        type: import("vue").PropType<string | number>;
    };
    currentStatus: {
        type: import("vue").PropType<"default" | "error" | "process" | "finish">;
        default: "default" | "error" | "process" | "finish";
        validator(val: "default" | "error" | "process" | "finish"): boolean;
    };
    layout: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    readonly: BooleanConstructor;
    theme: {
        type: import("vue").PropType<"default" | "dot">;
        default: "default" | "dot";
        validator(val: "default" | "dot"): boolean;
    };
    sequence: {
        type: import("vue").PropType<"reverse" | "positive">;
        default: "reverse" | "positive";
        validator(val: "reverse" | "positive"): boolean;
    };
    onChange: import("vue").PropType<(current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:current"?: (...args: any[]) => any;
}, {
    readonly: boolean;
    layout: "vertical" | "horizontal";
    theme: "default" | "dot";
    current: string | number;
    currentStatus: "default" | "error" | "process" | "finish";
    sequence: "reverse" | "positive";
}, {}>;
export default _default;
