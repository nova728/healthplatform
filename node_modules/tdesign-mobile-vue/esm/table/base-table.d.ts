import { h } from 'vue';
import { BaseTableCellParams, BaseTableCol, TableRowData } from './type';
import { TdLoadingProps } from '../loading/type';
declare const _default: import("vue").DefineComponent<{
    bordered: BooleanConstructor;
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof h, props: BaseTableCellParams<TableRowData>) => import("..").SlotReturnValue)>;
    };
    columns: {
        type: import("vue").PropType<BaseTableCol<TableRowData>[]>;
        default: () => BaseTableCol<TableRowData>[];
    };
    data: {
        type: import("vue").PropType<TableRowData[]>;
        default: () => TableRowData[];
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
        default: string;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("..").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: import("vue").PropType<Partial<TdLoadingProps>>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "middle" | "bottom">;
        default: "top" | "middle" | "bottom";
        validator(val: "top" | "middle" | "bottom"): boolean;
    };
    onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<TableRowData>) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "cell-click" | "row-click")[], "scroll" | "cell-click" | "row-click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    bordered: BooleanConstructor;
    cellEmptyContent: {
        type: import("vue").PropType<string | ((h: typeof h, props: BaseTableCellParams<TableRowData>) => import("..").SlotReturnValue)>;
    };
    columns: {
        type: import("vue").PropType<BaseTableCol<TableRowData>[]>;
        default: () => BaseTableCol<TableRowData>[];
    };
    data: {
        type: import("vue").PropType<TableRowData[]>;
        default: () => TableRowData[];
    };
    empty: {
        type: import("vue").PropType<string | ((h: typeof h) => import("..").SlotReturnValue)>;
        default: string;
    };
    fixedRows: {
        type: import("vue").PropType<number[]>;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    loading: {
        type: import("vue").PropType<boolean | ((h: typeof h) => import("..").SlotReturnValue)>;
        default: any;
    };
    loadingProps: {
        type: import("vue").PropType<Partial<TdLoadingProps>>;
    };
    maxHeight: {
        type: import("vue").PropType<string | number>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    showHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripe: BooleanConstructor;
    tableContentWidth: {
        type: StringConstructor;
        default: string;
    };
    tableLayout: {
        type: import("vue").PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: "fixed" | "auto"): boolean;
    };
    verticalAlign: {
        type: import("vue").PropType<"top" | "middle" | "bottom">;
        default: "top" | "middle" | "bottom";
        validator(val: "top" | "middle" | "bottom"): boolean;
    };
    onCellClick: import("vue").PropType<(context: import("./type").BaseTableCellEventContext<TableRowData>) => void>;
    onRowClick: import("vue").PropType<(context: import("./type").RowEventContext<TableRowData>) => void>;
    onScroll: import("vue").PropType<(params: {
        e: WheelEvent;
    }) => void>;
}>> & {
    onScroll?: (...args: any[]) => any;
    "onCell-click"?: (...args: any[]) => any;
    "onRow-click"?: (...args: any[]) => any;
}, {
    data: TableRowData[];
    columns: BaseTableCol<TableRowData>[];
    loading: boolean | ((h: typeof h) => import("..").SlotReturnValue);
    tableLayout: "fixed" | "auto";
    verticalAlign: "top" | "middle" | "bottom";
    empty: string | ((h: typeof h) => import("..").SlotReturnValue);
    bordered: boolean;
    stripe: boolean;
    tableContentWidth: string;
    rowKey: string;
    showHeader: boolean;
}, {}>;
export default _default;
