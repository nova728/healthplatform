import { TdTextareaProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    allowInputOverMax: BooleanConstructor;
    autofocus: BooleanConstructor;
    autosize: BooleanConstructor;
    bordered: BooleanConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    indicator: BooleanConstructor;
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    layout: {
        type: PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: TdTextareaProps['layout']): boolean;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: NumberConstructor;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    value: {
        type: PropType<import("./type").TextareaValue>;
        default: any;
    };
    modelValue: {
        type: PropType<import("./type").TextareaValue>;
        default: any;
    };
    defaultValue: {
        type: PropType<import("./type").TextareaValue>;
    };
    onBlur: PropType<(value: import("./type").TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: import("./type").TextareaValue, context?: {
        e?: InputEvent;
    }) => void>;
    onFocus: PropType<(value: import("./type").TextareaValue, context: {
        e: FocusEvent;
    }) => void>;
};
export default _default;
