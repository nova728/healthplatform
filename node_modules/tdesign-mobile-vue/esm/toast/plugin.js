/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { createApp } from 'vue';
import isObject from 'lodash/isObject';
import vueToast from './toast.js';
import '../shared/index.js';
import { getAttach } from '../shared/dom.js';
import { isBrowser } from '../shared/util.js';
import 'tdesign-icons-vue-next';
import '../hooks/tnode.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../config.js';
import '../overlay/props.js';
import '../hooks/useClass.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-b9ce5211.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-ff878671.js';
import 'dayjs';
import '../_chunks/dep-021696fd.js';
import '../config-provider/type.js';
import '../overlay/style';
import '../shared/component.js';
import '../shared/functions.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isNumber';
import '../shared/constants.js';
import '../shared/render.js';
import '../shared/render-tnode.js';
import '../shared/useToggle/index.js';
import '../shared/useCountDown/index.js';
import '@babel/runtime/helpers/asyncToGenerator';
import '@babel/runtime/regenerator';
import '@vueuse/core';
import '../shared/useCountDown/utils.js';
import '../shared/useDefault/index.js';
import '../shared/useChildSlots/index.js';
import '@babel/runtime/helpers/toConsumableArray';
import '../shared/useVModel/index.js';
import '../shared/useTouch/index.js';
import '../shared/useScrollParent/index.js';
import '../shared/useExpose/index.js';
import '../shared/useTest/index.js';
import '../shared/useClickAway/index.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/hover.js';
import './props.js';
import '../hooks/useLockScroll.js';
import '../_util/useTouch.js';
import '../_util/getScrollParent.js';
import '../_util/supportsPassive.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var instance = null;
var app;
function Toast(props) {
  if (!isBrowser) return;
  var root = document.createElement("div");
  var container = getAttach(isObject(props) ? props.attach : "body");
  if (container) {
    container.appendChild(root);
  } else {
    console.error("attach is not exist");
  }
  var propsObject = _objectSpread({
    duration: 2e3
  }, parseOptions(props));
  if (instance) {
    instance.clear();
  }
  instance = vueToast;
  instance.clear = function () {
    clearTimeout(instance.timer);
    app.unmount();
    root.remove();
    if (propsObject.onClose) {
      propsObject.onClose();
    }
    instance = null;
  };
  if (propsObject.duration && propsObject.duration > 0) {
    instance.timer = setTimeout(function () {
      instance.clear();
      if (propsObject.onDestroy) {
        propsObject.onDestroy();
      }
    }, propsObject.duration);
  }
  app = createApp(instance, _objectSpread({}, propsObject));
  app.mount(root);
  return instance;
}
Toast.clear = function () {
  if (instance) {
    instance.clear();
  }
};
["loading", "success", "error"].forEach(function (type) {
  if (!type) {
    return;
  }
  Toast[type] = function (options) {
    var props = {
      message: "",
      theme: type
    };
    if (typeof options === "string") {
      props.message = options;
    } else {
      props = _objectSpread(_objectSpread({}, props), options);
    }
    return Toast(props);
  };
});
function parseOptions(message) {
  if (typeof message === "string") {
    return {
      message: message
    };
  }
  return message;
}
Toast.install = function (app2) {
  app2.config.globalProperties.$toast = Toast;
};
var ToastPlugin = Toast;

export { ToastPlugin, ToastPlugin as default };
//# sourceMappingURL=plugin.js.map
