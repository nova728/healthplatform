/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode, resolveComponent, isVNode } from 'vue';
import { Grid, GridItem } from '../grid/index.js';
import { Swiper, SwiperItem } from '../swiper/index.js';
import { usePrefixClass } from '../hooks/useClass.js';
import '../grid/grid.js';
import '../config.js';
import '../grid/props.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import '../grid/grid-item.js';
import 'lodash/isObject';
import '../grid/grid-item-props.js';
import '../hooks/tnode.js';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import '../image/index.js';
import '../image/image.js';
import '@babel/runtime/helpers/slicedToArray';
import '@vueuse/core';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../shared/dom.js';
import '../loading/plugin.js';
import '../shared/component.js';
import '../image/props.js';
import '../badge/index.js';
import '../badge/badge.js';
import '../badge/props.js';
import '../swiper/swiper.js';
import '../swipe-cell/useSwipe.js';
import '../shared/util.js';
import '../swiper/props.js';
import '../shared/useVModel/index.js';
import '../swiper/swiper-item.js';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var ActionSheetGrid = defineComponent({
  components: {
    TGrid: Grid,
    TGridItem: GridItem,
    TSwiper: Swiper,
    TSwiperItem: SwiperItem
  },
  props: {
    items: {
      type: Array,
      required: true
    },
    count: {
      type: Number,
      default: 8
    },
    selected: {
      type: Function,
      default: void 0
    }
  },
  emits: ["selected"],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var actionSheetClass = usePrefixClass("action-sheet");
    var gridColumn = computed(function () {
      return Math.ceil(props.count / 2);
    });
    var pageNum = computed(function () {
      return Math.ceil(props.items.length / props.count);
    });
    var actionItems = computed(function () {
      var res = [];
      for (var i = 0; i < pageNum.value; i++) {
        var temp = props.items.slice(i * props.count, (i + 1) * props.count);
        res.push(temp);
      }
      return res;
    });
    var gridClasses = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty({}, "".concat(actionSheetClass.value, "__grid"), true), "".concat(actionSheetClass.value, "__grid--swiper"), pageNum.value > 1), "".concat(actionSheetClass.value, "__dots"), pageNum.value > 1);
    });
    var handleSelected = function handleSelected(i) {
      emit("selected", i);
    };
    return function () {
      var swiper = function swiper() {
        var swiperItems = actionItems.value.map(function (items, i) {
          var gridItems = items.map(function (item, index) {
            return createVNode(resolveComponent("t-grid-item"), {
              "key": index,
              "text": item.label,
              "image": item.icon,
              "badge": item.badge,
              "onClick": function onClick(event) {
                event.preventDefault();
                handleSelected(i * props.count + index);
              }
            }, null);
          });
          return createVNode(resolveComponent("t-swiper-item"), {
            "key": i
          }, {
            default: function _default() {
              return [createVNode(resolveComponent("t-grid"), {
                "column": gridColumn.value
              }, _isSlot(gridItems) ? gridItems : {
                default: function _default() {
                  return [gridItems];
                }
              })];
            }
          });
        });
        if (actionItems.value.length > 1) {
          return createVNode(resolveComponent("t-swiper"), {
            "autoplay": false,
            "pagination-position": "bottom",
            "navigation": {
              type: "dots",
              showControls: false
            },
            "loop": false,
            "class": "".concat(actionSheetClass.value, "__swiper-wrap"),
            "height": 192
          }, _isSlot(swiperItems) ? swiperItems : {
            default: function _default() {
              return [swiperItems];
            }
          });
        }
        return null;
      };
      var grid = function grid() {
        if (actionItems.value.length === 1) {
          var items = actionItems.value[0].map(function (item, index) {
            return createVNode(resolveComponent("t-grid-item"), {
              "key": index,
              "text": item.label,
              "image": item.icon,
              "badge": item.badge,
              "onClick": function onClick() {
                return handleSelected(index);
              }
            }, null);
          });
          return createVNode(resolveComponent("t-grid"), {
            "column": gridColumn.value
          }, _isSlot(items) ? items : {
            default: function _default() {
              return [items];
            }
          });
        }
        return null;
      };
      return createVNode("div", {
        "class": gridClasses.value
      }, [swiper(), grid()]);
    };
  }
});

export { ActionSheetGrid as default };
//# sourceMappingURL=action-sheet-grid.js.map
