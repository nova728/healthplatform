/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, computed, watch, createVNode, resolveComponent, isVNode } from 'vue';
import ActionSheetList from './action-sheet-list.js';
import ActionSheetGrid from './action-sheet-grid.js';
import { Popup } from '../popup/index.js';
import { Button } from '../button/index.js';
import config from '../config.js';
import props from './props.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useConfig } from '../config-provider/useConfig.js';
import { useDefault } from '../shared/useDefault/index.js';
import '../badge/index.js';
import '../badge/badge.js';
import 'lodash/isNumber';
import 'lodash/isString';
import '../badge/props.js';
import '../hooks/tnode.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import '../shared/component.js';
import '../grid/index.js';
import '../grid/grid.js';
import '../grid/props.js';
import '../grid/grid-item.js';
import '../grid/grid-item-props.js';
import '../image/index.js';
import '../image/image.js';
import '@vueuse/core';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../shared/dom.js';
import '../loading/plugin.js';
import '../image/props.js';
import '../swiper/index.js';
import '../swiper/swiper.js';
import '../swipe-cell/useSwipe.js';
import '../shared/util.js';
import '../swiper/props.js';
import '../shared/useVModel/index.js';
import '../swiper/swiper-item.js';
import '../popup/popup.js';
import '../popup/props.js';
import '../overlay/index.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import '../hooks/useLockScroll.js';
import '../_util/useTouch.js';
import '../_util/getScrollParent.js';
import '../_util/supportsPassive.js';
import '../shared/render-tnode.js';
import '../shared/render.js';
import '../button/button.js';
import '../button/props.js';
import '../form/hooks.js';
import 'lodash/isBoolean';
import '../shared/hover.js';

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}
var prefix = config.prefix;
var ActionSheetVue = defineComponent({
  name: "".concat(prefix, "-action-sheet"),
  components: {
    TPopup: Popup,
    TButton: Button,
    ActionSheetList: ActionSheetList,
    ActionSheetGrid: ActionSheetGrid
  },
  props: props,
  emits: ["selected", "update:modelValue", "cancel", "close", "update:visible"],
  setup: function setup(props2, context) {
    var actionSheetClass = usePrefixClass("action-sheet");
    var _useConfig = useConfig("actionSheet"),
      globalConfig = _useConfig.globalConfig;
    var actionItems = computed(function () {
      return props2.items.map(function (item) {
        if (typeof item === "string") {
          return {
            label: item
          };
        }
        return item;
      });
    });
    var _useDefault = useDefault(props2, context.emit, "visible", "visible-change"),
      _useDefault2 = _slicedToArray(_useDefault, 1),
      currentVisible = _useDefault2[0];
    var rootClasses = computed(function () {
      return _defineProperty({}, "".concat(actionSheetClass.value, "__content"), true);
    });
    var descriptionClasses = computed(function () {
      return _defineProperty(_defineProperty(_defineProperty({}, "".concat(actionSheetClass.value, "__description"), true), "".concat(actionSheetClass.value, "__description--left"), props2.align === "left"), "".concat(actionSheetClass.value, "__description--grid"), props2.theme === "grid");
    });
    watch(function () {
      return currentVisible.value;
    }, function (val) {
      currentVisible.value = val;
    }, {
      immediate: true,
      deep: true
    });
    var hide = function hide(trigger) {
      var _props2$onClose;
      context.emit("update:modelValue", false);
      (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 || _props2$onClose.call(props2, {
        trigger: trigger
      });
    };
    var handleCancel = function handleCancel() {
      var _props2$onCancel;
      (_props2$onCancel = props2.onCancel) === null || _props2$onCancel === void 0 || _props2$onCancel.call(props2);
      context.emit("update:modelValue", false);
    };
    var handleSelected = function handleSelected(index) {
      var _props2$onSelected;
      (_props2$onSelected = props2.onSelected) === null || _props2$onSelected === void 0 || _props2$onSelected.call(props2, props2 === null || props2 === void 0 ? void 0 : props2.items[index], index);
      hide("selected");
    };
    var handleClose = function handleClose() {
      hide("overlay");
    };
    return function () {
      var _slot;
      var root = function root() {
        var description = function description() {
          if (props2.description) {
            return createVNode("p", {
              "class": descriptionClasses.value
            }, [props2.description]);
          }
          return null;
        };
        var list = function list() {
          if (props2.theme === "list") {
            return createVNode(resolveComponent("action-sheet-list"), {
              "align": props2.align,
              "items": actionItems.value,
              "onSelected": handleSelected
            }, null);
          }
        };
        var grid = function grid() {
          if (props2.theme === "grid") {
            return createVNode(resolveComponent("action-sheet-grid"), {
              "items": actionItems.value,
              "count": props2.count,
              "onSelected": handleSelected
            }, null);
          }
        };
        var cancel = function cancel() {
          if (props2.showCancel) {
            return createVNode("div", {
              "class": "".concat(actionSheetClass.value, "__footer")
            }, [createVNode("div", {
              "class": "".concat(actionSheetClass.value, "__gap-").concat(props2.theme)
            }, null), createVNode(resolveComponent("t-button"), {
              "class": "".concat(actionSheetClass.value, "__cancel"),
              "variant": "text",
              "block": true,
              "onClick": handleCancel
            }, {
              default: function _default() {
                return [props2.cancelText || globalConfig.value.cancel];
              }
            })]);
          }
        };
        return createVNode("div", {
          "class": rootClasses.value
        }, [description(), list(), grid(), cancel()]);
      };
      return createVNode(resolveComponent("t-popup"), {
        "visible": currentVisible.value,
        "placement": "bottom",
        "destroy-on-close": true,
        "class": actionSheetClass.value,
        "onClose": handleClose
      }, _isSlot(_slot = root()) ? _slot : {
        default: function _default() {
          return [_slot];
        }
      });
    };
  }
});

export { ActionSheetVue as default };
//# sourceMappingURL=action-sheet.js.map
