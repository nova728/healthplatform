/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, provide, computed, createVNode, Fragment } from 'vue';
import AvatarGroupProps from './avatar-group-props.js';
import config from '../config.js';
import _Avatar from './avatar.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { isValidSize } from '../_common/js/avatar/utils.js';
import '../badge/index.js';
import '../badge/badge.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isNumber';
import 'lodash/isString';
import '../badge/props.js';
import '../shared/component.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../image/index.js';
import '../image/image.js';
import '@vueuse/core';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../shared/dom.js';
import '../loading/plugin.js';
import '../image/props.js';
import './props.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var _AvatarGroup = defineComponent({
  name: "".concat(prefix, "-avatar-group"),
  props: AvatarGroupProps,
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var avatarGroupClass = usePrefixClass("avatar-group");
    provide("avatarGroup", _objectSpread({}, props));
    var direction = props.cascading ? props.cascading.split("-")[0] : "right";
    var isCustomSize = computed(function () {
      return !isValidSize(props.size);
    });
    var avatarGroupClasses = computed(function () {
      return ["".concat(avatarGroupClass.value), "".concat(avatarGroupClass.value, "-offset-").concat(direction), "".concat(avatarGroupClass.value, "-offset-").concat(direction, "-").concat(isCustomSize.value ? "medium" : props.size)];
    });
    var onCollapsedItemClick = function onCollapsedItemClick(e) {
      var _props$onCollapsedIte;
      (_props$onCollapsedIte = props.onCollapsedItemClick) === null || _props$onCollapsedIte === void 0 || _props$onCollapsedIte.call(props, {
        e: e
      });
    };
    var readerAvatar = function readerAvatar() {
      var children = renderTNodeJSX("default");
      var allChildren = [];
      children.forEach(function (child) {
        if (child.type === Fragment) {
          allChildren.push.apply(allChildren, _toConsumableArray(child.children));
        } else {
          allChildren.push(child);
        }
      });
      var isShowCollapse = false;
      var avatarList = [];
      if (allChildren.length > props.max) {
        avatarList = allChildren.slice(0, props.max);
        isShowCollapse = true;
      } else {
        avatarList = allChildren;
      }
      if (isShowCollapse) {
        var collapseAvatar = renderTNodeJSX("collapseAvatar");
        avatarList.push(createVNode("div", {
          "class": "".concat(avatarGroupClass.value, "__collapse--default"),
          "onClick": onCollapsedItemClick
        }, [createVNode(_Avatar, {
          "size": avatarList[0].size || props.size,
          "shape": props.shape
        }, {
          default: function _default() {
            return [collapseAvatar || "+".concat(allChildren.length - props.max)];
          }
        })]));
      }
      return avatarList;
    };
    return function () {
      return createVNode("div", {
        "class": avatarGroupClasses.value
      }, [readerAvatar()]);
    };
  }
});

export { _AvatarGroup as default };
//# sourceMappingURL=avatar-group.js.map
