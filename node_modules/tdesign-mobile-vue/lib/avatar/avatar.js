/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import { defineComponent, inject, computed, createVNode, mergeProps, Fragment } from 'vue';
import { Badge } from '../badge/index.js';
import { Image } from '../image/index.js';
import config from '../config.js';
import AvatarProps from './props.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { isValidSize } from '../_common/js/avatar/utils.js';
import '../badge/badge.js';
import '@babel/runtime/helpers/slicedToArray';
import '@babel/runtime/helpers/defineProperty';
import 'lodash/isNumber';
import 'lodash/isString';
import '../badge/props.js';
import '../shared/component.js';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import '../image/image.js';
import '@vueuse/core';
import 'tdesign-icons-vue-next';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isNull';
import 'lodash/isUndefined';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../shared/dom.js';
import '../loading/plugin.js';
import '../image/props.js';

var prefix = config.prefix;
var _Avatar = defineComponent({
  name: "".concat(prefix, "-avatar"),
  props: AvatarProps,
  setup: function setup(props) {
    var renderTNodeJSX = useTNodeJSX();
    var renderTNodeContent = useContent();
    var avatarClass = usePrefixClass("avatar");
    var avatarGroupProps = inject("avatarGroup", {});
    var hasAvatarGroupProps = Object.keys(avatarGroupProps).length > 0;
    var shapeValue = computed(function () {
      return props.shape || (avatarGroupProps === null || avatarGroupProps === void 0 ? void 0 : avatarGroupProps.shape) || "circle";
    });
    var sizeValue = computed(function () {
      return props.size || (avatarGroupProps === null || avatarGroupProps === void 0 ? void 0 : avatarGroupProps.size);
    });
    var isCustomSize = computed(function () {
      return !isValidSize(sizeValue.value);
    });
    var avatarClasses = computed(function () {
      return ["".concat(avatarClass.value), "".concat(avatarClass.value, "--").concat(isCustomSize.value ? "medium" : sizeValue.value), "".concat(avatarClass.value, "--").concat(shapeValue.value), hasAvatarGroupProps ? "".concat(avatarClass.value, "--border ").concat(avatarClass.value, "--border-").concat(isCustomSize.value ? "medium" : sizeValue.value) : ""];
    });
    var customSize = computed(function () {
      return isCustomSize.value ? {
        height: sizeValue.value,
        width: sizeValue.value,
        "font-size": "".concat(Number.parseInt(sizeValue.value, 10) / 8 * 3 + 2, "px")
      } : {};
    });
    var handleImgLoadError = function handleImgLoadError(e) {
      var _props$onError;
      (_props$onError = props.onError) === null || _props$onError === void 0 || _props$onError.call(props, e);
    };
    return function () {
      var icon = renderTNodeJSX("icon");
      var TNodeContent = renderTNodeContent("default", "content");
      var readerAvatar = function readerAvatar() {
        if (props.image && !props.hideOnLoadFailed) {
          return createVNode(Image, mergeProps({
            "src": props.image,
            "alt": props.alt
          }, props.imageProps, {
            "onError": handleImgLoadError
          }), null);
        }
        if (icon) {
          return createVNode("div", {
            "class": "".concat(avatarClass.value, "__icon")
          }, [icon]);
        }
        return createVNode(Fragment, null, [TNodeContent]);
      };
      return createVNode("div", {
        "class": "".concat(avatarClass.value, "__wrapper")
      }, [createVNode("div", {
        "class": "".concat(avatarClass.value, "__badge")
      }, [createVNode(Badge, props.badgeProps, {
        default: function _default() {
          return [createVNode("div", {
            "class": avatarClasses.value,
            "style": customSize.value
          }, [readerAvatar()])];
        }
      })])]);
    };
  }
});

export { _Avatar as default };
//# sourceMappingURL=avatar.js.map
