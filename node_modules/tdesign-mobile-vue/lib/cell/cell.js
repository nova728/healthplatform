/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, withDirectives, createVNode, resolveDirective } from 'vue';
import { ChevronRightIcon } from 'tdesign-icons-vue-next';
import config from '../config.js';
import props from './props.js';
import { useFormDisabled } from '../form/hooks.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import Hover from '../shared/hover.js';
import 'lodash/isBoolean';
import '../config-provider/useConfig.js';
import 'lodash/isFunction';
import 'lodash/cloneDeep';
import 'lodash/isString';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';

var prefix = config.prefix;
var _Cell = defineComponent({
  name: "".concat(prefix, "-cell"),
  directives: {
    Hover: Hover
  },
  props: props,
  setup: function setup(props2) {
    var readerTNodeJSX = useTNodeJSX();
    var readerTNodeContent = useContent();
    var disabled = useFormDisabled();
    var cellClass = usePrefixClass("cell");
    var cellClasses = computed(function () {
      return ["".concat(cellClass.value), "".concat(cellClass.value, "--").concat(props2.align), _defineProperty({}, "".concat(cellClass.value, "--borderless"), !props2.bordered)];
    });
    var hoverDisabled = computed(function () {
      return !props2.hover || disabled.value;
    });
    var handleClick = function handleClick(e) {
      if (!disabled.value) {
        var _props2$onClick;
        (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, {
          e: e
        });
      }
    };
    var readerImage = function readerImage() {
      if (typeof props2.image === "string") {
        return createVNode("img", {
          "src": props2.image,
          "class": "".concat(cellClass.value, "__left-image")
        }, null);
      }
      var image = readerTNodeJSX("image");
      return image;
    };
    var readerLeft = function readerLeft() {
      var leftIcon = readerTNodeJSX("leftIcon");
      return createVNode("div", {
        "class": "".concat(cellClass.value, "__left")
      }, [leftIcon && createVNode("div", {
        "class": "".concat(cellClass.value, "__left-icon")
      }, [leftIcon]), readerImage()]);
    };
    var readerTitle = function readerTitle() {
      var title = readerTNodeJSX("title");
      if (!title) {
        return null;
      }
      var description = readerTNodeJSX("description");
      return createVNode("div", {
        "class": "".concat(cellClass.value, "__title")
      }, [createVNode("div", {
        "class": "".concat(cellClass.value, "__title-text")
      }, [title, props2.required && createVNode("span", {
        "class": "".concat(cellClass.value, "--required")
      }, ["\xA0*"])]), description && createVNode("div", {
        "class": "".concat(cellClass.value, "__description")
      }, [description])]);
    };
    var readerRight = function readerRight() {
      var rightIcon = props2.arrow ? createVNode(ChevronRightIcon, null, null) : readerTNodeJSX("rightIcon");
      if (!rightIcon) {
        return null;
      }
      return createVNode("div", {
        "class": "".concat(cellClass.value, "__right")
      }, [createVNode("div", {
        "class": "".concat(cellClass.value, "__right-icon")
      }, [rightIcon])]);
    };
    return function () {
      var note = readerTNodeContent("default", "note");
      return withDirectives(createVNode("div", {
        "class": cellClasses.value,
        "onClick": handleClick
      }, [readerLeft(), readerTitle(), note && createVNode("div", {
        "class": "".concat(cellClass.value, "__note")
      }, [note]), readerRight()]), [[resolveDirective("hover"), {
        className: "".concat(cellClass.value, "--hover"),
        disabledHover: hoverDisabled.value
      }]]);
    };
  }
});

export { _Cell as default };
//# sourceMappingURL=cell.js.map
