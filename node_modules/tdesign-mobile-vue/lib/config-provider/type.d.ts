import { GlobalIconConfig } from 'tdesign-icons-vue-next';
import { TNode } from '../common';
export interface GlobalConfigProvider {
    actionSheet?: ActionSheetConfig;
    calendar?: CalendarConfig;
    cascader?: CascaderConfig;
    classPrefix?: string;
    dropdownMenu?: DropdownMenuConfig;
    dateTimePicker?: DateTimePickerConfig;
    list?: ListConfig;
    picker?: PickerConfig;
    pullDownRefresh?: PullDownRefreshConfig;
    rate?: RateConfig;
    tabBar?: TabBarConfig;
    table?: TableConfig;
    upload?: UploadConfig;
    guide?: GuideConfig;
}
export interface ActionSheetConfig {
    cancel?: string;
}
export interface CalendarConfig {
    confirm?: string;
    title?: string;
    weekdays?: string[];
    monthTitle?: string;
    months?: string[];
}
export interface CascaderConfig {
    title?: string;
    placeholder?: string;
}
export interface DropdownMenuConfig {
    reset?: string;
    confirm?: string;
}
export interface DateTimePickerConfig {
    title?: string;
    cancel?: string;
    confirm?: string;
    format?: string;
    yearLabel?: string;
    monthLabel?: string;
    dateLabel?: string;
    hourLabel?: string;
    minuteLabel?: string;
    secondLabel?: string;
}
export interface PickerConfig {
    cancel?: string;
    confirm?: string;
}
export interface PullDownRefreshConfig {
    loadingTexts?: string[];
}
export interface RateConfig {
    valueText?: string;
    noValueText?: string;
}
export interface TabBarConfig {
    newsAriaLabel?: string;
    moreNewsAriaLabel?: string;
    haveNewsAriaLabel?: string;
    haveMoreNewsAriaLabel?: string;
}
export interface TableConfig {
    empty?: string | TNode;
}
export declare type IconConfig = GlobalIconConfig;
export interface ListConfig {
    loading?: string;
    loadingMoreText?: string;
    pulling?: string;
    loosing?: string;
    success?: string;
}
export interface UploadConfig {
    progress?: UploadConfigProgress;
}
export interface UploadConfigProgress {
    failText?: string;
    successText?: string;
    uploadingText?: string;
    waitingText?: string;
}
export interface GuideConfig {
    next?: string;
    skip?: string;
    finish?: string;
    back?: string;
}
