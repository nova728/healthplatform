import { PropType } from 'vue';
import { InputValue } from './type';
declare const _default: import("vue").DefineComponent<{
    labelAlign: {
        type: StringConstructor;
        default: string;
    };
    pattern: {
        type: StringConstructor;
    };
    inputmode: {
        type: PropType<"search" | "text" | "none" | "url" | "email" | "tel" | "numeric" | "decimal">;
        validator(val: string): boolean;
    };
    align: {
        type: PropType<"left" | "center" | "right">;
        default: "left" | "center" | "right";
        validator(val: "left" | "center" | "right"): boolean;
    };
    allowInputOverMax: BooleanConstructor;
    autocomplete: {
        type: StringConstructor;
        default: any;
    };
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearTrigger: {
        type: PropType<"focus" | "always">;
        default: "focus" | "always";
        validator(val: "focus" | "always"): boolean;
    };
    clearable: BooleanConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: PropType<import("./type").InputFormatType>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    layout: {
        type: PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    spellCheck: BooleanConstructor;
    status: {
        type: PropType<"default" | "error" | "warning" | "success">;
        default: "default" | "error" | "warning" | "success";
        validator(val: "default" | "error" | "warning" | "success"): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    type: {
        type: PropType<"number" | "search" | "text" | "submit" | "hidden" | "url" | "password" | "tel">;
        default: "number" | "search" | "text" | "submit" | "hidden" | "url" | "password" | "tel";
        validator(val: "number" | "search" | "text" | "submit" | "hidden" | "url" | "password" | "tel"): boolean;
    };
    value: {
        type: PropType<InputValue>;
        default: any;
    };
    modelValue: {
        type: PropType<InputValue>;
        default: any;
    };
    defaultValue: {
        type: PropType<InputValue>;
    };
    onBlur: PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: InputValue, context?: {
        e?: MouseEvent | InputEvent | CompositionEvent;
        trigger: "input" | "initial" | "clear";
    }) => void>;
    onClear: PropType<(context: {
        e: TouchEvent;
    }) => void>;
    onFocus: PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onValidate: PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    labelAlign: {
        type: StringConstructor;
        default: string;
    };
    pattern: {
        type: StringConstructor;
    };
    inputmode: {
        type: PropType<"search" | "text" | "none" | "url" | "email" | "tel" | "numeric" | "decimal">;
        validator(val: string): boolean;
    };
    align: {
        type: PropType<"left" | "center" | "right">;
        default: "left" | "center" | "right";
        validator(val: "left" | "center" | "right"): boolean;
    };
    allowInputOverMax: BooleanConstructor;
    autocomplete: {
        type: StringConstructor;
        default: any;
    };
    autofocus: BooleanConstructor;
    borderless: BooleanConstructor;
    clearTrigger: {
        type: PropType<"focus" | "always">;
        default: "focus" | "always";
        validator(val: "focus" | "always"): boolean;
    };
    clearable: BooleanConstructor;
    disabled: {
        type: BooleanConstructor;
        default: any;
    };
    format: {
        type: PropType<import("./type").InputFormatType>;
    };
    label: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    layout: {
        type: PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    maxcharacter: {
        type: NumberConstructor;
    };
    maxlength: {
        type: PropType<string | number>;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    prefixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    readonly: {
        type: BooleanConstructor;
        default: any;
    };
    spellCheck: BooleanConstructor;
    status: {
        type: PropType<"default" | "error" | "warning" | "success">;
        default: "default" | "error" | "warning" | "success";
        validator(val: "default" | "error" | "warning" | "success"): boolean;
    };
    suffix: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    suffixIcon: {
        type: PropType<(h: typeof import("vue").h) => import("..").SlotReturnValue>;
    };
    tips: {
        type: PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    type: {
        type: PropType<"number" | "search" | "text" | "submit" | "hidden" | "url" | "password" | "tel">;
        default: "number" | "search" | "text" | "submit" | "hidden" | "url" | "password" | "tel";
        validator(val: "number" | "search" | "text" | "submit" | "hidden" | "url" | "password" | "tel"): boolean;
    };
    value: {
        type: PropType<InputValue>;
        default: any;
    };
    modelValue: {
        type: PropType<InputValue>;
        default: any;
    };
    defaultValue: {
        type: PropType<InputValue>;
    };
    onBlur: PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onChange: PropType<(value: InputValue, context?: {
        e?: MouseEvent | InputEvent | CompositionEvent;
        trigger: "input" | "initial" | "clear";
    }) => void>;
    onClear: PropType<(context: {
        e: TouchEvent;
    }) => void>;
    onFocus: PropType<(value: InputValue, context: {
        e: FocusEvent;
    }) => void>;
    onValidate: PropType<(context: {
        error?: "exceed-maximum" | "below-minimum";
    }) => void>;
}>>, {
    readonly: boolean;
    value: InputValue;
    type: "number" | "search" | "text" | "submit" | "hidden" | "url" | "password" | "tel";
    modelValue: InputValue;
    name: string;
    status: "default" | "error" | "warning" | "success";
    layout: "vertical" | "horizontal";
    disabled: boolean;
    align: "left" | "center" | "right";
    borderless: boolean;
    placeholder: string;
    labelAlign: string;
    clearTrigger: "focus" | "always";
    allowInputOverMax: boolean;
    autocomplete: string;
    autofocus: boolean;
    clearable: boolean;
    spellCheck: boolean;
}, {}>;
export default _default;
