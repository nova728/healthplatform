/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, computed, createVNode } from 'vue';
import config from '../config.js';
import props from './props.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useFormDisabled } from '../form/hooks.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import 'lodash/isBoolean';

var prefix = config.prefix;
var _Link = defineComponent({
  name: "".concat(prefix, "-link"),
  props: props,
  setup: function setup(props2) {
    var linkClass = usePrefixClass("link");
    var renderTNodeJSX = useTNodeJSX();
    var renderTNodeContent = useContent();
    var isDisabled = useFormDisabled();
    var linkClasses = computed(function () {
      return [linkClass.value, "".concat(linkClass.value, "--").concat(props2.theme || "default"), "".concat(linkClass.value, "--").concat(props2.size || "medium"), _defineProperty(_defineProperty(_defineProperty({}, "".concat(linkClass.value, "--disabled"), props2.disabled), "".concat(linkClass.value, "--underline"), props2.underline), "".concat(linkClass.value, "--hover"), props2.hover && !props2.disabled)];
    });
    var handleClick = function handleClick(e) {
      var _props2$onClick;
      if (props2.disabled) return;
      (_props2$onClick = props2.onClick) === null || _props2$onClick === void 0 || _props2$onClick.call(props2, e);
    };
    var renderContent = function renderContent() {
      var content = renderTNodeContent("default", "content");
      return content ? createVNode("span", {
        "class": ["".concat(linkClass.value, "__content")]
      }, [content]) : null;
    };
    var renderPrefixIcon = function renderPrefixIcon() {
      var prefixIcon = renderTNodeJSX("prefixIcon");
      return prefixIcon ? createVNode("span", {
        "class": ["".concat(linkClass.value, "__prefix-icon")]
      }, [prefixIcon]) : null;
    };
    var renderSuffixIcon = function renderSuffixIcon() {
      var suffixIcon = renderTNodeJSX("suffixIcon");
      return suffixIcon ? createVNode("span", {
        "class": ["".concat(linkClass.value, "__suffix-icon")]
      }, [suffixIcon]) : null;
    };
    return function () {
      return createVNode("a", {
        "class": linkClasses.value,
        "aria-disabled": isDisabled.value,
        "target": props2.target,
        "href": isDisabled.value || !props2.href ? void 0 : props2.href,
        "onClick": handleClick
      }, [renderPrefixIcon(), renderContent(), renderSuffixIcon()]);
    };
  }
});

export { _Link as default };
//# sourceMappingURL=link.js.map
