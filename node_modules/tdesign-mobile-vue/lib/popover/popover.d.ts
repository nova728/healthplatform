declare const _default: import("vue").DefineComponent<{
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placement: {
        type: import("vue").PropType<"left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"error" | "dark" | "light" | "warning" | "success" | "brand">;
        default: "error" | "dark" | "light" | "warning" | "success" | "brand";
        validator(val: "error" | "dark" | "light" | "warning" | "success" | "brand"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "visible-change" | "update:visible")[], "update:modelValue" | "visible-change" | "update:visible", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    content: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    default: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    placement: {
        type: import("vue").PropType<"left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom"): boolean;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"error" | "dark" | "light" | "warning" | "success" | "brand">;
        default: "error" | "dark" | "light" | "warning" | "success" | "brand";
        validator(val: "error" | "dark" | "light" | "warning" | "success" | "brand"): boolean;
    };
    triggerElement: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
    };
    visible: {
        type: BooleanConstructor;
        default: any;
    };
    modelValue: {
        type: BooleanConstructor;
        default: any;
    };
    defaultVisible: BooleanConstructor;
    onVisibleChange: import("vue").PropType<(visible: boolean) => void>;
}>> & {
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onVisible-change"?: (...args: any[]) => any;
    "onUpdate:visible"?: (...args: any[]) => any;
}, {
    modelValue: boolean;
    visible: boolean;
    theme: "error" | "dark" | "light" | "warning" | "success" | "brand";
    placement: "left" | "right" | "top" | "bottom" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    defaultVisible: boolean;
    closeOnClickOutside: boolean;
    showArrow: boolean;
}, {}>;
export default _default;
