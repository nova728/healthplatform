/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { defineComponent, ref, getCurrentInstance, watch, nextTick, computed, h, resolveComponent, openBlock, createBlock, Teleport, createVNode, mergeProps, Transition, withCtx, withDirectives, createElementVNode, createElementBlock, normalizeClass, createCommentVNode, renderSlot, vShow } from 'vue';
import { CloseIcon } from 'tdesign-icons-vue-next';
import popupProps from './props.js';
import { Overlay } from '../overlay/index.js';
import config from '../config.js';
import { getAttach } from '../shared/dom.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useLockScroll } from '../hooks/useLockScroll.js';
import TNodeComponent from '../shared/render-tnode.js';
import { useDefault } from '../shared/useDefault/index.js';
import { renderTNode } from '../shared/render.js';
import { isBrowser } from '../shared/util.js';
import '../overlay/overlay.js';
import '../overlay/props.js';
import '../hooks/tnode.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import '../shared/component.js';
import '../_util/useTouch.js';
import '../_util/getScrollParent.js';
import '../_util/supportsPassive.js';
import 'lodash/isNumber';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var script = defineComponent({
  name: "".concat(prefix, "-popup"),
  components: {
    TNode: TNodeComponent,
    TOverlay: Overlay
  },
  inheritAttrs: false,
  props: popupProps,
  emits: ["open", "close", "opened", "closed", "visible-change", "update:visible", "update:modelValue"],
  setup: function setup(props, context) {
    var popupClass = usePrefixClass("popup");
    var popupRef = ref();
    var currentInstance = getCurrentInstance();
    var _useDefault = useDefault(props, context.emit, "visible", "visible-change"),
      _useDefault2 = _slicedToArray(_useDefault, 2),
      currentVisible = _useDefault2[0],
      setVisible = _useDefault2[1];
    var wrapperVisible = ref(currentVisible.value);
    var innerVisible = ref(currentVisible.value);
    watch(currentVisible, function (v) {
      if (v) {
        wrapperVisible.value = v;
        if (props.destroyOnClose) {
          nextTick(function () {
            innerVisible.value = v;
          });
        } else {
          innerVisible.value = v;
        }
      } else {
        innerVisible.value = v;
      }
    });
    var rootStyles = computed(function () {
      var styles = {};
      if (props.zIndex) {
        styles.zIndex = "".concat(props.zIndex);
      }
      return _objectSpread(_objectSpread({}, context.attrs.style), styles);
    });
    var contentClasses = computed(function () {
      return _defineProperty({}, "".concat(popupClass.value, "--").concat(props.placement), true);
    });
    var contentTransitionName = computed(function () {
      var transitionName = props.transitionName,
        placement = props.placement;
      if (transitionName) return transitionName;
      if (placement === "center") return "fade-zoom";
      return "slide-".concat(placement);
    });
    var closeBtnNode = computed(function () {
      return renderTNode(currentInstance, "closeBtn", {
        defaultNode: h(CloseIcon, {
          size: "24px"
        })
      });
    });
    var handleCloseClick = function handleCloseClick(e) {
      var _props$onClose;
      (_props$onClose = props.onClose) === null || _props$onClose === void 0 || _props$onClose.call(props, {
        e: e
      });
      setVisible(false, {
        trigger: "close-btn"
      });
    };
    var handleOverlayClick = function handleOverlayClick(args) {
      var _props$onClose2;
      var e = args.e;
      if (!props.closeOnOverlayClick) {
        return;
      }
      (_props$onClose2 = props.onClose) === null || _props$onClose2 === void 0 || _props$onClose2.call(props, {
        e: e
      });
      setVisible(false, {
        trigger: "overlay"
      });
    };
    var afterLeave = function afterLeave() {
      var _props$onClosed;
      wrapperVisible.value = false;
      (_props$onClosed = props.onClosed) === null || _props$onClosed === void 0 || _props$onClosed.call(props);
    };
    var afterEnter = function afterEnter() {
      var _props$onOpened;
      return (_props$onOpened = props.onOpened) === null || _props$onOpened === void 0 ? void 0 : _props$onOpened.call(props);
    };
    var to = computed(function () {
      var _props$attach;
      if (!isBrowser || !props.attach) return void 0;
      return getAttach((_props$attach = props.attach) !== null && _props$attach !== void 0 ? _props$attach : "body");
    });
    watch(function () {
      return currentVisible.value;
    }, function (val) {
      if (val) {
        var _props$onOpen;
        (_props$onOpen = props.onOpen) === null || _props$onOpen === void 0 || _props$onOpen.call(props);
        setVisible(true);
      }
    });
    useLockScroll(popupRef, function () {
      return wrapperVisible.value && props.preventScrollThrough;
    }, popupClass.value);
    return {
      to: to,
      popupClass: popupClass,
      wrapperVisible: wrapperVisible,
      innerVisible: innerVisible,
      currentVisible: currentVisible,
      rootStyles: rootStyles,
      contentClasses: contentClasses,
      contentTransitionName: contentTransitionName,
      closeBtnNode: closeBtnNode,
      afterEnter: afterEnter,
      afterLeave: afterLeave,
      handleOverlayClick: handleOverlayClick,
      handleCloseClick: handleCloseClick
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_t_overlay = resolveComponent("t-overlay");
  var _component_t_node = resolveComponent("t-node");
  return !_ctx.destroyOnClose || _ctx.wrapperVisible ? (openBlock(), createBlock(Teleport, {
    key: 0,
    to: _ctx.to,
    disabled: !_ctx.to
  }, [createVNode(_component_t_overlay, mergeProps(_ctx.overlayProps, {
    visible: _ctx.innerVisible && _ctx.showOverlay,
    onClick: _ctx.handleOverlayClick
  }), null, 16, ["visible", "onClick"]), createVNode(Transition, {
    name: _ctx.contentTransitionName,
    onAfterEnter: _ctx.afterEnter,
    onAfterLeave: _ctx.afterLeave
  }, {
    default: withCtx(function () {
      return [withDirectives(createElementVNode("div", mergeProps({
        ref: "popupRef",
        class: [_ctx.popupClass, _ctx.$attrs.class, _ctx.contentClasses],
        style: _ctx.rootStyles
      }, _ctx.$attrs), [_ctx.closeBtnNode ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass("".concat(_ctx.popupClass, "__close")),
        onClick: _cache[0] || (_cache[0] = function () {
          return _ctx.handleCloseClick && _ctx.handleCloseClick.apply(_ctx, arguments);
        })
      }, [createVNode(_component_t_node, {
        content: _ctx.closeBtnNode
      }, null, 8, ["content"])], 2)) : createCommentVNode("", true), renderSlot(_ctx.$slots, "default")], 16), [[vShow, _ctx.innerVisible]])];
    }),
    _: 3
  }, 8, ["name", "onAfterEnter", "onAfterLeave"])], 8, ["to", "disabled"])) : createCommentVNode("", true);
}

script.render = render;

export { script as default };
//# sourceMappingURL=popup.js.map
