declare const _default: import("vue").DefineComponent<{
    action: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    autocompleteOptions: {
        type: import("vue").PropType<import("./type").AutocompleteOption[]>;
    };
    center: BooleanConstructor;
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    focus: BooleanConstructor;
    leftIcon: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    readonly: BooleanConstructor;
    shape: {
        type: import("vue").PropType<"round" | "square">;
        default: "round" | "square";
        validator(val: "round" | "square"): boolean;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onActionClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onBlur: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e?: MouseEvent | InputEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onSearch: import("vue").PropType<(context?: {
        value: string;
        trigger: "submit" | "clear" | "option-click";
        e?: MouseEvent | InputEvent;
    }) => void>;
    onSubmit: import("vue").PropType<(context: {
        value: string;
        e: KeyboardEvent;
    }) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    action: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    autocompleteOptions: {
        type: import("vue").PropType<import("./type").AutocompleteOption[]>;
    };
    center: BooleanConstructor;
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    focus: BooleanConstructor;
    leftIcon: {
        type: import("vue").PropType<string | ((h: typeof import("vue").h) => import("..").SlotReturnValue)>;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    readonly: BooleanConstructor;
    shape: {
        type: import("vue").PropType<"round" | "square">;
        default: "round" | "square";
        validator(val: "round" | "square"): boolean;
    };
    value: {
        type: StringConstructor;
        default: any;
    };
    modelValue: {
        type: StringConstructor;
        default: any;
    };
    defaultValue: {
        type: StringConstructor;
        default: string;
    };
    onActionClick: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onBlur: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: string, context: {
        e?: MouseEvent | InputEvent;
    }) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onFocus: import("vue").PropType<(context: {
        value: string;
        e: FocusEvent;
    }) => void>;
    onSearch: import("vue").PropType<(context?: {
        value: string;
        trigger: "submit" | "clear" | "option-click";
        e?: MouseEvent | InputEvent;
    }) => void>;
    onSubmit: import("vue").PropType<(context: {
        value: string;
        e: KeyboardEvent;
    }) => void>;
}>>, {
    readonly: boolean;
    center: boolean;
    value: string;
    defaultValue: string;
    modelValue: string;
    focus: boolean;
    disabled: boolean;
    shape: "round" | "square";
    placeholder: string;
    clearable: boolean;
    action: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
    leftIcon: string | ((h: typeof import("vue").h) => import("..").SlotReturnValue);
}, {}>;
export default _default;
