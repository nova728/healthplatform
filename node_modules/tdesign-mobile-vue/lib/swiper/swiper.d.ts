import { SwiperChangeSource, SwiperNavigation } from './type';
declare const _default: import("vue").DefineComponent<{
    animation: {
        type: import("vue").PropType<"slide">;
        default: "slide";
        validator(val: "slide"): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue) | SwiperNavigation>;
    };
    nextMargin: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    previousMargin: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    type: {
        type: import("vue").PropType<"default" | "card">;
        default: "default" | "card";
        validator(val: "default" | "card"): boolean;
    };
    disabled: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    onChange: import("vue").PropType<(current: number, context: {
        source: SwiperChangeSource;
    }) => void>;
    onClick: import("vue").PropType<(index: number) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change" | "update:current" | "transitionenter" | "transitionleave")[], "update:modelValue" | "change" | "update:current" | "transitionenter" | "transitionleave", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    animation: {
        type: import("vue").PropType<"slide">;
        default: "slide";
        validator(val: "slide"): boolean;
    };
    autoplay: {
        type: BooleanConstructor;
        default: boolean;
    };
    current: {
        type: NumberConstructor;
        default: any;
    };
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    defaultCurrent: {
        type: NumberConstructor;
        default: number;
    };
    direction: {
        type: import("vue").PropType<"vertical" | "horizontal">;
        default: "vertical" | "horizontal";
        validator(val: "vertical" | "horizontal"): boolean;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
    interval: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    navigation: {
        type: import("vue").PropType<((h: typeof import("vue").h) => import("..").SlotReturnValue) | SwiperNavigation>;
    };
    nextMargin: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    previousMargin: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    type: {
        type: import("vue").PropType<"default" | "card">;
        default: "default" | "card";
        validator(val: "default" | "card"): boolean;
    };
    disabled: {
        type: import("vue").PropType<Boolean>;
        default: boolean;
    };
    onChange: import("vue").PropType<(current: number, context: {
        source: SwiperChangeSource;
    }) => void>;
    onClick: import("vue").PropType<(index: number) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:current"?: (...args: any[]) => any;
    onTransitionenter?: (...args: any[]) => any;
    onTransitionleave?: (...args: any[]) => any;
}, {
    type: "default" | "card";
    modelValue: number;
    direction: "vertical" | "horizontal";
    duration: number;
    disabled: Boolean;
    animation: "slide";
    current: number;
    defaultCurrent: number;
    autoplay: boolean;
    nextMargin: string | number;
    previousMargin: string | number;
    interval: number;
    loop: boolean;
}, {}>;
export default _default;
