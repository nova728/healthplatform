declare const _default: import("vue").DefineComponent<{
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    fixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    safeAreaInsetBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    shape: {
        type: import("vue").PropType<"round" | "normal">;
        default: "round" | "normal";
        validator(val: "round" | "normal"): boolean;
    };
    split: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"normal" | "tag">;
        default: "normal" | "tag";
        validator(val: "normal" | "tag"): boolean;
    };
    value: {
        type: import("vue").PropType<string | number | (string | number)[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number | (string | number)[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<string | number | (string | number)[]>;
    };
    onChange: import("vue").PropType<(value: string | number) => void>;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "update:value" | "change")[], "update:modelValue" | "update:value" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    fixed: {
        type: BooleanConstructor;
        default: boolean;
    };
    safeAreaInsetBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    shape: {
        type: import("vue").PropType<"round" | "normal">;
        default: "round" | "normal";
        validator(val: "round" | "normal"): boolean;
    };
    split: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: import("vue").PropType<"normal" | "tag">;
        default: "normal" | "tag";
        validator(val: "normal" | "tag"): boolean;
    };
    value: {
        type: import("vue").PropType<string | number | (string | number)[]>;
        default: any;
    };
    modelValue: {
        type: import("vue").PropType<string | number | (string | number)[]>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<string | number | (string | number)[]>;
    };
    onChange: import("vue").PropType<(value: string | number) => void>;
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onUpdate:value"?: (...args: any[]) => any;
}, {
    split: boolean;
    fixed: boolean;
    value: string | number | (string | number)[];
    modelValue: string | number | (string | number)[];
    theme: "normal" | "tag";
    shape: "round" | "normal";
    bordered: boolean;
    safeAreaInsetBottom: boolean;
}, {}>;
export default _default;
