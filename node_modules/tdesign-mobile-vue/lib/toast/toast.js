/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, computed, h, createVNode } from 'vue';
import { LoadingIcon, CheckCircleIcon, CloseCircleIcon } from 'tdesign-icons-vue-next';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import { Overlay } from '../overlay/index.js';
import ToastProps from './props.js';
import config from '../config.js';
import { useLockScroll } from '../hooks/useLockScroll.js';
import { usePrefixClass } from '../hooks/useClass.js';
import 'lodash/isFunction';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isString';
import 'lodash/isObject';
import '../overlay/overlay.js';
import '../shared/dom.js';
import '../overlay/props.js';
import '../config-provider/useConfig.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import 'lodash/merge';
import 'lodash/isArray';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import '../shared/component.js';
import '../_util/useTouch.js';
import '../_util/getScrollParent.js';
import '../_util/supportsPassive.js';
import '../shared/util.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/isNumber';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var vueToast = defineComponent({
  name: "".concat(prefix, "-toast"),
  props: ToastProps,
  setup: function setup(props) {
    var toastTypeIcon = {
      loading: LoadingIcon,
      success: CheckCircleIcon,
      error: CloseCircleIcon
    };
    var toastClass = usePrefixClass("toast");
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var toastRef = ref();
    var customOverlayProps = computed(function () {
      var toastOverlayProps = {
        preventScrollThrough: props.preventScrollThrough,
        visible: props.showOverlay
      };
      return _objectSpread(_objectSpread({}, props.overlayProps), toastOverlayProps);
    });
    var classes = computed(function () {
      return ["".concat(toastClass.value), "".concat(toastClass.value, "__content"), "".concat(toastClass.value, "__icon"), _defineProperty(_defineProperty(_defineProperty({}, "".concat(toastClass.value, "--").concat(props.direction), props.direction), "".concat(toastClass.value, "__content--").concat(props.direction), props.direction), "".concat(toastClass.value, "--loading"), props.theme === "loading")];
    });
    var topOptions = {
      top: "25%",
      bottom: "75%",
      middle: "50%"
    };
    var computedStyle = computed(function () {
      return {
        top: topOptions[props.placement]
      };
    });
    var iconClasses = computed(function () {
      return [_defineProperty({}, "".concat(toastClass.value, "__icon--").concat(props.direction), props.direction)];
    });
    var iconContent = computed(function () {
      var iconNode = renderTNodeJSX("icon");
      if (iconNode === void 0 && props.theme) {
        iconNode = h(toastTypeIcon[props.theme]);
      }
      return iconNode;
    });
    var renderIconContent = computed(function () {
      if (iconContent.value) {
        return createVNode("div", {
          "class": iconClasses.value
        }, [iconContent.value]);
      }
      return "";
    });
    var textClasses = computed(function () {
      return [_defineProperty(_defineProperty({}, "".concat(toastClass.value, "__text"), !iconContent.value), "".concat(toastClass.value, "__text--").concat(props.direction), props.direction)];
    });
    var messageContent = computed(function () {
      return renderContent("default", "message");
    });
    var renderMessageContent = computed(function () {
      if (messageContent.value) {
        return createVNode("div", {
          "class": textClasses.value
        }, [messageContent.value]);
      }
      return "";
    });
    useLockScroll(toastRef, function () {
      return props.preventScrollThrough;
    }, toastClass.value);
    return function () {
      return createVNode("div", null, [createVNode(Overlay, customOverlayProps.value, null), createVNode("div", {
        "class": classes.value,
        "style": computedStyle.value
      }, [renderIconContent.value, renderMessageContent.value])]);
    };
  }
});

export { vueToast as default };
//# sourceMappingURL=toast.js.map
