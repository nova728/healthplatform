/**
 * tdesign v1.5.0
 * (c) 2024 TDesign Group
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { defineComponent, ref, computed, toRefs, createVNode, resolveComponent, mergeProps, Fragment } from 'vue';
import { AddIcon, LoadingIcon, CloseCircleIcon, CloseIcon } from 'tdesign-icons-vue-next';
import { Image } from '../image/index.js';
import { ImageViewer } from '../image-viewer/index.js';
import UploadProps from './props.js';
import config from '../config.js';
import useUpload from './hooks/useUpload.js';
import { useTNodeJSX, useContent } from '../hooks/tnode.js';
import { usePrefixClass } from '../hooks/useClass.js';
import { useConfig } from '../config-provider/useConfig.js';
import '../image/image.js';
import '@babel/runtime/helpers/slicedToArray';
import '@vueuse/core';
import '../loading/index.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/objectWithoutProperties';
import 'lodash/isString';
import 'lodash/isNull';
import 'lodash/isUndefined';
import 'lodash/isNumber';
import 'lodash/isArray';
import '../loading/icon/spinner.js';
import '../loading/props.js';
import '../shared/dom.js';
import 'lodash/isFunction';
import '../loading/plugin.js';
import 'lodash/merge';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../hooks/render-tnode.js';
import 'lodash/isEmpty';
import 'lodash/isObject';
import 'lodash/cloneDeep';
import '../config-provider/context.js';
import 'lodash/mergeWith';
import '../_common/js/global-config/mobile/default-config.js';
import '../_common/js/global-config/mobile/locale/zh_CN.js';
import '../_chunks/dep-cfc27041.js';
import '@babel/runtime/helpers/typeof';
import '../_chunks/dep-f4bc4e07.js';
import 'dayjs';
import '../shared/component.js';
import '../image/props.js';
import '../image-viewer/image-viewer.js';
import '../image-viewer/props.js';
import '../swiper/index.js';
import '../swiper/swiper.js';
import '../swipe-cell/useSwipe.js';
import '../shared/util.js';
import '../swiper/props.js';
import '../shared/useVModel/index.js';
import '../swiper/swiper-item.js';
import '../shared/useGesture/index.js';
import '@use-gesture/vanilla';
import '../shared/useDefault/index.js';
import '../_common/js/upload/main.js';
import '@babel/runtime/helpers/toArray';
import '../_common/js/upload/utils.js';
import '../_common/js/log/log.js';
import '../_common/js/upload/xhr.js';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var prefix = config.prefix;
var _Upload = defineComponent({
  name: "".concat(prefix, "-upload"),
  components: {
    AddIcon: AddIcon,
    LoadingIcon: LoadingIcon,
    CloseCircleIcon: CloseCircleIcon,
    CloseIcon: CloseIcon,
    TImage: Image,
    TImageViewer: ImageViewer
  },
  props: UploadProps,
  emits: ["update:files", "update:modelValue", "change", "fail", "preview", "progress", "remove", "success", "select-change", "validate", "click-upload"],
  setup: function setup(props) {
    var uploadClass = usePrefixClass("upload");
    var _useConfig = useConfig("upload"),
      globalConfig = _useConfig.globalConfig;
    var _useUpload = useUpload(props),
      toUploadFiles = _useUpload.toUploadFiles,
      uploadValue = _useUpload.uploadValue,
      displayFiles = _useUpload.displayFiles,
      sizeOverLimitMessage = _useUpload.sizeOverLimitMessage,
      uploading = _useUpload.uploading,
      inputRef = _useUpload.inputRef,
      disabled = _useUpload.disabled,
      xhrReq = _useUpload.xhrReq,
      uploadFilePercent = _useUpload.uploadFilePercent,
      uploadFiles = _useUpload.uploadFiles,
      onFileChange = _useUpload.onFileChange,
      onNormalFileChange = _useUpload.onNormalFileChange,
      onInnerRemove = _useUpload.onInnerRemove,
      cancelUpload = _useUpload.cancelUpload;
    var renderTNodeJSX = useTNodeJSX();
    var renderContent = useContent();
    var showViewer = ref(false);
    var initialIndex = ref(0);
    var handlePreview = function handlePreview(e, file, index) {
      var _props$onPreview;
      initialIndex.value = index;
      showViewer.value = true;
      (_props$onPreview = props.onPreview) === null || _props$onPreview === void 0 || _props$onPreview.call(props, {
        e: e,
        file: file,
        index: index
      });
    };
    var triggerUpload = function triggerUpload(e) {
      var _props$onClickUpload;
      var input = inputRef.value;
      if (disabled !== null && disabled !== void 0 && disabled.value) return;
      input.click();
      (_props$onClickUpload = props.onClickUpload) === null || _props$onClickUpload === void 0 || _props$onClickUpload.call(props, {
        e: e
      });
    };
    var previewImgs = computed(function () {
      return displayFiles.value.map(function (item) {
        return item.url;
      });
    });
    var handleImageClose = function handleImageClose(_ref) {
      var visible = _ref.visible;
      showViewer.value = visible;
    };
    var renderStatus = function renderStatus(file) {
      if (file.status === "fail" || file.status === "progress") {
        return createVNode("div", {
          "class": "".concat(uploadClass.value, "__progress-mask")
        }, [file.status === "progress" ? createVNode(Fragment, null, [createVNode(resolveComponent("loading-icon"), {
          "class": "".concat(uploadClass.value, "__progress-loading"),
          "size": "24"
        }, null), createVNode("div", {
          "class": "".concat(uploadClass.value, "__progress-text")
        }, [file.percent ? "".concat(file.percent, "%") : globalConfig.value.progress.uploadingText])]) : createVNode(resolveComponent("close-circle-icon"), {
          "size": "24"
        }, null), file.status === "fail" && createVNode("div", {
          "class": "".concat(uploadClass.value, "__progress-text")
        }, [globalConfig.value.progress.failText])]);
      }
    };
    var content = function content() {
      var _displayFiles$value;
      var defaultContent = renderContent("default", "content");
      var addContent = renderTNodeJSX("addContent");
      if (props.max === 0 || props.max > 0 && ((_displayFiles$value = displayFiles.value) === null || _displayFiles$value === void 0 ? void 0 : _displayFiles$value.length) < props.max) {
        if (defaultContent) {
          return createVNode("div", {
            "onClick": triggerUpload
          }, [defaultContent]);
        }
        return createVNode("div", {
          "class": "".concat(uploadClass.value, "__item ").concat(uploadClass.value, "__item--add"),
          "onClick": triggerUpload
        }, [createVNode("div", {
          "class": "".concat(uploadClass.value, "__add-icon")
        }, [addContent || createVNode(resolveComponent("add-icon"), {
          "size": "28"
        }, null)])]);
      }
    };
    return _objectSpread(_objectSpread({}, toRefs(props)), {}, {
      uploadClass: uploadClass,
      globalConfig: globalConfig,
      initialIndex: initialIndex,
      showViewer: showViewer,
      previewImgs: previewImgs,
      toUploadFiles: toUploadFiles,
      uploadValue: uploadValue,
      displayFiles: displayFiles,
      sizeOverLimitMessage: sizeOverLimitMessage,
      uploading: uploading,
      inputRef: inputRef,
      disabled: disabled,
      xhrReq: xhrReq,
      handlePreview: handlePreview,
      triggerUpload: triggerUpload,
      uploadFilePercent: uploadFilePercent,
      uploadFiles: uploadFiles,
      onFileChange: onFileChange,
      onNormalFileChange: onNormalFileChange,
      onInnerRemove: onInnerRemove,
      cancelUpload: cancelUpload,
      handleImageClose: handleImageClose,
      renderStatus: renderStatus,
      content: content
    });
  },
  render: function render() {
    var _this = this;
    return createVNode("div", {
      "class": "".concat(this.uploadClass)
    }, [this.displayFiles.map(function (file, index) {
      return createVNode("div", {
        "key": index,
        "class": "".concat(_this.uploadClass, "__item")
      }, [file.url && createVNode(resolveComponent("t-image"), mergeProps({
        "class": "".concat(_this.uploadClass, "__image"),
        "shape": "round"
      }, _this.$props.imageProps, {
        "src": file.url,
        "onClick": function onClick(e) {
          return _this.handlePreview(e, file, index);
        }
      }), null), _this.renderStatus(file), createVNode(resolveComponent("close-icon"), {
        "class": "".concat(_this.uploadClass, "__delete-btn"),
        "onClick": function onClick(_ref2) {
          var e = _ref2.e;
          return _this.onInnerRemove({
            e: e,
            file: file,
            index: index
          });
        }
      }, null)]);
    }), this.content(), createVNode("input", {
      "ref": "inputRef",
      "value": this.$props.files,
      "type": "file",
      "multiple": this.$props.multiple,
      "hidden": true,
      "accept": this.$props.accept,
      "onChange": this.onNormalFileChange
    }, null), createVNode(resolveComponent("t-image-viewer"), {
      "visible": this.showViewer,
      "images": this.previewImgs,
      "index": this.initialIndex,
      "onClose": this.handleImageClose
    }, null)]);
  }
});

export { _Upload as default };
//# sourceMappingURL=upload.js.map
